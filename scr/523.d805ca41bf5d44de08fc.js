"use strict";(self.webpackChunkansy_2025=self.webpackChunkansy_2025||[]).push([[523],{581:(e,t,s)=>{s.d(t,{a:()=>n});const n={ep01:o(1,{highscore:0,total:0}),ep02:o(2,{losses:0})};function o(e,t){const s=t=>localStorage.getItem(`Ansy-2025/${e}/${t}`),n=(t,s)=>localStorage.setItem(`Ansy-2025/${e}/${t}`,s),o={$reset(){}};for(const e of Object.keys(t)){const a=t[e];"string"==typeof a?Object.defineProperty(o,e,{configurable:!1,enumerable:!0,get:()=>{const t=s(e);return"string"==typeof t?t:a},set:t=>{n(e,t)}}):Object.defineProperty(o,e,{configurable:!1,enumerable:!0,get:()=>{const t=Number(s(e));return Number.isNaN(t)?a:t},set:t=>{n(e,`${t}`)}})}return o.$reset=()=>{for(const e of Object.keys(t)){const s=t[e];o[e]=s}},o}},3523:(e,t,s)=>{s.r(t),s.d(t,{default:()=>d});var n=s(6070),o=s(6542),a=s(6615),r=s(2198),c=s(581);function d(){const e=(0,o.m)(),t=[e.dead1(),e.dead2(),e.dead3(),e.dead4(),e.dead5(),e.dead6()],s=t[Math.max(0,Math.min(c.a.ep02.losses,t.length-1))];return(0,n.jsx)(a.A,{onDone:()=>{c.a.ep02.losses++,(0,r.gQ)("/02/play")},pages:[s]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyLzUyMy4wMzYzNjllNDBkNDQwMjY3MmM0OS5qcyIsIm1hcHBpbmdzIjoicUhBQU8sTUFBTUEsRUFBYyxDQUN2QkMsS0FBTUMsRUFBSyxFQUFHLENBQ1ZDLFVBQVcsRUFDWEMsTUFBTyxJQUVYQyxLQUFNSCxFQUFLLEVBQUcsQ0FDVkksT0FBUSxLQUloQixTQUFTSixFQUNMSyxFQUNBQyxHQUVBLE1BQU1DLEVBQU9DLEdBQ1RDLGFBQWFDLFFBQVEsYUFBYUwsS0FBV0csS0FDM0NHLEVBQU0sQ0FBQ0gsRUFBYUksSUFDdEJILGFBQWFJLFFBQVEsYUFBYVIsS0FBV0csSUFBT0ksR0FDbERFLEVBQU0sQ0FDUixNQUFBQyxHQUFVLEdBRWQsSUFBSyxNQUFNUCxLQUFPUSxPQUFPQyxLQUFLWCxHQUFnQixDQUMxQyxNQUFNWSxFQUFTWixFQUFjRSxHQUNQLGlCQUFYVSxFQUNQRixPQUFPRyxlQUFlTCxFQUFLTixFQUFLLENBQzVCWSxjQUFjLEVBQ2RDLFlBQVksRUFDWmQsSUFBSyxLQUNELE1BQU1LLEVBQU1MLEVBQUlDLEdBQ2hCLE1BQXNCLGlCQUFSSSxFQUFtQkEsRUFBTU0sR0FFM0NQLElBQU1DLElBQ0ZELEVBQUlILEVBQUtJLE1BSWpCSSxPQUFPRyxlQUFlTCxFQUFLTixFQUFLLENBQzVCWSxjQUFjLEVBQ2RDLFlBQVksRUFDWmQsSUFBSyxLQUNELE1BQU1LLEVBQU1VLE9BQU9mLEVBQUlDLElBQ3ZCLE9BQU9jLE9BQU9DLE1BQU1YLEdBQU9NLEVBQVNOLEdBRXhDRCxJQUFNQyxJQUNGRCxFQUFJSCxFQUFLLEdBQUdJLE9BSTVCLENBUUEsT0FQQUUsRUFBSUMsT0FBUyxLQUNULElBQUssTUFBTVAsS0FBT1EsT0FBT0MsS0FBS1gsR0FBZ0IsQ0FDMUMsTUFBTU0sRUFBTU4sRUFBY0UsR0FDMUJNLEVBQUlOLEdBQU9JLENBQ2YsR0FHR0UsQ0FDWCxDLG9HQ2xEZSxTQUFTVSxJQUNwQixNQUFNQyxHQUFLLFNBQ0xDLEVBQVcsQ0FDYkQsRUFBR0UsUUFDSEYsRUFBR0csUUFDSEgsRUFBR0ksUUFDSEosRUFBR0ssUUFDSEwsRUFBR00sUUFDSE4sRUFBR08sU0FFREMsRUFDRlAsRUFDSVEsS0FBS0MsSUFBSSxFQUFHRCxLQUFLRSxJQUFJLElBQVlqQyxLQUFLQyxPQUFRc0IsRUFBU1csT0FBUyxLQUV4RSxPQUNJLFNBQUMsSUFBUSxDQUNMQyxPQUFRLEtBQ0osSUFBWW5DLEtBQUtDLFVBQ2pCLFFBQUssYUFFVG1DLE1BQU8sQ0FBQ04sSUFHcEIsQyIsInNvdXJjZXMiOlsiL1VzZXJzL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9zdG9yYWdlL3N0b3JhZ2UudHMiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL2FwcC8wMi9kZWFkL3BhZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBHYW1lU3RvcmFnZSA9IHtcbiAgICBlcDAxOiBtYWtlKDEsIHtcbiAgICAgICAgaGlnaHNjb3JlOiAwLFxuICAgICAgICB0b3RhbDogMCxcbiAgICB9KSxcbiAgICBlcDAyOiBtYWtlKDIsIHtcbiAgICAgICAgbG9zc2VzOiAwLFxuICAgIH0pLFxufVxuXG5mdW5jdGlvbiBtYWtlPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+PihcbiAgICBlcGlzb2RlOiBudW1iZXIsXG4gICAgZGVmYXVsdFZhbHVlczogVFxuKTogVCAmIHsgJHJlc2V0OiAoKSA9PiB2b2lkIH0ge1xuICAgIGNvbnN0IGdldCA9IChrZXk6IHN0cmluZykgPT5cbiAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oYEFuc3ktMjAyNS8ke2VwaXNvZGV9LyR7a2V5fWApXG4gICAgY29uc3Qgc2V0ID0gKGtleTogc3RyaW5nLCB2YWw6IHN0cmluZykgPT5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYEFuc3ktMjAyNS8ke2VwaXNvZGV9LyR7a2V5fWAsIHZhbClcbiAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICRyZXNldCgpIHt9LFxuICAgIH0gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPiAmIHsgJHJlc2V0OiAoKSA9PiB2b2lkIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkZWZhdWx0VmFsdWVzKSkge1xuICAgICAgICBjb25zdCBkZWZWYWwgPSBkZWZhdWx0VmFsdWVzW2tleV1cbiAgICAgICAgaWYgKHR5cGVvZiBkZWZWYWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZ2V0KGtleSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyB2YWwgOiBkZWZWYWxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogKHZhbDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldChrZXksIHZhbClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gTnVtYmVyKGdldChrZXkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKHZhbCkgPyBkZWZWYWwgOiB2YWxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogKHZhbDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldChrZXksIGAke3ZhbH1gKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIG9iai4kcmVzZXQgPSAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBkZWZhdWx0VmFsdWVzW2tleV1cbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqIGFzIFQgJiB7ICRyZXNldDogKCkgPT4gdm9pZCB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgdXNlVHJhbnNsYXRvciB9IGZyb20gXCIuLi9fdHJhbnNsYXRpb25cIlxuaW1wb3J0IFZpZXdCb29rIGZyb20gXCJAL2NvbXBvbmVudHMvVmlld0Jvb2tcIlxuaW1wb3J0IHsgZ290byB9IGZyb20gXCJAL2FwcC9yb3V0ZXNcIlxuaW1wb3J0IHsgR2FtZVN0b3JhZ2UgfSBmcm9tIFwiQC9zdG9yYWdlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZURlYWQoKSB7XG4gICAgY29uc3QgdHIgPSB1c2VUcmFuc2xhdG9yKClcbiAgICBjb25zdCBtZXNzYWdlcyA9IFtcbiAgICAgICAgdHIuZGVhZDEoKSxcbiAgICAgICAgdHIuZGVhZDIoKSxcbiAgICAgICAgdHIuZGVhZDMoKSxcbiAgICAgICAgdHIuZGVhZDQoKSxcbiAgICAgICAgdHIuZGVhZDUoKSxcbiAgICAgICAgdHIuZGVhZDYoKSxcbiAgICBdXG4gICAgY29uc3QgdGV4dCA9XG4gICAgICAgIG1lc3NhZ2VzW1xuICAgICAgICAgICAgTWF0aC5tYXgoMCwgTWF0aC5taW4oR2FtZVN0b3JhZ2UuZXAwMi5sb3NzZXMsIG1lc3NhZ2VzLmxlbmd0aCAtIDEpKVxuICAgICAgICBdXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFZpZXdCb29rXG4gICAgICAgICAgICBvbkRvbmU9eygpID0+IHtcbiAgICAgICAgICAgICAgICBHYW1lU3RvcmFnZS5lcDAyLmxvc3NlcysrXG4gICAgICAgICAgICAgICAgZ290byhcIi8wMi9wbGF5XCIpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgcGFnZXM9e1t0ZXh0XX1cbiAgICAgICAgLz5cbiAgICApXG59XG4iXSwibmFtZXMiOlsiR2FtZVN0b3JhZ2UiLCJlcDAxIiwibWFrZSIsImhpZ2hzY29yZSIsInRvdGFsIiwiZXAwMiIsImxvc3NlcyIsImVwaXNvZGUiLCJkZWZhdWx0VmFsdWVzIiwiZ2V0Iiwia2V5IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldCIsInZhbCIsInNldEl0ZW0iLCJvYmoiLCIkcmVzZXQiLCJPYmplY3QiLCJrZXlzIiwiZGVmVmFsIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiTnVtYmVyIiwiaXNOYU4iLCJQYWdlRGVhZCIsInRyIiwibWVzc2FnZXMiLCJkZWFkMSIsImRlYWQyIiwiZGVhZDMiLCJkZWFkNCIsImRlYWQ1IiwiZGVhZDYiLCJ0ZXh0IiwiTWF0aCIsIm1heCIsIm1pbiIsImxlbmd0aCIsIm9uRG9uZSIsInBhZ2VzIl0sInNvdXJjZVJvb3QiOiIifQ==