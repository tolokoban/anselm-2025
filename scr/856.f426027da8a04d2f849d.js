"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[856],{7987:(e,t,n)=>{n.d(t,{A:()=>u});var s=n(1354),i=n.n(s),r=n(6314),o=n.n(r),a=n(4417),c=n.n(a),h=new URL(n(5191),n.b),l=o()(i()),d=c()(h);l.push([e.id,`.src-app-01-play-page-module_page_dkZp9d {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: transparent;\n}\n\n.src-app-01-play-page-module_hill_wIVKEM {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(${d});\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear src-app-01-play-page-module_anim_dAYel7;\n}\n\n@keyframes src-app-01-play-page-module_anim_dAYel7 {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: 1920px;\n    }\n}\n\ndiv#sprite-spaceship {\n    position: absolute;\n    z-index: 85;\n}\n\ndiv#sprite-spaceship-main {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv#sprite-spaceship-laser {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\ndiv#score {\n    font-size: 10vmin;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n`,"",{version:3,sources:["webpack://./src/app/01/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,6BAA6B;AACjC;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,SAAS;IACT,WAAW;IACX,cAAc;IACd,yDAAuC;IACvC,2BAA2B;IAC3B,sBAAsB;IACtB,8BAA8B;IAC9B,qEAAkC;AACtC;;AAEA;IACI;QACI,sBAAsB;IAC1B;IACA;QACI,2BAA2B;IAC/B;AACJ;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,UAAU;IACV,YAAY;IACZ,uBAAuB;IACvB,sEAAsE;IACtE,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,YAAY;AAChB",sourcesContent:['.page {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: transparent;\n}\n\n.hill {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(@/gfx/hills.webp);\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear anim;\n}\n\n@keyframes anim {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: 1920px;\n    }\n}\n\n:global(div#sprite-spaceship) {\n    position: absolute;\n    z-index: 85;\n}\n\n:global(div#sprite-spaceship-main) {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n:global(div#sprite-spaceship-laser) {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\n:global(div#score) {\n    font-size: 10vmin;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n'],sourceRoot:""}]),l.locals={page:"src-app-01-play-page-module_page_dkZp9d",hill:"src-app-01-play-page-module_hill_wIVKEM",anim:"src-app-01-play-page-module_anim_dAYel7"};const u=l},4263:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(1354),i=n.n(s),r=n(6314),o=n.n(r)()(i());o.push([e.id,".src-components-LandscapeView-LandscapeView-module_parent_vK28h0,\n.src-components-LandscapeView-LandscapeView-module_child_wetol2 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.src-components-LandscapeView-LandscapeView-module_parent_vK28h0 {\n    transform-origin: top left;\n}\n","",{version:3,sources:["webpack://./src/components/LandscapeView/LandscapeView.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:[".parent,\n.child {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.parent {\n    transform-origin: top left;\n}\n"],sourceRoot:""}]),o.locals={parent:"src-components-LandscapeView-LandscapeView-module_parent_vK28h0",child:"src-components-LandscapeView-LandscapeView-module_child_wetol2"};const a=o},315:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(1354),i=n.n(s),r=n(6314),o=n.n(r)()(i());o.push([e.id,'.src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt,\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt {\n    width: 100%;\n    border: 1vmin solid #0137;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n',"",{version:3,sources:["webpack://./src/components/ViewEnergyBar/ViewEnergyBar.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,oBAAoB;IACpB,kBAAkB;IAClB,qBAAqB;IACrB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;;IAEI,WAAW;IACX,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,SAAS;IACT,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,UAAU;IACV,qDAAqD;IACrD,kCAAkC;AACtC",sourcesContent:['.viewEnergyBar {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.border,\n.level {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.border {\n    width: 100%;\n    border: 1vmin solid #0137;\n}\n\n.level {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n'],sourceRoot:""}]),o.locals={viewEnergyBar:"src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu",border:"src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt",level:"src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6"};const a=o},7013:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(1354),i=n.n(s),r=n(6314),o=n.n(r)()(i());o.push([e.id,'.src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4 {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n',"",{version:3,sources:["webpack://./src/components/ViewSprite/ViewSprite.module.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,kBAAkB;IAClB,mCAAmC;IACnC,0BAA0B;IAC1B,oBAAoB;IACpB,8BAA8B;AAClC",sourcesContent:['.sprite {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n'],sourceRoot:""}]),o.locals={sprite:"src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4"};const a=o},7144:(e,t,n)=>{n.d(t,{A:()=>s});const s={congrats:["C'est un nouveau record !!!","Ancien record pulvérisé !!!","Tu progresses ! Bravo !!!","Eh hop ! Nouveau record !!!","Tu progresses trop bien !!!","Tu as encore fait mieux !!!","Tu te dépasses Anselm !!!","De mieux en mieux Ansy !!!"],gameOver:["Ouch... Tu t'es bien explosé, là !","Tu t'es crashé en beauté !","Tu as brouté les marguerites !","La gravité t'a rattrappé !","T'as fait bobo à mon vaisseau !","Oh ! Ça doit faire mal ça !","T'es sūr d'avoir ton permis ?","On va dire qu'on n'a rien vu...","Hey ! Tu sais combien ça coūte une soucoupe ?","Tu as rayé la peinture là !","Rapelle-moi de ne jamais monter avec toi dans un vaisseau...","Tu as heurté le plancher des vaches !","Boum ! Dans ta face !","Alors c'est mon garagiste qui va être content..."],intro1:"Cher Anselm,\nTu viens d'avoir 9 ans et tu es à mi-chemin de la majorité.\n          \nDu moins... d'après les critères Terrestres.",intro2:"Mais tu dois t'en douter maintenant :\ntu ne viens pas vraiment de la Terre...\n\nEt il est grand temps que tu rentres chez toi.",intro3:"On t'a laissé une soucoupe, mais elle n'a pas encore assez d'énergie pour faire le voyage à travers la galaxie.",intro4:"Pour faire le plein, clique sur l'écran ou appuie sur la barre d'espace.\nUne centaine de bovins devrait faire l'affaire.\n\n$1",highscore:["Record à battre : $1.","Précédent record : $1","Pourras-tu battre $1 ?","Tu as déjà réussi $1.","Meilleur score : $1."],score:"$1 $2",scoreCow:["vache","vache","vache","vache","bestiole","laitière","meuh-meuh","Marguerite","bête"],scoreEat:["absorbée","aspirée","attrapée","avalée","capturée","déchiquetée","dépecée","désintégrée","digérée","écorchée","emprisonnée","engloutie","liquidée","mangée","pulvérisée"],seeYou:"À très bientôt ANSELM !!!"}},1154:(e,t,n)=>{n.d(t,{m:()=>r});var s=n(3708),i=n(7144);function r(){return(0,s.L5)(i.A,{en:()=>n.e(91).then(n.bind(n,3091)),alien:()=>n.e(861).then(n.bind(n,2861))})}},475:(e,t,n)=>{n.r(t),n.d(t,{default:()=>ie});var s=n(4848),i=n(6540);class r{constructor(){this.intentRight=0,this.intentLeft=0,this.intentSubduction=0,this.handlePointerDown=e=>{e.preventDefault(),e.stopPropagation(),this.intentSubduction=1},this.handlePointerUp=()=>{this.intentSubduction=0},this.handleContextMenu=e=>{e.preventDefault(),e.stopPropagation()},this.handleKeyDown=e=>{const t=Date.now();switch(e.key){case" ":this.intentSubduction=t;break;case"ArrowRight":this.intentRight=t;break;case"ArrowLeft":this.intentLeft=t}},this.handleKeyUp=e=>{switch(e.key){case" ":this.intentSubduction=0;break;case"ArrowRight":this.intentRight=0;break;case"ArrowLeft":this.intentLeft=0}}}attach(){document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),document.body.addEventListener("pointerdown",this.handlePointerDown),document.body.addEventListener("pointerup",this.handlePointerUp),document.body.addEventListener("contextmenu",this.handleContextMenu)}detach(){document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),document.body.removeEventListener("pointerdown",this.handlePointerDown),document.body.removeEventListener("pointerup",this.handlePointerUp),document.body.removeEventListener("contextmenu",this.handleContextMenu)}wantsToGoRight(){return!1}wantsToGoLeft(){return!1}wantsToSubdue(){return this.intentSubduction>0}}class o{constructor(e=1920,t=1080){this.logicalWidth=e,this.logicalHeight=t,this.element=null,this.transform={x:0,y:0,scale:1},this.handleResize=()=>{const{element:e}=this;if(!e)return;const t=e.getBoundingClientRect(),n=Math.max(t.width,t.height),s=Math.min(t.width,t.height),i=n/this.logicalWidth,r=s/this.logicalHeight,o=Math.min(i,r);this.transform.x=(n-this.logicalWidth*o)/2,this.transform.y=(s-this.logicalHeight*o)/2,this.transform.scale=o},this.observer=new ResizeObserver(this.handleResize)}x(e){const{scale:t,x:n}=this.transform;return e*t+n}y(e){const{scale:t,y:n}=this.transform;return e*t+n}width(e){return e*this.transform.scale}hight(e){return e*this.transform.scale}attach(e){this.detach(),this.element=e,this.observer.observe(e),this.handleResize()}detach(){this.element&&(this.observer.unobserve(this.element),this.element=null)}}class a{constructor(e,t){this.coords=e,this.elementId=t,this.status={x:0,y:0,width:128,height:128,rotation:0,scaleX:1,scaleY:1}}get x(){return this.status.x}get y(){return this.status.y}get width(){return this.status.width}get height(){return this.status.height}get rotation(){return this.status.rotation}update(e){this.status=Object.assign(Object.assign({},this.status),e);const{element:t,coords:n,status:s}=this;if(!t)return!1;const i=n.x(s.x),r=n.y(s.y),o=n.width(s.width)*s.scaleX,a=n.width(s.height)*s.scaleY;return t.style.left=i-o/2+"px",t.style.top=r-a/2+"px",t.style.width=`${o}px`,t.style.height=`${a}px`,t.style.transform=`rotate(${s.rotation}deg)`,!0}get element(){const e=document.getElementById(this.elementId);return e||console.error("No element with this id:",this.elementId),e}}function c(e,t,n){return e<t?t:e>n?n:e}const h=1e4;class l{constructor(){this._value=h}get value(){return this._value}set value(e){const t=c(e,0,h);if(t===this._value)return;this._value=t;const n=document.getElementById("energy-level");if(!n)return;const s=100*t/h;n.style.width=`${s}%`}reset(){this._value=0,this.value=h}add(e){this.value+=e}sub(e){this.value-=e}}var d=n(9419);class u{constructor(e){this.time0=0;const t=new a(e,"sprite-cow");this.sprite=t,t.update({x:-960,y:720,width:256,height:128})}get x(){return this.sprite.x}get y(){return this.sprite.y}reset(e){this.time0=e,this.sprite.update({scaleX:1,scaleY:1})}process(e,t){e-=this.time0;const{sprite:n}=this,s=e%4e3/4e3*3840-1920,i=.005*e,r=720-2*(n.height*Math.abs(Math.sin(i))-n.height),o=30*Math.cos(2*i);n.update({x:s,y:r,rotation:o})}subdue(e,t,n,s){const i=1-.9*n;this.sprite.update({x:e,y:t,rotation:this.sprite.rotation+.5*s,scaleX:i,scaleY:i})}hit(e,t,n){const{sprite:s}=this,i=s.x,r=s.y,o=n*Math.PI/180,a=-Math.sin(o),c=Math.cos(o),h=i-e,l=r-t;return Math.abs(h*c-l*a)<.2*s.height}}const A=n.p+"img/spaceship-fall.aaad7588504a9d2f8557.mp3",p=n.p+"img/cow-1.a3679cb45c6904b9f0fc.mp3",m=n.p+"img/cow-2.ec72ce85a03164101f51.mp3",g=n.p+"img/cow-3.50a04254a4fd3bc5db54.mp3",b=n.p+"img/cow-4.3a304a06d2bf4a7079f0.mp3",v=n.p+"img/cow-5.848fe76f5244d0c002c8.mp3",w=n.p+"img/cow-6.9c48651c9f478b7afc69.mp3",f=n.p+"img/cow-7.139c9688c86137c608a5.mp3",y=n.p+"img/cow-8.0a8f063cde2eaca75620.mp3",B=n.p+"img/ray.3270b1fe94b22d0577fa.mp3";var C=n(866);class I{constructor(){this.spaceshipFall=x(A),this.ray=x(B),this.cows=[x(p),x(m),x(g),x(b),x(v),x(w),x(f),x(y)]}get cow(){return(0,C.U)(this.cows)}}function x(e){return new k(e)}class k{constructor(e){this.audio=new Audio(e)}get currentTime(){return this.audio.currentTime}set currentTime(e){this.audio.currentTime=e}play(){try{this.audio.play()}catch(e){}}pause(){try{this.audio.pause()}catch(e){}}}class E{constructor(e,t){this.intention=e,this.sound=t,this.rayActive=!1}process(){const{ray:e}=this.sound,t=this.intention.wantsToSubdue();t&&!this.rayActive?(this.rayActive=!0,e.currentTime=0,e.play()):!t&&this.rayActive&&(this.rayActive=!1,e.pause())}stop(){this.sound.ray.pause()}}class T{static use(e){const t=i.useRef(null);return t.current||(t.current=new T(e)),i.useEffect((()=>{const e=t.current;if(e)return console.log("MOUNT"),()=>{console.log("UNMOUNT"),e.detach(),t.current=null}}),[]),t.current}constructor(e){this.sound=new I,this.intention=new r,this.mode="run",this.pauseAccumulator=0,this.energy=new l,this.time=0,this.laser=0,this.dieTime=0,this.dieY=0,this.eatX0=0,this.eatY0=0,this.eatX1=0,this.eatY1=0,this.eatTime=0,this.animationFrame=0,this._score=0,this.attach=e=>{this.intention.attach(),this.coords.attach(e),this.scheduleNextFrame(),this.energy.reset(),this.score=0},this.nextFrame=e=>{this.scheduleNextFrame();let t=0;switch(this.time>0&&(t=e-this.time),this.time=e,e-=this.pauseAccumulator,this.mode){case"run":this.doRun(e,t);break;case"die":this.doDie(e,t);break;case"eat":this.doEat(e,t)}},this.tr=e;const t=new o;this.cow=new u(t),this.coords=t,this.spaceship=new a(t,"sprite-spaceship"),this.spaceship.update({x:960,y:360,width:512,height:256}),this.ray=new E(this.intention,this.sound)}updateTranslator(e){this.tr=e}get score(){return this._score}set score(e){this._score=e;const t=document.getElementById("score"),n=e>1?"s":"";if(t){const{tr:s}=this;t.textContent=`${s.score(`${s.scoreCow()}${n}`,`${s.scoreEat()}${n}`)} ${e}`}}detach(){this.intention.detach(),this.coords.detach(),window.cancelAnimationFrame(this.animationFrame),this.animationFrame=0}setLaserOpacity(e){if(e===this.laser)return;this.laser=e;const t=document.getElementById("sprite-spaceship-laser");t&&(t.style.opacity=`${e}`)}scheduleNextFrame(){window.cancelAnimationFrame(this.animationFrame),this.animationFrame=window.requestAnimationFrame(this.nextFrame)}doRun(e,t){const{intention:n,spaceship:s,cow:i}=this;i.process(e,t),this.ray.process();const r=40*Math.sin(.002*e);let o=s.x;n.wantsToGoRight()&&(o+=3*t),n.wantsToGoLeft()&&(o-=3*t),o=960+250*(Math.cos(e*(.001633+2e-9*e))+Math.sin(.002904*e)),this.setLaserOpacity(n.wantsToSubdue()?1:0),s.update({x:c(o,300,1620),rotation:r});let a=.4*t;if((n.wantsToGoLeft()||n.wantsToGoRight())&&(a*=2),n.wantsToSubdue()&&(a*=10,i.hit(s.x,s.y,s.rotation)))return this.sound.cow.play(),this.mode="eat",this.eatX0=i.x,this.eatY0=i.y,this.eatX1=s.x,this.eatY1=s.y,this.eatTime=e,void this.score++;this.energy.sub(a),this.energy.value<=0&&(this.sound.spaceshipFall.play(),this.mode="die",this.dieTime=e,this.dieY=s.y,this.setLaserOpacity(0),this.ray.stop())}doDie(e,t){const{spaceship:n}=this,s=n.rotation+.5*t,i=e-this.dieTime-200,r=this.dieY+200*(i*i-4e4)/4e4;n.update({rotation:s,y:r}),e-this.dieTime>1e3&&(window.sessionStorage.setItem("score",`${this.score}`),(0,d.gQ)("/01/dead"),this.detach()),this.cow.process(e,t)}doEat(e,t){const n=Math.min(1,(e-this.eatTime)/1e3),s=(this.eatX1-this.eatX0)*n+this.eatX0,i=(this.eatY1-this.eatY0)*n+this.eatY0;this.cow.subdue(s,i,n,t),1===n&&(this.mode="run",this.pauseAccumulator+=e-this.eatTime,this.cow.reset(e),this.energy.add(2e3))}}var _=n(7067),V=n(5072),M=n.n(V),L=n(7825),Y=n.n(L),z=n(7659),S=n.n(z),R=n(5056),$=n.n(R),j=n(540),U=n.n(j),N=n(1113),W=n.n(N),O=n(7013),P={};P.styleTagTransform=W(),P.setAttributes=$(),P.insert=S().bind(null,"head"),P.domAPI=Y(),P.insertStyleElement=U(),M()(O.A,P);const X=O.A&&O.A.locals?O.A.locals:void 0;function D({className:e,id:t,url:n,zIndex:i}){return(0,s.jsx)("div",{className:q(e,X.sprite),id:t,style:{"--custom-url":`url(${n})`,"--custom-z-index":i}})}function q(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var F=n(315),K={};K.styleTagTransform=W(),K.setAttributes=$(),K.insert=S().bind(null,"head"),K.domAPI=Y(),K.insertStyleElement=U(),M()(F.A,K);const Z=F.A&&F.A.locals?F.A.locals:void 0;function G({className:e}){return(0,s.jsxs)("div",{className:Q(e,Z.viewEnergyBar),children:[(0,s.jsx)("div",{className:Z.level,id:"energy-level"}),(0,s.jsx)("div",{className:Z.border})]})}function Q(...e){return e.filter((e=>"string"==typeof e)).join(" ")}const H=n.p+"img/spaceship.f2c56650c24a3b6bad9c.webp",J=n.p+"img/cow.889b9efd47b809848618.webp";var ee=n(7987),te={};te.styleTagTransform=W(),te.setAttributes=$(),te.insert=S().bind(null,"head"),te.domAPI=Y(),te.insertStyleElement=U(),M()(ee.A,te);const ne=ee.A&&ee.A.locals?ee.A.locals:void 0;var se=n(1154);function ie(){const e=(0,se.m)(),t=T.use(e);return(0,s.jsx)(_.A,{onMount:t.attach,children:(0,s.jsxs)("div",{className:ne.page,children:[[0,1,2,3].map((e=>{const t=1-.2*e;return(0,s.jsx)("div",{className:ne.hill,style:{bottom:10*Math.sqrt(e)+"vmin",zIndex:""+10*(9-e),transform:`scale(${t})`,animationDuration:3+5*e+"s",filter:`brightness(${.3*e+.2})`}})})),(0,s.jsxs)("div",{id:"sprite-spaceship",children:[(0,s.jsx)("div",{id:"sprite-spaceship-laser"}),(0,s.jsx)(D,{id:"sprite-spaceship-main",url:H,zIndex:81})]}),(0,s.jsx)(D,{id:"sprite-cow",url:J,zIndex:80}),(0,s.jsx)(G,{}),(0,s.jsx)("div",{id:"score"})]})})}},7067:(e,t,n)=>{n.d(t,{A:()=>f});var s=n(4848),i=n(6540),r=n(5072),o=n.n(r),a=n(7825),c=n.n(a),h=n(7659),l=n.n(h),d=n(5056),u=n.n(d),A=n(540),p=n.n(A),m=n(1113),g=n.n(m),b=n(4263),v={};v.styleTagTransform=g(),v.setAttributes=u(),v.insert=l().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=p(),o()(b.A,v);const w=b.A&&b.A.locals?b.A.locals:void 0;function f({className:e,onMount:t,children:n}){const r=i.useRef(null),o=i.useRef(null);return function(e,t){const n=i.useRef(null);n.current||(n.current=new ResizeObserver((n=>{const s=e.current,i=t.current;if(s&&i)for(const e of n){const t=e.target,{width:n,height:i}=t.getBoundingClientRect();i>n?(s.style.width=`${i}px`,s.style.height=`${n}px`,s.style.transform=`translateX(${n}px) rotate(90deg)`):(s.style.width=`${n}px`,s.style.height=`${i}px`,s.style.transform="none")}}))),i.useEffect((()=>{const t=e.current;if(!t)return;const s=n.current;if(!s)return;const i=t.parentElement;return i?(s.observe(i),()=>s.unobserve(i)):void 0}),[e.current])}(r,o),i.useEffect((()=>{const e=r.current;e&&(null==t||t(e))}),[r.current]),(0,s.jsx)("div",{className:y(e,w.parent),ref:r,children:(0,s.jsx)("div",{className:w.child,ref:o,children:n})})}function y(...e){return e.filter((e=>"string"==typeof e)).join(" ")}},866:(e,t,n)=>{function s(e){return Array.isArray(e)?e[Math.floor(Math.random()*e.length)]:e}n.d(t,{U:()=>s})},5191:(e,t,n)=>{e.exports=n.p+"img/hills.e5f756691ba70707d003.webp"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxDLGdCQ2xDTyxTQUFTOEIsRUFBUUMsR0FDcEIsT0FBS0MsTUFBTUMsUUFBUUYsR0FHWkEsRUFER2xLLEtBQUtxSyxNQUFNckssS0FBS3NLLFNBQVdKLEVBQUlLLFNBRlRMLENBSXBDLEMiLCJzb3VyY2VzIjpbIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9hcHAvMDEvcGxheS9wYWdlLm1vZHVsZS5jc3MiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvY29tcG9uZW50cy9MYW5kc2NhcGVWaWV3L0xhbmRzY2FwZVZpZXcubW9kdWxlLmNzcyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9jb21wb25lbnRzL1ZpZXdFbmVyZ3lCYXIvVmlld0VuZXJneUJhci5tb2R1bGUuY3NzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL2NvbXBvbmVudHMvVmlld1Nwcml0ZS9WaWV3U3ByaXRlLm1vZHVsZS5jc3MiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvYXBwLzAxL190cmFuc2xhdGlvbi9mci50cyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9hcHAvMDEvX3RyYW5zbGF0aW9uL2luZGV4LnRzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL2dhbWUvMDEvZW5naW5lL2ludGVudGlvbi50cyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9jb29yZHMudHMiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvZ2FtZS8wMS9lbmdpbmUvc3ByaXRlLnRzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL3V0aWxzL2NhbGMudHMiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvZ2FtZS8wMS9lbmdpbmUvZW5lcmd5LWJhci50cyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9nYW1lLzAxL2VuZ2luZS9jb3cudHMiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvZ2FtZS8wMS9lbmdpbmUvc291bmQudHMiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvZ2FtZS8wMS9lbmdpbmUvcmF5LnRzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL2dhbWUvMDEvZW5naW5lL2VuZ2luZS50cyIsIndlYnBhY2s6Ly8uLi4vLi9zcmMvY29tcG9uZW50cy9WaWV3U3ByaXRlL1ZpZXdTcHJpdGUubW9kdWxlLmNzcz85NjUzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL2NvbXBvbmVudHMvVmlld1Nwcml0ZS9WaWV3U3ByaXRlLnRzeCIsIndlYnBhY2s6Ly8uLi4vLi9zcmMvY29tcG9uZW50cy9WaWV3RW5lcmd5QmFyL1ZpZXdFbmVyZ3lCYXIubW9kdWxlLmNzcz85MmVkIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvYW5zZWxtLzIwMjUvc3JjL2NvbXBvbmVudHMvVmlld0VuZXJneUJhci9WaWV3RW5lcmd5QmFyLnRzeCIsIndlYnBhY2s6Ly8uLi4vLi9zcmMvYXBwLzAxL3BsYXkvcGFnZS5tb2R1bGUuY3NzP2M3OWYiLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvYXBwLzAxL3BsYXkvcGFnZS50c3giLCJ3ZWJwYWNrOi8vLi4uLy4vc3JjL2NvbXBvbmVudHMvTGFuZHNjYXBlVmlldy9MYW5kc2NhcGVWaWV3Lm1vZHVsZS5jc3M/Y2FjNSIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL2Fuc2VsbS8yMDI1L3NyYy9jb21wb25lbnRzL0xhbmRzY2FwZVZpZXcvTGFuZHNjYXBlVmlldy50c3giLCIvaG9tZS90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9nYW1lcy9hbnNlbG0vMjAyNS9zcmMvdXRpbHMvYXJyYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIkAvZ2Z4L2hpbGxzLndlYnBcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtYXBwLTAxLXBsYXktcGFnZS1tb2R1bGVfcGFnZV9ka1pwOWQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLnNyYy1hcHAtMDEtcGxheS1wYWdlLW1vZHVsZV9oaWxsX3dJVktFTSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IC0xOTIwcHg7XG4gICAgcmlnaHQ6IC0xOTIwcHg7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMzB2bWluO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KTtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0LXg7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDE5MjBweCAzMHZtaW47XG4gICAgYW5pbWF0aW9uOiAzcyBpbmZpbml0ZSBsaW5lYXIgc3JjLWFwcC0wMS1wbGF5LXBhZ2UtbW9kdWxlX2FuaW1fZEFZZWw3O1xufVxuXG5Aa2V5ZnJhbWVzIHNyYy1hcHAtMDEtcGxheS1wYWdlLW1vZHVsZV9hbmltX2RBWWVsNyB7XG4gICAgZnJvbSB7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDA7XG4gICAgfVxuICAgIHRvIHtcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTkyMHB4O1xuICAgIH1cbn1cblxuZGl2I3Nwcml0ZS1zcGFjZXNoaXAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB6LWluZGV4OiA4NTtcbn1cblxuZGl2I3Nwcml0ZS1zcGFjZXNoaXAtbWFpbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn1cblxuZGl2I3Nwcml0ZS1zcGFjZXNoaXAtbGFzZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDM1JTtcbiAgICB0b3A6IDUwJTtcbiAgICB3aWR0aDogMzAlO1xuICAgIGhlaWdodDogNTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmU5MztcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwgI2ZlOTAsICNmZTkzLCAjZmU5MywgI2ZlOTApO1xuICAgIHRyYW5zaXRpb246IG9wYWl0eSAwLjJzO1xuICAgIG9wYWNpdHk6IDA7XG59XG5cbmRpdiNzY29yZSB7XG4gICAgZm9udC1zaXplOiAxMHZtaW47XG4gICAgei1pbmRleDogMTAxO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMC41ZW07XG4gICAgYm90dG9tOiAwLjI1ZW07XG4gICAgY29sb3I6ICNmZTliO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYXBwLzAxL3BsYXkvcGFnZS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixjQUFjO0lBQ2QsU0FBUztJQUNULFdBQVc7SUFDWCxjQUFjO0lBQ2QseURBQXVDO0lBQ3ZDLDJCQUEyQjtJQUMzQixzQkFBc0I7SUFDdEIsOEJBQThCO0lBQzlCLHFFQUFrQztBQUN0Qzs7QUFFQTtJQUNJO1FBQ0ksc0JBQXNCO0lBQzFCO0lBQ0E7UUFDSSwyQkFBMkI7SUFDL0I7QUFDSjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixzRUFBc0U7SUFDdEUsdUJBQXVCO0lBQ3ZCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucGFnZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmhpbGwge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IC0xOTIwcHg7XFxuICAgIHJpZ2h0OiAtMTkyMHB4O1xcbiAgICBib3R0b206IDA7XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBoZWlnaHQ6IDMwdm1pbjtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKEAvZ2Z4L2hpbGxzLndlYnApO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0LXg7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDA7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMTkyMHB4IDMwdm1pbjtcXG4gICAgYW5pbWF0aW9uOiAzcyBpbmZpbml0ZSBsaW5lYXIgYW5pbTtcXG59XFxuXFxuQGtleWZyYW1lcyBhbmltIHtcXG4gICAgZnJvbSB7XFxuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwO1xcbiAgICB9XFxuICAgIHRvIHtcXG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDE5MjBweDtcXG4gICAgfVxcbn1cXG5cXG46Z2xvYmFsKGRpdiNzcHJpdGUtc3BhY2VzaGlwKSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogODU7XFxufVxcblxcbjpnbG9iYWwoZGl2I3Nwcml0ZS1zcGFjZXNoaXAtbWFpbikge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuOmdsb2JhbChkaXYjc3ByaXRlLXNwYWNlc2hpcC1sYXNlcikge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAzNSU7XFxuICAgIHRvcDogNTAlO1xcbiAgICB3aWR0aDogMzAlO1xcbiAgICBoZWlnaHQ6IDUwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZTkzO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwgI2ZlOTAsICNmZTkzLCAjZmU5MywgI2ZlOTApO1xcbiAgICB0cmFuc2l0aW9uOiBvcGFpdHkgMC4ycztcXG4gICAgb3BhY2l0eTogMDtcXG59XFxuXFxuOmdsb2JhbChkaXYjc2NvcmUpIHtcXG4gICAgZm9udC1zaXplOiAxMHZtaW47XFxuICAgIHotaW5kZXg6IDEwMTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICByaWdodDogMC41ZW07XFxuICAgIGJvdHRvbTogMC4yNWVtO1xcbiAgICBjb2xvcjogI2ZlOWI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInBhZ2VcIjogYHNyYy1hcHAtMDEtcGxheS1wYWdlLW1vZHVsZV9wYWdlX2RrWnA5ZGAsXG5cdFwiaGlsbFwiOiBgc3JjLWFwcC0wMS1wbGF5LXBhZ2UtbW9kdWxlX2hpbGxfd0lWS0VNYCxcblx0XCJhbmltXCI6IGBzcmMtYXBwLTAxLXBsYXktcGFnZS1tb2R1bGVfYW5pbV9kQVllbDdgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnNyYy1jb21wb25lbnRzLUxhbmRzY2FwZVZpZXctTGFuZHNjYXBlVmlldy1tb2R1bGVfcGFyZW50X3ZLMjhoMCxcbi5zcmMtY29tcG9uZW50cy1MYW5kc2NhcGVWaWV3LUxhbmRzY2FwZVZpZXctbW9kdWxlX2NoaWxkX3dldG9sMiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uc3JjLWNvbXBvbmVudHMtTGFuZHNjYXBlVmlldy1MYW5kc2NhcGVWaWV3LW1vZHVsZV9wYXJlbnRfdksyOGgwIHtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTGFuZHNjYXBlVmlldy9MYW5kc2NhcGVWaWV3Lm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7O0lBRUksa0JBQWtCO0lBQ2xCLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLFlBQVk7SUFDWixTQUFTO0lBQ1QsVUFBVTtJQUNWLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLDBCQUEwQjtBQUM5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucGFyZW50LFxcbi5jaGlsZCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5wYXJlbnQge1xcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicGFyZW50XCI6IGBzcmMtY29tcG9uZW50cy1MYW5kc2NhcGVWaWV3LUxhbmRzY2FwZVZpZXctbW9kdWxlX3BhcmVudF92SzI4aDBgLFxuXHRcImNoaWxkXCI6IGBzcmMtY29tcG9uZW50cy1MYW5kc2NhcGVWaWV3LUxhbmRzY2FwZVZpZXctbW9kdWxlX2NoaWxkX3dldG9sMmBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuc3JjLWNvbXBvbmVudHMtVmlld0VuZXJneUJhci1WaWV3RW5lcmd5QmFyLW1vZHVsZV92aWV3RW5lcmd5QmFyX01Vc2xpdSB7XG4gICAgLS1tYXJnaW46IDV2aDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogdmFyKC0tbWFyZ2luKTtcbiAgICByaWdodDogdmFyKC0tbWFyZ2luKTtcbiAgICB0b3A6IHZhcigtLW1hcmdpbik7XG4gICAgaGVpZ2h0OiB2YXIoLS1tYXJnaW4pO1xuICAgIGJvcmRlci1yYWRpdXM6IDk5dm1heDtcbiAgICBiYWNrZ3JvdW5kOiAjMDAwNTtcbn1cblxuLnNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfYm9yZGVyX3oycGNidCxcbi5zcmMtY29tcG9uZW50cy1WaWV3RW5lcmd5QmFyLVZpZXdFbmVyZ3lCYXItbW9kdWxlX2xldmVsX0tvcDBtNiB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiA5OXZtYXg7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLnNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfYm9yZGVyX3oycGNidCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyOiAxdm1pbiBzb2xpZCAjMDEzNztcbn1cblxuLnNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfbGV2ZWxfS29wMG02IHtcbiAgICB3aWR0aDogMzAlO1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICNmOTAsICNmZmYsICNmOTApO1xuICAgIGJveC1zaGFkb3c6IDAgMCB2YXIoLS1tYXJnaW4pICNmOTA7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1ZpZXdFbmVyZ3lCYXIvVmlld0VuZXJneUJhci5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLGlCQUFpQjtBQUNyQjs7QUFFQTs7SUFFSSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFlBQVk7SUFDWixxQkFBcUI7SUFDckIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksV0FBVztJQUNYLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLFVBQVU7SUFDVixxREFBcUQ7SUFDckQsa0NBQWtDO0FBQ3RDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi52aWV3RW5lcmd5QmFyIHtcXG4gICAgLS1tYXJnaW46IDV2aDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiB2YXIoLS1tYXJnaW4pO1xcbiAgICByaWdodDogdmFyKC0tbWFyZ2luKTtcXG4gICAgdG9wOiB2YXIoLS1tYXJnaW4pO1xcbiAgICBoZWlnaHQ6IHZhcigtLW1hcmdpbik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDk5dm1heDtcXG4gICAgYmFja2dyb3VuZDogIzAwMDU7XFxufVxcblxcbi5ib3JkZXIsXFxuLmxldmVsIHtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYm9yZGVyLXJhZGl1czogOTl2bWF4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uYm9yZGVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlcjogMXZtaW4gc29saWQgIzAxMzc7XFxufVxcblxcbi5sZXZlbCB7XFxuICAgIHdpZHRoOiAzMCU7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICNmOTAsICNmZmYsICNmOTApO1xcbiAgICBib3gtc2hhZG93OiAwIDAgdmFyKC0tbWFyZ2luKSAjZjkwO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ2aWV3RW5lcmd5QmFyXCI6IGBzcmMtY29tcG9uZW50cy1WaWV3RW5lcmd5QmFyLVZpZXdFbmVyZ3lCYXItbW9kdWxlX3ZpZXdFbmVyZ3lCYXJfTVVzbGl1YCxcblx0XCJib3JkZXJcIjogYHNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfYm9yZGVyX3oycGNidGAsXG5cdFwibGV2ZWxcIjogYHNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfbGV2ZWxfS29wMG02YFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtY29tcG9uZW50cy1WaWV3U3ByaXRlLVZpZXdTcHJpdGUtbW9kdWxlX3Nwcml0ZV9VWWxXYTQge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHZhcigtLWN1c3RvbS11cmwpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHotaW5kZXg6IHZhcigtLWN1c3RvbS16LWluZGV4KTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVmlld1Nwcml0ZS9WaWV3U3ByaXRlLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLG1DQUFtQztJQUNuQywwQkFBMEI7SUFDMUIsb0JBQW9CO0lBQ3BCLDhCQUE4QjtBQUNsQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3ByaXRlIHtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdmFyKC0tY3VzdG9tLXVybCk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgei1pbmRleDogdmFyKC0tY3VzdG9tLXotaW5kZXgpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJzcHJpdGVcIjogYHNyYy1jb21wb25lbnRzLVZpZXdTcHJpdGUtVmlld1Nwcml0ZS1tb2R1bGVfc3ByaXRlX1VZbFdhNGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSBcIkAvbGFuZ1wiXG5cbmNvbnN0IEZSID0ge1xuICAgIGNvbmdyYXRzOiBbXG4gICAgICAgIFwiQydlc3QgdW4gbm91dmVhdSByZWNvcmQgISEhXCIsXG4gICAgICAgIFwiQW5jaWVuIHJlY29yZCBwdWx2w6lyaXPDqSAhISFcIixcbiAgICAgICAgXCJUdSBwcm9ncmVzc2VzICEgQnJhdm8gISEhXCIsXG4gICAgICAgIFwiRWggaG9wICEgTm91dmVhdSByZWNvcmQgISEhXCIsXG4gICAgICAgIFwiVHUgcHJvZ3Jlc3NlcyB0cm9wIGJpZW4gISEhXCIsXG4gICAgICAgIFwiVHUgYXMgZW5jb3JlIGZhaXQgbWlldXggISEhXCIsXG4gICAgICAgIFwiVHUgdGUgZMOpcGFzc2VzIEFuc2VsbSAhISFcIixcbiAgICAgICAgXCJEZSBtaWV1eCBlbiBtaWV1eCBBbnN5ICEhIVwiLFxuICAgIF0sXG4gICAgZ2FtZU92ZXI6IFtcbiAgICAgICAgXCJPdWNoLi4uIFR1IHQnZXMgYmllbiBleHBsb3PDqSwgbMOgICFcIixcbiAgICAgICAgXCJUdSB0J2VzIGNyYXNow6kgZW4gYmVhdXTDqSAhXCIsXG4gICAgICAgIFwiVHUgYXMgYnJvdXTDqSBsZXMgbWFyZ3Vlcml0ZXMgIVwiLFxuICAgICAgICBcIkxhIGdyYXZpdMOpIHQnYSByYXR0cmFwcMOpICFcIixcbiAgICAgICAgXCJUJ2FzIGZhaXQgYm9ibyDDoCBtb24gdmFpc3NlYXUgIVwiLFxuICAgICAgICBcIk9oICEgw4dhIGRvaXQgZmFpcmUgbWFsIMOnYSAhXCIsXG4gICAgICAgIFwiVCdlcyBzxatyIGQnYXZvaXIgdG9uIHBlcm1pcyA/XCIsXG4gICAgICAgIFwiT24gdmEgZGlyZSBxdSdvbiBuJ2EgcmllbiB2dS4uLlwiLFxuICAgICAgICBcIkhleSAhIFR1IHNhaXMgY29tYmllbiDDp2EgY2/Fq3RlIHVuZSBzb3Vjb3VwZSA/XCIsXG4gICAgICAgIFwiVHUgYXMgcmF5w6kgbGEgcGVpbnR1cmUgbMOgICFcIixcbiAgICAgICAgXCJSYXBlbGxlLW1vaSBkZSBuZSBqYW1haXMgbW9udGVyIGF2ZWMgdG9pIGRhbnMgdW4gdmFpc3NlYXUuLi5cIixcbiAgICAgICAgXCJUdSBhcyBoZXVydMOpIGxlIHBsYW5jaGVyIGRlcyB2YWNoZXMgIVwiLFxuICAgICAgICBcIkJvdW0gISBEYW5zIHRhIGZhY2UgIVwiLFxuICAgICAgICBcIkFsb3JzIGMnZXN0IG1vbiBnYXJhZ2lzdGUgcXVpIHZhIMOqdHJlIGNvbnRlbnQuLi5cIixcbiAgICBdLFxuICAgIGludHJvMTogYENoZXIgQW5zZWxtLFxuVHUgdmllbnMgZCdhdm9pciA5IGFucyBldCB0dSBlcyDDoCBtaS1jaGVtaW4gZGUgbGEgbWFqb3JpdMOpLlxuICAgICAgICAgIFxuRHUgbW9pbnMuLi4gZCdhcHLDqHMgbGVzIGNyaXTDqHJlcyBUZXJyZXN0cmVzLmAsXG4gICAgaW50cm8yOiBgTWFpcyB0dSBkb2lzIHQnZW4gZG91dGVyIG1haW50ZW5hbnQgOlxudHUgbmUgdmllbnMgcGFzIHZyYWltZW50IGRlIGxhIFRlcnJlLi4uXG5cbkV0IGlsIGVzdCBncmFuZCB0ZW1wcyBxdWUgdHUgcmVudHJlcyBjaGV6IHRvaS5gLFxuICAgIGludHJvMzogYE9uIHQnYSBsYWlzc8OpIHVuZSBzb3Vjb3VwZSwgbWFpcyBlbGxlIG4nYSBwYXMgZW5jb3JlIGFzc2V6IGQnw6luZXJnaWUgcG91ciBmYWlyZSBsZSB2b3lhZ2Ugw6AgdHJhdmVycyBsYSBnYWxheGllLmAsXG4gICAgaW50cm80OiBgUG91ciBmYWlyZSBsZSBwbGVpbiwgY2xpcXVlIHN1ciBsJ8OpY3JhbiBvdSBhcHB1aWUgc3VyIGxhIGJhcnJlIGQnZXNwYWNlLlxuVW5lIGNlbnRhaW5lIGRlIGJvdmlucyBkZXZyYWl0IGZhaXJlIGwnYWZmYWlyZS5cblxuJDFgLFxuICAgIGhpZ2hzY29yZTogW1xuICAgICAgICBcIlJlY29yZCDDoCBiYXR0cmUgOiAkMS5cIixcbiAgICAgICAgXCJQcsOpY8OpZGVudCByZWNvcmQgOiAkMVwiLFxuICAgICAgICBcIlBvdXJyYXMtdHUgYmF0dHJlICQxID9cIixcbiAgICAgICAgXCJUdSBhcyBkw6lqw6AgcsOpdXNzaSAkMS5cIixcbiAgICAgICAgXCJNZWlsbGV1ciBzY29yZSA6ICQxLlwiLFxuICAgIF0sXG4gICAgc2NvcmU6IFwiJDEgJDJcIixcbiAgICBzY29yZUNvdzogW1xuICAgICAgICBcInZhY2hlXCIsXG4gICAgICAgIFwidmFjaGVcIixcbiAgICAgICAgXCJ2YWNoZVwiLFxuICAgICAgICBcInZhY2hlXCIsXG4gICAgICAgIFwiYmVzdGlvbGVcIixcbiAgICAgICAgXCJsYWl0acOocmVcIixcbiAgICAgICAgXCJtZXVoLW1ldWhcIixcbiAgICAgICAgXCJNYXJndWVyaXRlXCIsXG4gICAgICAgIFwiYsOqdGVcIixcbiAgICBdLFxuICAgIHNjb3JlRWF0OiBbXG4gICAgICAgIFwiYWJzb3Jiw6llXCIsXG4gICAgICAgIFwiYXNwaXLDqWVcIixcbiAgICAgICAgXCJhdHRyYXDDqWVcIixcbiAgICAgICAgXCJhdmFsw6llXCIsXG4gICAgICAgIFwiY2FwdHVyw6llXCIsXG4gICAgICAgIFwiZMOpY2hpcXVldMOpZVwiLFxuICAgICAgICBcImTDqXBlY8OpZVwiLFxuICAgICAgICBcImTDqXNpbnTDqWdyw6llXCIsXG4gICAgICAgIFwiZGlnw6lyw6llXCIsXG4gICAgICAgIFwiw6ljb3JjaMOpZVwiLFxuICAgICAgICBcImVtcHJpc29ubsOpZVwiLFxuICAgICAgICBcImVuZ2xvdXRpZVwiLFxuICAgICAgICBcImxpcXVpZMOpZVwiLFxuICAgICAgICBcIm1hbmfDqWVcIixcbiAgICAgICAgXCJwdWx2w6lyaXPDqWVcIixcbiAgICBdLFxuICAgIHNlZVlvdTogXCLDgCB0csOocyBiaWVudMO0dCBBTlNFTE0gISEhXCIsXG59IHNhdGlzZmllcyBUcmFuc2xhdGlvblxuXG5leHBvcnQgZGVmYXVsdCBGUlxuIiwiaW1wb3J0IHsgdXNlVGFuc2xhdG9yR2VuZXJpYyB9IGZyb20gXCJAL2xhbmdcIlxuaW1wb3J0IEZSIGZyb20gXCIuL2ZyXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYW5zbGF0b3IoKSB7XG4gICAgcmV0dXJuIHVzZVRhbnNsYXRvckdlbmVyaWMoRlIsIHtcbiAgICAgICAgZW46ICgpID0+IGltcG9ydChcIi4vZW5cIiksXG4gICAgICAgIGFsaWVuOiAoKSA9PiBpbXBvcnQoXCIuL2FsaWVuXCIpLFxuICAgIH0pXG59XG4iLCJleHBvcnQgY2xhc3MgSW50ZW50aW9uIHtcbiAgICBwcml2YXRlIGludGVudFJpZ2h0ID0gMFxuICAgIHByaXZhdGUgaW50ZW50TGVmdCA9IDBcbiAgICBwcml2YXRlIGludGVudFN1YmR1Y3Rpb24gPSAwXG5cbiAgICBhdHRhY2goKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlS2V5RG93bilcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuaGFuZGxlS2V5VXApXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5oYW5kbGVDb250ZXh0TWVudSlcbiAgICB9XG5cbiAgICBkZXRhY2goKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlS2V5RG93bilcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuaGFuZGxlS2V5VXApXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLmhhbmRsZVBvaW50ZXJVcClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5oYW5kbGVDb250ZXh0TWVudSlcbiAgICB9XG5cbiAgICB3YW50c1RvR29SaWdodCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlIC8vIHRoaXMuaW50ZW50UmlnaHQgPiAwXG4gICAgfVxuXG4gICAgd2FudHNUb0dvTGVmdCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlIC8vIHRoaXMuaW50ZW50TGVmdCA+IDBcbiAgICB9XG5cbiAgICB3YW50c1RvU3ViZHVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlbnRTdWJkdWN0aW9uID4gMFxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlckRvd24gPSAoZXZ0OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIHRoaXMuaW50ZW50U3ViZHVjdGlvbiA9IDFcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJVcCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5pbnRlbnRTdWJkdWN0aW9uID0gMFxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlQ29udGV4dE1lbnUgPSAoZXZ0OiBFdmVudCkgPT4ge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZUtleURvd24gPSAoZXZ0OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBEYXRlLm5vdygpXG4gICAgICAgIHN3aXRjaCAoZXZ0LmtleSkge1xuICAgICAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmludGVudFN1YmR1Y3Rpb24gPSB0aW1lXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlbnRSaWdodCA9IHRpbWVcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZW50TGVmdCA9IHRpbWVcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVLZXlVcCA9IChldnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldnQua2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZW50U3ViZHVjdGlvbiA9IDBcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmludGVudFJpZ2h0ID0gMFxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlbnRMZWZ0ID0gMFxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKipcbiAqIEFsbCBzY3JlZW5zIGFyZSBkaWZmZXJlbnQsIGJ1dCB3ZSB3YW50IHRvIHVzZSBhIHN5c3RlbSBvZiBjb29yZGluYXRlcyB0aGF0XG4gKiBtYWtlcyB1cyBiZWxpZXZlIHdlIGFyZSB1c2luZyBhIDE5MjB4MTA4MCB2aWV3cG9ydC5cbiAqIFRoaXMgY2xhc3Mgd2lsbCBkbyB0aGUgY29udmVydGlvbiBpbnRvIHRoZSBhY3R1YWwgY29vcmRpbmF0ZXMgaW4gcGl4ZWxzLlxuICogVGhlIHZpZXdwb3J0IGlzIHN1cHBvc2VkIHRvIGJlIGNvbnRhaW5lZCBpbnNpZGUgb2YgdGhlIGFjdHVhbCB2aWV3LFxuICogYW5kIHRoZSB2aWV3IGlzIGFsd2F5cyBpbiBsYW5kc2NhcGUgb3JpZW50YXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb29yZHMge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsXG4gICAgcHJpdmF0ZSByZWFkb25seSB0cmFuc2Zvcm06IHtcbiAgICAgICAgeDogbnVtYmVyXG4gICAgICAgIHk6IG51bWJlclxuICAgICAgICBzY2FsZTogbnVtYmVyXG4gICAgfSA9IHsgeDogMCwgeTogMCwgc2NhbGU6IDEgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBsb2dpY2FsV2lkdGggPSAxOTIwLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbG9naWNhbEhlaWdodCA9IDEwODBcbiAgICApIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcih0aGlzLmhhbmRsZVJlc2l6ZSlcbiAgICB9XG5cbiAgICB4KGxvZ2ljYWxYOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgeCB9ID0gdGhpcy50cmFuc2Zvcm1cbiAgICAgICAgcmV0dXJuIGxvZ2ljYWxYICogc2NhbGUgKyB4XG4gICAgfVxuXG4gICAgeShsb2dpY2FsWTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIHkgfSA9IHRoaXMudHJhbnNmb3JtXG4gICAgICAgIHJldHVybiBsb2dpY2FsWSAqIHNjYWxlICsgeVxuICAgIH1cblxuICAgIHdpZHRoKGxvZ2ljYWxXaWR0aDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBsb2dpY2FsV2lkdGggKiB0aGlzLnRyYW5zZm9ybS5zY2FsZVxuICAgIH1cblxuICAgIGhpZ2h0KGxvZ2ljYWxIZWlnaHQ6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gbG9naWNhbEhlaWdodCAqIHRoaXMudHJhbnNmb3JtLnNjYWxlXG4gICAgfVxuXG4gICAgYXR0YWNoKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZGV0YWNoKClcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoZWxlbWVudClcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUoKVxuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUodGhpcy5lbGVtZW50KVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCB9ID0gdGhpc1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgocmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWluKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KVxuICAgICAgICBjb25zdCBzY2FsZVcgPSB3aWR0aCAvIHRoaXMubG9naWNhbFdpZHRoXG4gICAgICAgIGNvbnN0IHNjYWxlSCA9IGhlaWdodCAvIHRoaXMubG9naWNhbEhlaWdodFxuICAgICAgICBjb25zdCBzY2FsZSA9IE1hdGgubWluKHNjYWxlVywgc2NhbGVIKVxuICAgICAgICB0aGlzLnRyYW5zZm9ybS54ID0gKHdpZHRoIC0gdGhpcy5sb2dpY2FsV2lkdGggKiBzY2FsZSkgLyAyXG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnkgPSAoaGVpZ2h0IC0gdGhpcy5sb2dpY2FsSGVpZ2h0ICogc2NhbGUpIC8gMlxuICAgICAgICB0aGlzLnRyYW5zZm9ybS5zY2FsZSA9IHNjYWxlXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29vcmRzIH0gZnJvbSBcIi4uLy4uLy4uL2Nvb3Jkc1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3ByaXRlU3RhdHVzIHtcbiAgICB4OiBudW1iZXJcbiAgICB5OiBudW1iZXJcbiAgICB3aWR0aDogbnVtYmVyXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgICByb3RhdGlvbjogbnVtYmVyXG4gICAgc2NhbGVYOiBudW1iZXJcbiAgICBzY2FsZVk6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgU3ByaXRlIHtcbiAgICBwcml2YXRlIHN0YXR1czogU3ByaXRlU3RhdHVzID0ge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3aWR0aDogMTI4LFxuICAgICAgICBoZWlnaHQ6IDEyOCxcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIHNjYWxlWDogMSxcbiAgICAgICAgc2NhbGVZOiAxLFxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvb3JkczogQ29vcmRzLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRJZDogc3RyaW5nXG4gICAgKSB7fVxuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cy54XG4gICAgfVxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMueVxuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cy53aWR0aFxuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMuaGVpZ2h0XG4gICAgfVxuICAgIGdldCByb3RhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzLnJvdGF0aW9uXG4gICAgfVxuXG4gICAgdXBkYXRlKGRhdGE6IFBhcnRpYWw8U3ByaXRlU3RhdHVzPik6IGJvb2xlYW4ge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdHVzLFxuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGVsZW1lbnQsIGNvb3Jkcywgc3RhdHVzIH0gPSB0aGlzXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgY29uc3QgeCA9IGNvb3Jkcy54KHN0YXR1cy54KVxuICAgICAgICBjb25zdCB5ID0gY29vcmRzLnkoc3RhdHVzLnkpXG4gICAgICAgIGNvbnN0IHdpZHRoID0gY29vcmRzLndpZHRoKHN0YXR1cy53aWR0aCkgKiBzdGF0dXMuc2NhbGVYXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGNvb3Jkcy53aWR0aChzdGF0dXMuaGVpZ2h0KSAqIHN0YXR1cy5zY2FsZVlcbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7eCAtIHdpZHRoIC8gMn1weGBcbiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBgJHt5IC0gaGVpZ2h0IC8gMn1weGBcbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YFxuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGBcbiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7c3RhdHVzLnJvdGF0aW9ufWRlZylgXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudElkKVxuICAgICAgICBpZiAoIWVsZW1lbnQpIGNvbnNvbGUuZXJyb3IoXCJObyBlbGVtZW50IHdpdGggdGhpcyBpZDpcIiwgdGhpcy5lbGVtZW50SWQpXG4gICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikge1xuICAgIGlmICh2YWx1ZSA8IG1pbikgcmV0dXJuIG1pblxuICAgIGlmICh2YWx1ZSA+IG1heCkgcmV0dXJuIG1heFxuICAgIHJldHVybiB2YWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVnMnJhZChkZWc6IG51bWJlcikge1xuICAgIHJldHVybiAoZGVnICogTWF0aC5QSSkgLyAxODBcbn0iLCJpbXBvcnQgeyBjbGFtcCB9IGZyb20gXCJAL3V0aWxzL2NhbGNcIlxuXG5jb25zdCBNQVhfRU5FUkdZID0gMWU0XG5cbmV4cG9ydCBjbGFzcyBFbmVyZ3lCYXIge1xuICAgIHByaXZhdGUgX3ZhbHVlID0gTUFYX0VORVJHWVxuXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRWYWx1ZSA9IGNsYW1wKHZhbHVlLCAwLCBNQVhfRU5FUkdZKVxuICAgICAgICBpZiAoY2xhbXBlZFZhbHVlID09PSB0aGlzLl92YWx1ZSkgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSBjbGFtcGVkVmFsdWVcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlbmVyZ3ktbGV2ZWxcIilcbiAgICAgICAgaWYgKCFkaXYpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSAoMTAwICogY2xhbXBlZFZhbHVlKSAvIE1BWF9FTkVSR1lcbiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gYCR7cGVyY2VudH0lYFxuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IDBcbiAgICAgICAgdGhpcy52YWx1ZSA9IE1BWF9FTkVSR1lcbiAgICB9XG5cbiAgICBhZGQoZGVsdGE6IG51bWJlcikge1xuICAgICAgICB0aGlzLnZhbHVlICs9IGRlbHRhXG4gICAgfVxuXG4gICAgc3ViKGRlbHRhOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSAtPSBkZWx0YVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvb3JkcyB9IGZyb20gXCJAL2Nvb3Jkc1wiXG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tIFwiLi9zcHJpdGVcIlxuaW1wb3J0IHsgZGVnMnJhZCB9IGZyb20gXCJAL3V0aWxzL2NhbGNcIlxuXG5leHBvcnQgY2xhc3MgQ293IHtcbiAgICBwcml2YXRlIHRpbWUwID0gMFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3ByaXRlOiBTcHJpdGVcblxuICAgIGNvbnN0cnVjdG9yKGNvb3JkczogQ29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHNwcml0ZSA9IG5ldyBTcHJpdGUoY29vcmRzLCBcInNwcml0ZS1jb3dcIilcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBzcHJpdGVcbiAgICAgICAgc3ByaXRlLnVwZGF0ZSh7XG4gICAgICAgICAgICB4OiAtMTkyMCAvIDIsXG4gICAgICAgICAgICB5OiAoMiAqIDEwODApIC8gMyxcbiAgICAgICAgICAgIHdpZHRoOiAyNTYsXG4gICAgICAgICAgICBoZWlnaHQ6IDEyOCxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlLnhcbiAgICB9XG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZS55XG4gICAgfVxuXG4gICAgcmVzZXQoc3RhcnRpbmdUaW1lOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50aW1lMCA9IHN0YXJ0aW5nVGltZVxuICAgICAgICB0aGlzLnNwcml0ZS51cGRhdGUoeyBzY2FsZVg6IDEsIHNjYWxlWTogMSB9KVxuICAgIH1cblxuICAgIHByb2Nlc3ModGltZTogbnVtYmVyLCBkZWxheTogbnVtYmVyKSB7XG4gICAgICAgIHRpbWUgLT0gdGhpcy50aW1lMFxuICAgICAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpc1xuICAgICAgICBjb25zdCBXID0gMTkyMFxuICAgICAgICBjb25zdCBsYXBzZSA9IDQwMDBcbiAgICAgICAgY29uc3QgdCA9ICh0aW1lICUgbGFwc2UpIC8gbGFwc2VcbiAgICAgICAgY29uc3QgeCA9IDIgKiBXICogdCAtIFdcbiAgICAgICAgY29uc3QgYW5nID0gdGltZSAqIDAuMDA1XG4gICAgICAgIGNvbnN0IHkgPVxuICAgICAgICAgICAgKDIgKiAxMDgwKSAvIDMgLVxuICAgICAgICAgICAgMiAqIChzcHJpdGUuaGVpZ2h0ICogTWF0aC5hYnMoTWF0aC5zaW4oYW5nKSkgLSBzcHJpdGUuaGVpZ2h0KVxuICAgICAgICBjb25zdCByb3RhdGlvbiA9IE1hdGguY29zKGFuZyAqIDIpICogMzBcbiAgICAgICAgc3ByaXRlLnVwZGF0ZSh7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN1YmR1ZSh4OiBudW1iZXIsIHk6IG51bWJlciwgdDogbnVtYmVyLCBkOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSAxIC0gdCAqIDAuOVxuICAgICAgICB0aGlzLnNwcml0ZS51cGRhdGUoe1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICByb3RhdGlvbjogdGhpcy5zcHJpdGUucm90YXRpb24gKyBkICogMC41LFxuICAgICAgICAgICAgc2NhbGVYOiBzY2FsZSxcbiAgICAgICAgICAgIHNjYWxlWTogc2NhbGUsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaGl0KHhTaGlwOiBudW1iZXIsIHlTaGlwOiBudW1iZXIsIHJvdGF0aW9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgeENvdyA9IHNwcml0ZS54XG4gICAgICAgIGNvbnN0IHlDb3cgPSBzcHJpdGUueVxuICAgICAgICBjb25zdCBhbmcgPSBkZWcycmFkKHJvdGF0aW9uKVxuICAgICAgICBjb25zdCB2eCA9IC1NYXRoLnNpbihhbmcpXG4gICAgICAgIGNvbnN0IHZ5ID0gTWF0aC5jb3MoYW5nKVxuICAgICAgICBjb25zdCBBTXggPSB4Q293IC0geFNoaXBcbiAgICAgICAgY29uc3QgQU15ID0geUNvdyAtIHlTaGlwXG4gICAgICAgIGNvbnN0IGRpc3QgPSBNYXRoLmFicyhBTXggKiB2eSAtIEFNeSAqIHZ4KVxuICAgICAgICByZXR1cm4gZGlzdCA8IHNwcml0ZS5oZWlnaHQgKiAwLjJcbiAgICB9XG59XG4iLCJpbXBvcnQgU3BhY2VzaGlwRmFsbFVSTCBmcm9tIFwiQC9nZngvc291bmQvc3BhY2VzaGlwLWZhbGwubXAzXCJcbmltcG9ydCBDb3cxVVJMIGZyb20gXCJAL2dmeC9zb3VuZC9jb3ctMS5tcDNcIlxuaW1wb3J0IENvdzJVUkwgZnJvbSBcIkAvZ2Z4L3NvdW5kL2Nvdy0yLm1wM1wiXG5pbXBvcnQgQ293M1VSTCBmcm9tIFwiQC9nZngvc291bmQvY293LTMubXAzXCJcbmltcG9ydCBDb3c0VVJMIGZyb20gXCJAL2dmeC9zb3VuZC9jb3ctNC5tcDNcIlxuaW1wb3J0IENvdzVVUkwgZnJvbSBcIkAvZ2Z4L3NvdW5kL2Nvdy01Lm1wM1wiXG5pbXBvcnQgQ293NlVSTCBmcm9tIFwiQC9nZngvc291bmQvY293LTYubXAzXCJcbmltcG9ydCBDb3c3VVJMIGZyb20gXCJAL2dmeC9zb3VuZC9jb3ctNy5tcDNcIlxuaW1wb3J0IENvdzhVUkwgZnJvbSBcIkAvZ2Z4L3NvdW5kL2Nvdy04Lm1wM1wiXG5pbXBvcnQgUmF5VVJMIGZyb20gXCJAL2dmeC9zb3VuZC9yYXkubXAzXCJcblxuaW1wb3J0IHsgcGljayB9IGZyb20gXCJAL3V0aWxzL2FycmF5XCJcblxuZXhwb3J0IGNsYXNzIFNvdW5kTWFuYWdlciB7XG4gICAgcmVhZG9ubHkgc3BhY2VzaGlwRmFsbCA9IGxvYWQoU3BhY2VzaGlwRmFsbFVSTClcbiAgICByZWFkb25seSByYXkgPSBsb2FkKFJheVVSTClcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgY293cyA9IFtcbiAgICAgICAgbG9hZChDb3cxVVJMKSxcbiAgICAgICAgbG9hZChDb3cyVVJMKSxcbiAgICAgICAgbG9hZChDb3czVVJMKSxcbiAgICAgICAgbG9hZChDb3c0VVJMKSxcbiAgICAgICAgbG9hZChDb3c1VVJMKSxcbiAgICAgICAgbG9hZChDb3c2VVJMKSxcbiAgICAgICAgbG9hZChDb3c3VVJMKSxcbiAgICAgICAgbG9hZChDb3c4VVJMKSxcbiAgICBdXG5cbiAgICBnZXQgY293KCkge1xuICAgICAgICByZXR1cm4gcGljayh0aGlzLmNvd3MpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2FkKHVybDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBTb3VuZCh1cmwpXG59XG5cbmNsYXNzIFNvdW5kIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1ZGlvOiBIVE1MQXVkaW9FbGVtZW50XG5cbiAgICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLmF1ZGlvID0gbmV3IEF1ZGlvKHVybClcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1ZGlvLmN1cnJlbnRUaW1lXG4gICAgfVxuICAgIHNldCBjdXJyZW50VGltZSh0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5hdWRpby5jdXJyZW50VGltZSA9IHRcbiAgICB9XG5cbiAgICBwbGF5KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hdWRpby5wbGF5KClcbiAgICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnBhdXNlKClcbiAgICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU291bmRNYW5hZ2VyIH0gZnJvbSBcIi4vc291bmRcIlxuaW1wb3J0IHsgSW50ZW50aW9uIH0gZnJvbSBcIi4vaW50ZW50aW9uXCJcblxuZXhwb3J0IGNsYXNzIFJheU1hbmFnZXIge1xuICAgIHByaXZhdGUgcmF5QWN0aXZlID0gZmFsc2VcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGludGVudGlvbjogSW50ZW50aW9uLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNvdW5kOiBTb3VuZE1hbmFnZXJcbiAgICApIHt9XG5cbiAgICBwcm9jZXNzKCkge1xuICAgICAgICBjb25zdCB7IHJheSB9ID0gdGhpcy5zb3VuZFxuICAgICAgICBjb25zdCBzdWJkdWUgPSB0aGlzLmludGVudGlvbi53YW50c1RvU3ViZHVlKClcbiAgICAgICAgaWYgKHN1YmR1ZSAmJiAhdGhpcy5yYXlBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmF5QWN0aXZlID0gdHJ1ZVxuICAgICAgICAgICAgcmF5LmN1cnJlbnRUaW1lID0gMFxuICAgICAgICAgICAgcmF5LnBsYXkoKVxuICAgICAgICB9IGVsc2UgaWYgKCFzdWJkdWUgJiYgdGhpcy5yYXlBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmF5QWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgIHJheS5wYXVzZSgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLnNvdW5kLnJheS5wYXVzZSgpXG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCB7IEludGVudGlvbiB9IGZyb20gXCIuL2ludGVudGlvblwiXG5pbXBvcnQgeyBDb29yZHMgfSBmcm9tIFwiQC9jb29yZHNcIlxuaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSBcIkAvZ2FtZS8wMS9lbmdpbmUvc3ByaXRlXCJcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIkAvdXRpbHMvY2FsY1wiXG5pbXBvcnQgeyBFbmVyZ3lCYXIgfSBmcm9tIFwiLi9lbmVyZ3ktYmFyXCJcbmltcG9ydCB7IGdvdG8gfSBmcm9tIFwiQC9hcHBcIlxuaW1wb3J0IHsgQ293IH0gZnJvbSBcIi4vY293XCJcbmltcG9ydCB7IFNvdW5kTWFuYWdlciB9IGZyb20gXCIuL3NvdW5kXCJcbmltcG9ydCB7IFJheU1hbmFnZXIgfSBmcm9tIFwiLi9yYXlcIlxuaW1wb3J0IHsgVHJhbnNsYXRvcjAxIH0gZnJvbSBcIkAvYXBwLzAxL190cmFuc2xhdGlvbi90eXBlXCJcblxuZXhwb3J0IGNsYXNzIEVuZ2luZSB7XG4gICAgcHVibGljIHN0YXRpYyB1c2UodHI6IFRyYW5zbGF0b3IwMSk6IEVuZ2luZSB7XG4gICAgICAgIGNvbnN0IHJlZkVuZ2luZSA9IFJlYWN0LnVzZVJlZjxFbmdpbmUgfCBudWxsPihudWxsKVxuICAgICAgICBpZiAoIXJlZkVuZ2luZS5jdXJyZW50KSByZWZFbmdpbmUuY3VycmVudCA9IG5ldyBFbmdpbmUodHIpXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbmdpbmUgPSByZWZFbmdpbmUuY3VycmVudFxuICAgICAgICAgICAgaWYgKCFlbmdpbmUpIHJldHVyblxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1PVU5UXCIpXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVU5NT1VOVFwiKVxuICAgICAgICAgICAgICAgIGVuZ2luZS5kZXRhY2goKVxuICAgICAgICAgICAgICAgIHJlZkVuZ2luZS5jdXJyZW50ID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgcmV0dXJuIHJlZkVuZ2luZS5jdXJyZW50XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0cjogVHJhbnNsYXRvcjAxXG4gICAgcHJpdmF0ZSByZWFkb25seSByYXk6IFJheU1hbmFnZXJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNvdW5kID0gbmV3IFNvdW5kTWFuYWdlcigpXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbnRlbnRpb24gPSBuZXcgSW50ZW50aW9uKClcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvb3JkczogQ29vcmRzXG4gICAgcHJpdmF0ZSByZWFkb25seSBzcGFjZXNoaXA6IFNwcml0ZVxuICAgIHByaXZhdGUgcmVhZG9ubHkgY293OiBDb3dcbiAgICBwcml2YXRlIG1vZGU6IFwicnVuXCIgfCBcImRpZVwiIHwgXCJlYXRcIiA9IFwicnVuXCJcbiAgICBwcml2YXRlIHBhdXNlQWNjdW11bGF0b3IgPSAwXG4gICAgcHJpdmF0ZSBlbmVyZ3kgPSBuZXcgRW5lcmd5QmFyKClcbiAgICBwcml2YXRlIHRpbWUgPSAwXG4gICAgcHJpdmF0ZSBsYXNlciA9IDBcbiAgICBwcml2YXRlIGRpZVRpbWUgPSAwXG4gICAgcHJpdmF0ZSBkaWVZID0gMFxuICAgIHByaXZhdGUgZWF0WDAgPSAwXG4gICAgcHJpdmF0ZSBlYXRZMCA9IDBcbiAgICBwcml2YXRlIGVhdFgxID0gMFxuICAgIHByaXZhdGUgZWF0WTEgPSAwXG4gICAgcHJpdmF0ZSBlYXRUaW1lID0gMFxuICAgIHByaXZhdGUgYW5pbWF0aW9uRnJhbWUgPSAwXG4gICAgcHJpdmF0ZSBfc2NvcmUgPSAwXG5cbiAgICBjb25zdHJ1Y3Rvcih0cjogVHJhbnNsYXRvcjAxKSB7XG4gICAgICAgIHRoaXMudHIgPSB0clxuICAgICAgICBjb25zdCBjb29yZHMgPSBuZXcgQ29vcmRzKClcbiAgICAgICAgdGhpcy5jb3cgPSBuZXcgQ293KGNvb3JkcylcbiAgICAgICAgdGhpcy5jb29yZHMgPSBjb29yZHNcbiAgICAgICAgdGhpcy5zcGFjZXNoaXAgPSBuZXcgU3ByaXRlKGNvb3JkcywgXCJzcHJpdGUtc3BhY2VzaGlwXCIpXG4gICAgICAgIHRoaXMuc3BhY2VzaGlwLnVwZGF0ZSh7XG4gICAgICAgICAgICB4OiAxOTIwIC8gMixcbiAgICAgICAgICAgIHk6IDEwODAgLyAzLFxuICAgICAgICAgICAgd2lkdGg6IDUxMixcbiAgICAgICAgICAgIGhlaWdodDogMjU2LFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnJheSA9IG5ldyBSYXlNYW5hZ2VyKHRoaXMuaW50ZW50aW9uLCB0aGlzLnNvdW5kKVxuICAgIH1cblxuICAgIHVwZGF0ZVRyYW5zbGF0b3IodHI6IFRyYW5zbGF0b3IwMSkge1xuICAgICAgICB0aGlzLnRyID0gdHJcbiAgICB9XG5cbiAgICBnZXQgc2NvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY29yZVxuICAgIH1cbiAgICBzZXQgc2NvcmUodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9zY29yZSA9IHZhbHVlXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2NvcmVcIilcbiAgICAgICAgY29uc3QgcyA9IHZhbHVlID4gMSA/IFwic1wiIDogXCJcIlxuICAgICAgICBpZiAoZGl2KSB7XG4gICAgICAgICAgICBjb25zdCB7IHRyIH0gPSB0aGlzXG4gICAgICAgICAgICBkaXYudGV4dENvbnRlbnQgPSBgJHt0ci5zY29yZShcbiAgICAgICAgICAgICAgICBgJHt0ci5zY29yZUNvdygpfSR7c31gLFxuICAgICAgICAgICAgICAgIGAke3RyLnNjb3JlRWF0KCl9JHtzfWBcbiAgICAgICAgICAgICl9ICR7dmFsdWV9YFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhZG9ubHkgYXR0YWNoID0gKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgdGhpcy5pbnRlbnRpb24uYXR0YWNoKClcbiAgICAgICAgdGhpcy5jb29yZHMuYXR0YWNoKGNvbnRhaW5lcilcbiAgICAgICAgdGhpcy5zY2hlZHVsZU5leHRGcmFtZSgpXG4gICAgICAgIHRoaXMuZW5lcmd5LnJlc2V0KClcbiAgICAgICAgdGhpcy5zY29yZSA9IDBcbiAgICB9XG5cbiAgICBkZXRhY2goKSB7XG4gICAgICAgIHRoaXMuaW50ZW50aW9uLmRldGFjaCgpXG4gICAgICAgIHRoaXMuY29vcmRzLmRldGFjaCgpXG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lKVxuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gMFxuICAgIH1cblxuICAgIHNldExhc2VyT3BhY2l0eShvcGFjaXR5OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKG9wYWNpdHkgPT09IHRoaXMubGFzZXIpIHJldHVyblxuXG4gICAgICAgIHRoaXMubGFzZXIgPSBvcGFjaXR5XG4gICAgICAgIGNvbnN0IGxhc2VyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcHJpdGUtc3BhY2VzaGlwLWxhc2VyXCIpXG4gICAgICAgIGlmICghbGFzZXIpIHJldHVyblxuXG4gICAgICAgIGxhc2VyLnN0eWxlLm9wYWNpdHkgPSBgJHtvcGFjaXR5fWBcbiAgICB9XG5cbiAgICBwcml2YXRlIHNjaGVkdWxlTmV4dEZyYW1lKCkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZSlcbiAgICAgICAgdGhpcy5hbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5uZXh0RnJhbWUpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZXh0RnJhbWUgPSAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVOZXh0RnJhbWUoKVxuICAgICAgICBsZXQgZGVsYXkgPSAwXG4gICAgICAgIGlmICh0aGlzLnRpbWUgPiAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IHRpbWUgLSB0aGlzLnRpbWVcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lXG4gICAgICAgIHRpbWUgLT0gdGhpcy5wYXVzZUFjY3VtdWxhdG9yXG5cbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJydW5cIjpcbiAgICAgICAgICAgICAgICB0aGlzLmRvUnVuKHRpbWUsIGRlbGF5KVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiZGllXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5kb0RpZSh0aW1lLCBkZWxheSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcImVhdFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuZG9FYXQodGltZSwgZGVsYXkpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZG9SdW4odGltZTogbnVtYmVyLCBkZWxheTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgaW50ZW50aW9uLCBzcGFjZXNoaXAsIGNvdyB9ID0gdGhpc1xuXG4gICAgICAgIGNvdy5wcm9jZXNzKHRpbWUsIGRlbGF5KVxuICAgICAgICB0aGlzLnJheS5wcm9jZXNzKClcblxuICAgICAgICBjb25zdCBhbmdsZSA9IDQwICogTWF0aC5zaW4odGltZSAqIDJlLTMpXG4gICAgICAgIGxldCB4ID0gc3BhY2VzaGlwLnhcbiAgICAgICAgY29uc3Qgc3BlZWQgPSAzXG4gICAgICAgIGlmIChpbnRlbnRpb24ud2FudHNUb0dvUmlnaHQoKSkgeCArPSBkZWxheSAqIHNwZWVkXG4gICAgICAgIGlmIChpbnRlbnRpb24ud2FudHNUb0dvTGVmdCgpKSB4IC09IGRlbGF5ICogc3BlZWRcbiAgICAgICAgeCA9XG4gICAgICAgICAgICAxOTIwIC8gMiArXG4gICAgICAgICAgICAoTWF0aC5jb3ModGltZSAqICgxLjYzM2UtMyArIHRpbWUgKiAyZS05KSkgK1xuICAgICAgICAgICAgICAgIE1hdGguc2luKHRpbWUgKiAyLjkwNGUtMykpICpcbiAgICAgICAgICAgICAgICAyNTBcbiAgICAgICAgdGhpcy5zZXRMYXNlck9wYWNpdHkoaW50ZW50aW9uLndhbnRzVG9TdWJkdWUoKSA/IDEgOiAwKVxuICAgICAgICBzcGFjZXNoaXAudXBkYXRlKHtcbiAgICAgICAgICAgIHg6IGNsYW1wKHgsIDMwMCwgMTYyMCksXG4gICAgICAgICAgICByb3RhdGlvbjogYW5nbGUsXG4gICAgICAgIH0pXG4gICAgICAgIGxldCBlbmVyZ3lMb3NzID0gZGVsYXkgKiAwLjRcbiAgICAgICAgaWYgKGludGVudGlvbi53YW50c1RvR29MZWZ0KCkgfHwgaW50ZW50aW9uLndhbnRzVG9Hb1JpZ2h0KCkpXG4gICAgICAgICAgICBlbmVyZ3lMb3NzICo9IDJcbiAgICAgICAgaWYgKGludGVudGlvbi53YW50c1RvU3ViZHVlKCkpIHtcbiAgICAgICAgICAgIGVuZXJneUxvc3MgKj0gMTBcbiAgICAgICAgICAgIGlmIChjb3cuaGl0KHNwYWNlc2hpcC54LCBzcGFjZXNoaXAueSwgc3BhY2VzaGlwLnJvdGF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc291bmQuY293LnBsYXkoKVxuICAgICAgICAgICAgICAgIHRoaXMubW9kZSA9IFwiZWF0XCJcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFgwID0gY293LnhcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFkwID0gY293LnlcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFgxID0gc3BhY2VzaGlwLnhcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFkxID0gc3BhY2VzaGlwLnlcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFRpbWUgPSB0aW1lXG4gICAgICAgICAgICAgICAgdGhpcy5zY29yZSsrXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmVyZ3kuc3ViKGVuZXJneUxvc3MpXG4gICAgICAgIGlmICh0aGlzLmVuZXJneS52YWx1ZSA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNvdW5kLnNwYWNlc2hpcEZhbGwucGxheSgpXG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBcImRpZVwiXG4gICAgICAgICAgICB0aGlzLmRpZVRpbWUgPSB0aW1lXG4gICAgICAgICAgICB0aGlzLmRpZVkgPSBzcGFjZXNoaXAueVxuICAgICAgICAgICAgdGhpcy5zZXRMYXNlck9wYWNpdHkoMClcbiAgICAgICAgICAgIHRoaXMucmF5LnN0b3AoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkb0RpZSh0aW1lOiBudW1iZXIsIGRlbGF5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBzcGFjZXNoaXAgfSA9IHRoaXNcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBzcGFjZXNoaXAucm90YXRpb24gKyBkZWxheSAqIDAuNVxuICAgICAgICBjb25zdCB0ID0gdGltZSAtIHRoaXMuZGllVGltZSAtIDIwMFxuICAgICAgICBjb25zdCB5ID0gdGhpcy5kaWVZICsgKCh0ICogdCAtIDQwMDAwKSAqIDIwMCkgLyA0MDAwMFxuICAgICAgICBzcGFjZXNoaXAudXBkYXRlKHsgcm90YXRpb24sIHkgfSlcbiAgICAgICAgaWYgKHRpbWUgLSB0aGlzLmRpZVRpbWUgPiAxMDAwKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInNjb3JlXCIsIGAke3RoaXMuc2NvcmV9YClcbiAgICAgICAgICAgIGdvdG8oXCIvMDEvZGVhZFwiKVxuICAgICAgICAgICAgdGhpcy5kZXRhY2goKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY293LnByb2Nlc3ModGltZSwgZGVsYXkpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkb0VhdCh0aW1lOiBudW1iZXIsIGRlbGF5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgdCA9IE1hdGgubWluKDEsICh0aW1lIC0gdGhpcy5lYXRUaW1lKSAvIDEwMDApXG4gICAgICAgIGNvbnN0IHggPSAodGhpcy5lYXRYMSAtIHRoaXMuZWF0WDApICogdCArIHRoaXMuZWF0WDBcbiAgICAgICAgY29uc3QgeSA9ICh0aGlzLmVhdFkxIC0gdGhpcy5lYXRZMCkgKiB0ICsgdGhpcy5lYXRZMFxuICAgICAgICB0aGlzLmNvdy5zdWJkdWUoeCwgeSwgdCwgZGVsYXkpXG4gICAgICAgIGlmICh0ID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBcInJ1blwiXG4gICAgICAgICAgICB0aGlzLnBhdXNlQWNjdW11bGF0b3IgKz0gdGltZSAtIHRoaXMuZWF0VGltZVxuICAgICAgICAgICAgdGhpcy5jb3cucmVzZXQodGltZSlcbiAgICAgICAgICAgIHRoaXMuZW5lcmd5LmFkZCgyZTMpXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL1ZpZXdTcHJpdGUubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL1ZpZXdTcHJpdGUubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL1ZpZXdTcHJpdGUubW9kdWxlLmNzc1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld1Nwcml0ZVByb3BzIHtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgICBpZDogc3RyaW5nXG4gICAgdXJsOiBzdHJpbmdcbiAgICB6SW5kZXg6IG51bWJlclxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWaWV3U3ByaXRlKHtcbiAgICBjbGFzc05hbWUsXG4gICAgaWQsXG4gICAgdXJsLFxuICAgIHpJbmRleCxcbn06IFZpZXdTcHJpdGVQcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17am9pbihjbGFzc05hbWUsIHN0eWxlcy5zcHJpdGUpfVxuICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBcIi0tY3VzdG9tLXVybFwiOiBgdXJsKCR7dXJsfSlgLFxuICAgICAgICAgICAgICAgIFwiLS1jdXN0b20tei1pbmRleFwiOiB6SW5kZXgsXG4gICAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgIClcbn1cblxuZnVuY3Rpb24gam9pbiguLi5jbGFzc2VzOiB1bmtub3duW10pOiBzdHJpbmcge1xuICAgIHJldHVybiBjbGFzc2VzLmZpbHRlcigoY2xzKSA9PiB0eXBlb2YgY2xzID09PSBcInN0cmluZ1wiKS5qb2luKFwiIFwiKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9WaWV3RW5lcmd5QmFyLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9WaWV3RW5lcmd5QmFyLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9WaWV3RW5lcmd5QmFyLm1vZHVsZS5jc3NcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdFbmVyZ3lCYXJQcm9wcyB7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFZpZXdFbmVyZ3lCYXIoeyBjbGFzc05hbWUgfTogVmlld0VuZXJneUJhclByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2pvaW4oY2xhc3NOYW1lLCBzdHlsZXMudmlld0VuZXJneUJhcil9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5sZXZlbH0gaWQ9XCJlbmVyZ3ktbGV2ZWxcIiAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5ib3JkZXJ9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZnVuY3Rpb24gam9pbiguLi5jbGFzc2VzOiB1bmtub3duW10pOiBzdHJpbmcge1xuICAgIHJldHVybiBjbGFzc2VzLmZpbHRlcigoY2xzKSA9PiB0eXBlb2YgY2xzID09PSBcInN0cmluZ1wiKS5qb2luKFwiIFwiKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9wYWdlLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9wYWdlLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gXCJAL2dhbWUvMDEvZW5naW5lL2VuZ2luZVwiXG5pbXBvcnQgTGFuZHNjYXBlVmlldyBmcm9tIFwiQC9jb21wb25lbnRzL0xhbmRzY2FwZVZpZXdcIlxuaW1wb3J0IFNwcml0ZSBmcm9tIFwiQC9jb21wb25lbnRzL1ZpZXdTcHJpdGVcIlxuaW1wb3J0IFZpZXdFbmVyZ3lCYXIgZnJvbSBcIkAvY29tcG9uZW50cy9WaWV3RW5lcmd5QmFyXCJcblxuaW1wb3J0IFNwYWNlc2hpcFVSTCBmcm9tIFwiQC9nZngvc3BhY2VzaGlwLndlYnBcIlxuaW1wb3J0IENvd1VSTCBmcm9tIFwiQC9nZngvY293LndlYnBcIlxuXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL3BhZ2UubW9kdWxlLmNzc1wiXG5pbXBvcnQgeyB1c2VUcmFuc2xhdG9yIH0gZnJvbSBcIi4uL190cmFuc2xhdGlvblwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhZ2UoKSB7XG4gICAgY29uc3QgdHIgPSB1c2VUcmFuc2xhdG9yKClcbiAgICBjb25zdCBlbmdpbmUgPSBFbmdpbmUudXNlKHRyKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPExhbmRzY2FwZVZpZXcgb25Nb3VudD17ZW5naW5lLmF0dGFjaH0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnBhZ2V9PlxuICAgICAgICAgICAgICAgIHtbMCwgMSwgMiwgM10ubWFwKChpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gMSAtIGluZGV4ICogMC4yXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuaGlsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IGAke01hdGguc3FydChpbmRleCkgKiAxMH12bWluYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgekluZGV4OiBgJHsxMCAqICg5IC0gaW5kZXgpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7c30pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAkezMgKyBpbmRleCAqIDUuMH1zYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBgYnJpZ2h0bmVzcygke2luZGV4ICogMC4zICsgMC4yfSlgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInNwcml0ZS1zcGFjZXNoaXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInNwcml0ZS1zcGFjZXNoaXAtbGFzZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8U3ByaXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cInNwcml0ZS1zcGFjZXNoaXAtbWFpblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1NwYWNlc2hpcFVSTH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleD17ODF9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPFNwcml0ZSBpZD1cInNwcml0ZS1jb3dcIiB1cmw9e0Nvd1VSTH0gekluZGV4PXs4MH0gLz5cbiAgICAgICAgICAgICAgICA8Vmlld0VuZXJneUJhciAvPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJzY29yZVwiIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9MYW5kc2NhcGVWaWV3PlxuICAgIClcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vTGFuZHNjYXBlVmlldy5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vTGFuZHNjYXBlVmlldy5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vTGFuZHNjYXBlVmlldy5tb2R1bGUuY3NzXCJcblxuZXhwb3J0IGludGVyZmFjZSBMYW5kc2NhcGVWaWV3UHJvcHMge1xuICAgIGNsYXNzTmFtZT86IHN0cmluZ1xuICAgIG9uTW91bnQ/KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZFxuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGFuZHNjYXBlVmlldyh7XG4gICAgY2xhc3NOYW1lLFxuICAgIG9uTW91bnQsXG4gICAgY2hpbGRyZW4sXG59OiBMYW5kc2NhcGVWaWV3UHJvcHMpIHtcbiAgICBjb25zdCByZWZQYXJlbnQgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKVxuICAgIGNvbnN0IHJlZkNoaWxkID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbClcbiAgICB1c2VSZXNpemVPYnNlcnZlcihyZWZQYXJlbnQsIHJlZkNoaWxkKVxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHJlZlBhcmVudC5jdXJyZW50XG4gICAgICAgIGlmIChwYXJlbnQpIG9uTW91bnQ/LihwYXJlbnQpXG4gICAgfSwgW3JlZlBhcmVudC5jdXJyZW50XSlcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtqb2luKGNsYXNzTmFtZSwgc3R5bGVzLnBhcmVudCl9IHJlZj17cmVmUGFyZW50fT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2hpbGR9IHJlZj17cmVmQ2hpbGR9PlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmZ1bmN0aW9uIGpvaW4oLi4uY2xhc3NlczogdW5rbm93bltdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY2xhc3Nlcy5maWx0ZXIoKGNscykgPT4gdHlwZW9mIGNscyA9PT0gXCJzdHJpbmdcIikuam9pbihcIiBcIilcbn1cblxuZnVuY3Rpb24gdXNlUmVzaXplT2JzZXJ2ZXIoXG4gICAgcmVmUGFyZW50OiB7IGN1cnJlbnQ6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCB9LFxuICAgIHJlZkNoaWxkOiB7IGN1cnJlbnQ6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCB9XG4pIHtcbiAgICBjb25zdCByZWZPYnNlcnZlciA9IFJlYWN0LnVzZVJlZjxSZXNpemVPYnNlcnZlciB8IG51bGw+KG51bGwpXG4gICAgaWYgKCFyZWZPYnNlcnZlci5jdXJyZW50KSB7XG4gICAgICAgIHJlZk9ic2VydmVyLmN1cnJlbnQgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHJlZlBhcmVudC5jdXJyZW50XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHJlZkNoaWxkLmN1cnJlbnRcbiAgICAgICAgICAgIGlmICghcGFyZW50IHx8ICFjaGlsZCkgcmV0dXJuXG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGVudHJ5LnRhcmdldFxuICAgICAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICAgICAgaWYgKGhlaWdodCA+IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBvcnRyYWl0XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS53aWR0aCA9IGAke2hlaWdodH1weGBcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLmhlaWdodCA9IGAke3dpZHRofXB4YFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt3aWR0aH1weCkgcm90YXRlKDkwZGVnKWBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBMYW5kc2NhcGVcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS50cmFuc2Zvcm0gPSBgbm9uZWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpdiA9IHJlZlBhcmVudC5jdXJyZW50XG4gICAgICAgIGlmICghZGl2KSByZXR1cm5cblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IHJlZk9ic2VydmVyLmN1cnJlbnRcbiAgICAgICAgaWYgKCFvYnNlcnZlcikgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZGl2LnBhcmVudEVsZW1lbnRcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHJldHVyblxuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKVxuICAgICAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIudW5vYnNlcnZlKGNvbnRhaW5lcilcbiAgICB9LCBbcmVmUGFyZW50LmN1cnJlbnRdKVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHBpY2s8VD4oYXJyOiBUIHwgVFtdKTogVCB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJcblxuICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKVxuICAgIHJldHVybiBhcnJbaV1cbn1cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImxvY2FscyIsImNvbmdyYXRzIiwiZ2FtZU92ZXIiLCJpbnRybzEiLCJpbnRybzIiLCJpbnRybzMiLCJpbnRybzQiLCJoaWdoc2NvcmUiLCJzY29yZSIsInNjb3JlQ293Iiwic2NvcmVFYXQiLCJzZWVZb3UiLCJ1c2VUcmFuc2xhdG9yIiwiZW4iLCJhbGllbiIsIkludGVudGlvbiIsImludGVudFJpZ2h0IiwiaW50ZW50TGVmdCIsImludGVudFN1YmR1Y3Rpb24iLCJoYW5kbGVQb2ludGVyRG93biIsImV2dCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwidGhpcyIsImhhbmRsZVBvaW50ZXJVcCIsImhhbmRsZUNvbnRleHRNZW51IiwiaGFuZGxlS2V5RG93biIsInRpbWUiLCJEYXRlIiwibm93Iiwia2V5IiwiaGFuZGxlS2V5VXAiLCJhdHRhY2giLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJib2R5IiwiZGV0YWNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIndhbnRzVG9Hb1JpZ2h0Iiwid2FudHNUb0dvTGVmdCIsIndhbnRzVG9TdWJkdWUiLCJDb29yZHMiLCJjb25zdHJ1Y3RvciIsImxvZ2ljYWxXaWR0aCIsImxvZ2ljYWxIZWlnaHQiLCJlbGVtZW50IiwidHJhbnNmb3JtIiwieCIsInkiLCJzY2FsZSIsImhhbmRsZVJlc2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIk1hdGgiLCJtYXgiLCJoZWlnaHQiLCJtaW4iLCJzY2FsZVciLCJzY2FsZUgiLCJvYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwibG9naWNhbFgiLCJsb2dpY2FsWSIsImhpZ2h0Iiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIlNwcml0ZSIsImNvb3JkcyIsImVsZW1lbnRJZCIsInN0YXR1cyIsInJvdGF0aW9uIiwic2NhbGVYIiwic2NhbGVZIiwidXBkYXRlIiwiZGF0YSIsInN0eWxlIiwibGVmdCIsInRvcCIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImVycm9yIiwiY2xhbXAiLCJ2YWx1ZSIsIk1BWF9FTkVSR1kiLCJFbmVyZ3lCYXIiLCJfdmFsdWUiLCJjbGFtcGVkVmFsdWUiLCJkaXYiLCJwZXJjZW50IiwicmVzZXQiLCJhZGQiLCJkZWx0YSIsInN1YiIsIkNvdyIsInRpbWUwIiwic3ByaXRlIiwic3RhcnRpbmdUaW1lIiwicHJvY2VzcyIsImRlbGF5IiwiYW5nIiwiYWJzIiwic2luIiwiY29zIiwic3ViZHVlIiwidCIsImQiLCJoaXQiLCJ4U2hpcCIsInlTaGlwIiwieENvdyIsInlDb3ciLCJQSSIsInZ4IiwidnkiLCJBTXgiLCJBTXkiLCJTb3VuZE1hbmFnZXIiLCJzcGFjZXNoaXBGYWxsIiwibG9hZCIsInJheSIsImNvd3MiLCJjb3ciLCJ1cmwiLCJTb3VuZCIsImF1ZGlvIiwiQXVkaW8iLCJjdXJyZW50VGltZSIsInBsYXkiLCJleCIsInBhdXNlIiwiUmF5TWFuYWdlciIsImludGVudGlvbiIsInNvdW5kIiwicmF5QWN0aXZlIiwic3RvcCIsIkVuZ2luZSIsInVzZSIsInRyIiwicmVmRW5naW5lIiwiY3VycmVudCIsImVuZ2luZSIsImxvZyIsIm1vZGUiLCJwYXVzZUFjY3VtdWxhdG9yIiwiZW5lcmd5IiwibGFzZXIiLCJkaWVUaW1lIiwiZGllWSIsImVhdFgwIiwiZWF0WTAiLCJlYXRYMSIsImVhdFkxIiwiZWF0VGltZSIsImFuaW1hdGlvbkZyYW1lIiwiX3Njb3JlIiwiY29udGFpbmVyIiwic2NoZWR1bGVOZXh0RnJhbWUiLCJuZXh0RnJhbWUiLCJkb1J1biIsImRvRGllIiwiZG9FYXQiLCJzcGFjZXNoaXAiLCJ1cGRhdGVUcmFuc2xhdG9yIiwicyIsInRleHRDb250ZW50Iiwid2luZG93IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzZXRMYXNlck9wYWNpdHkiLCJvcGFjaXR5IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW5nbGUiLCJlbmVyZ3lMb3NzIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsInVuZGVmaW5lZCIsIlZpZXdTcHJpdGUiLCJjbGFzc05hbWUiLCJ6SW5kZXgiLCJqb2luIiwiY2xhc3NlcyIsImZpbHRlciIsImNscyIsIlZpZXdFbmVyZ3lCYXIiLCJ2aWV3RW5lcmd5QmFyIiwibGV2ZWwiLCJib3JkZXIiLCJQYWdlIiwiTGFuZHNjYXBlVmlldyIsIm9uTW91bnQiLCJwYWdlIiwibWFwIiwiaW5kZXgiLCJoaWxsIiwiYm90dG9tIiwic3FydCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY2hpbGRyZW4iLCJyZWZQYXJlbnQiLCJyZWZDaGlsZCIsInJlZk9ic2VydmVyIiwiZW50cmllcyIsInBhcmVudCIsImNoaWxkIiwiZW50cnkiLCJ0YXJnZXQiLCJwYXJlbnRFbGVtZW50IiwidXNlUmVzaXplT2JzZXJ2ZXIiLCJyZWYiLCJwaWNrIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9