"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[267],{527:(e,t,n)=>{n.d(t,{A:()=>A});var i=n(354),s=n.n(i),o=n(314),r=n.n(o),a=n(417),c=n.n(a),h=new URL(n(191),n.b),l=r()(s()),d=c()(h);l.push([e.id,`.src-app-play-page-module_page_lw93_W {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: #246;\n}\n\n.src-app-play-page-module_hill_Pjw_B3 {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(${d});\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear src-app-play-page-module_anim_REo86w;\n}\n\n@keyframes src-app-play-page-module_anim_REo86w {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: -1920px;\n    }\n}\n\ndiv#sprite-spaceship {\n    position: absolute;\n    z-index: 85;\n}\n\ndiv#sprite-spaceship-main {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv#sprite-spaceship-laser {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\ndiv#score {\n    font-size: 10vh;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n`,"",{version:3,sources:["webpack://./src/app/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,SAAS;IACT,WAAW;IACX,cAAc;IACd,yDAA2C;IAC3C,2BAA2B;IAC3B,sBAAsB;IACtB,8BAA8B;IAC9B,kEAAkC;AACtC;;AAEA;IACI;QACI,sBAAsB;IAC1B;IACA;QACI,4BAA4B;IAChC;AACJ;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,UAAU;IACV,YAAY;IACZ,uBAAuB;IACvB,sEAAsE;IACtE,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,YAAY;AAChB",sourcesContent:['.page {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: #246;\n}\n\n.hill {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(../../gfx/hills.webp);\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear anim;\n}\n\n@keyframes anim {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: -1920px;\n    }\n}\n\n:global(div#sprite-spaceship) {\n    position: absolute;\n    z-index: 85;\n}\n\n:global(div#sprite-spaceship-main) {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n:global(div#sprite-spaceship-laser) {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\n:global(div#score) {\n    font-size: 10vh;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n'],sourceRoot:""}]),l.locals={page:"src-app-play-page-module_page_lw93_W",hill:"src-app-play-page-module_hill_Pjw_B3",anim:"src-app-play-page-module_anim_REo86w"};const A=l},263:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(354),s=n.n(i),o=n(314),r=n.n(o)()(s());r.push([e.id,".src-components-LandscapeView-LandscapeView-module_parent_vK28h0,\n.src-components-LandscapeView-LandscapeView-module_child_wetol2 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.src-components-LandscapeView-LandscapeView-module_parent_vK28h0 {\n    transform-origin: top left;\n}\n","",{version:3,sources:["webpack://./src/components/LandscapeView/LandscapeView.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:[".parent,\n.child {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.parent {\n    transform-origin: top left;\n}\n"],sourceRoot:""}]),r.locals={parent:"src-components-LandscapeView-LandscapeView-module_parent_vK28h0",child:"src-components-LandscapeView-LandscapeView-module_child_wetol2"};const a=r},315:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(354),s=n.n(i),o=n(314),r=n.n(o)()(s());r.push([e.id,'.src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt,\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt {\n    width: 100%;\n    border: 1vh solid #0137;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n',"",{version:3,sources:["webpack://./src/components/ViewEnergyBar/ViewEnergyBar.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,oBAAoB;IACpB,kBAAkB;IAClB,qBAAqB;IACrB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;;IAEI,WAAW;IACX,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,SAAS;IACT,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,UAAU;IACV,qDAAqD;IACrD,kCAAkC;AACtC",sourcesContent:['.viewEnergyBar {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.border,\n.level {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.border {\n    width: 100%;\n    border: 1vh solid #0137;\n}\n\n.level {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n'],sourceRoot:""}]),r.locals={viewEnergyBar:"src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu",border:"src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt",level:"src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6"};const a=r},13:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(354),s=n.n(i),o=n(314),r=n.n(o)()(s());r.push([e.id,'.src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4 {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n',"",{version:3,sources:["webpack://./src/components/ViewSprite/ViewSprite.module.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,kBAAkB;IAClB,mCAAmC;IACnC,0BAA0B;IAC1B,oBAAoB;IACpB,8BAA8B;AAClC",sourcesContent:['.sprite {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n'],sourceRoot:""}]),r.locals={sprite:"src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4"};const a=r},822:(e,t,n)=>{n.r(t),n.d(t,{default:()=>te});var i=n(848),s=n(540);class o{constructor(){this.intentRight=0,this.intentLeft=0,this.intentSubduction=0,this.handlePointerDown=e=>{e.preventDefault(),e.stopPropagation(),this.intentSubduction=1},this.handlePointerUp=()=>{this.intentSubduction=0},this.handleContextMenu=e=>{e.preventDefault(),e.stopPropagation()},this.handleKeyDown=e=>{const t=Date.now();switch(e.key){case" ":this.intentSubduction=t;break;case"ArrowRight":this.intentRight=t;break;case"ArrowLeft":this.intentLeft=t}},this.handleKeyUp=e=>{switch(e.key){case" ":this.intentSubduction=0;break;case"ArrowRight":this.intentRight=0;break;case"ArrowLeft":this.intentLeft=0}}}attach(){document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),document.body.addEventListener("pointerdown",this.handlePointerDown),document.body.addEventListener("pointerup",this.handlePointerUp),document.body.addEventListener("contextmenu",this.handleContextMenu)}detach(){document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),document.body.removeEventListener("pointerdown",this.handlePointerDown),document.body.removeEventListener("pointerup",this.handlePointerUp),document.body.removeEventListener("contextmenu",this.handleContextMenu)}wantsToGoRight(){return!1}wantsToGoLeft(){return!1}wantsToSubdue(){return this.intentSubduction>0}}class r{constructor(e=1920,t=1080){this.logicalWidth=e,this.logicalHeight=t,this.element=null,this.transform={x:0,y:0,scale:1},this.handleResize=()=>{const{element:e}=this;if(!e)return;const t=e.getBoundingClientRect(),n=Math.max(t.width,t.height),i=Math.min(t.width,t.height),s=n/this.logicalWidth,o=i/this.logicalHeight,r=Math.min(s,o);this.transform.x=(n-this.logicalWidth*r)/2,this.transform.y=(i-this.logicalHeight*r)/2,this.transform.scale=r},this.observer=new ResizeObserver(this.handleResize)}x(e){const{scale:t,x:n}=this.transform;return e*t+n}y(e){const{scale:t,y:n}=this.transform;return e*t+n}width(e){return e*this.transform.scale}hight(e){return e*this.transform.scale}attach(e){this.detach(),this.element=e,this.observer.observe(e),this.handleResize()}detach(){this.element&&(this.observer.unobserve(this.element),this.element=null)}}var a=Object.defineProperty,c=Object.getOwnPropertySymbols,h=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,A=(e,t)=>{for(var n in t||(t={}))h.call(t,n)&&d(e,n,t[n]);if(c)for(var n of c(t))l.call(t,n)&&d(e,n,t[n]);return e};class u{constructor(e,t){this.coords=e,this.elementId=t,this.status={x:0,y:0,width:128,height:128,rotation:0,scaleX:1,scaleY:1}}get x(){return this.status.x}get y(){return this.status.y}get width(){return this.status.width}get height(){return this.status.height}get rotation(){return this.status.rotation}update(e){this.status=A(A({},this.status),e);const{element:t,coords:n,status:i}=this;if(!t)return!1;const s=n.x(i.x),o=n.y(i.y),r=n.width(i.width)*i.scaleX,a=n.width(i.height)*i.scaleY;return t.style.left=s-r/2+"px",t.style.top=o-a/2+"px",t.style.width=`${r}px`,t.style.height=`${a}px`,t.style.transform=`rotate(${i.rotation}deg)`,!0}get element(){const e=document.getElementById(this.elementId);return e||console.error("No element with this id:",this.elementId),e}}function p(e,t,n){return e<t?t:e>n?n:e}const m=1e4;class g{constructor(){this._value=m}get value(){return this._value}set value(e){const t=p(e,0,m);if(t===this._value)return;this._value=t;const n=document.getElementById("energy-level");if(!n)return;const i=100*t/m;n.style.width=`${i}%`}reset(){this._value=0,this.value=m}add(e){this.value+=e}sub(e){this.value-=e}}var b=n(829);class w{constructor(e){this.time0=0;const t=new u(e,"sprite-cow");this.sprite=t,t.update({x:960,y:720,width:256,height:128})}get x(){return this.sprite.x}get y(){return this.sprite.y}reset(e){this.time0=e,this.sprite.update({scaleX:1,scaleY:1})}update(e,t){e-=this.time0;const{sprite:n}=this,i=e%4e3/4e3*3840-960,s=.005*e,o=720-2*(n.height*Math.abs(Math.sin(s))-n.height),r=30*Math.cos(2*s);n.update({x:i,y:o,rotation:r})}subdue(e,t,n,i){const s=1-.9*n;this.sprite.update({x:e,y:t,rotation:this.sprite.rotation+.5*i,scaleX:s,scaleY:s})}hit(e,t,n){const{sprite:i}=this,s=i.x,o=i.y,r=n*Math.PI/180,a=-Math.sin(r),c=Math.cos(r),h=s-e,l=o-t;return Math.abs(h*c-l*a)<.2*i.height}}function f(e){return e[Math.floor(Math.random()*e.length)]}const v=["vache","vache","vache","vache","bestiole"],B=["absorbée","attrapée","avalée","capturée","dépecée","désintégrée","digérée","emprisonnée","engloutie","liquidée","mangée","pulvérisée"];class y{constructor(){this.intention=new o,this.mode="run",this.pauseAccumulator=0,this.energy=new g,this.time=0,this.laser=0,this.dieTime=0,this.dieY=0,this.eatX0=0,this.eatY0=0,this.eatX1=0,this.eatY1=0,this.eatTime=0,this.animationFrame=0,this._score=0,this.attach=e=>{console.log("ATTACH"),this.intention.attach(),this.coords.attach(e),this.scheduleNextFrame(),this.energy.reset(),this.score=0},this.nextFrame=e=>{this.scheduleNextFrame();let t=0;switch(this.time>0&&(t=e-this.time),this.time=e,e-=this.pauseAccumulator,this.mode){case"run":this.doRun(e,t);break;case"die":this.doDie(e,t);break;case"eat":this.doEat(e,t)}};const e=new r;this.cow=new w(e),this.coords=e,this.spaceship=new u(e,"sprite-spaceship"),this.spaceship.update({x:960,y:360,width:512,height:256})}static use(){const e=s.useRef(null);return e.current||(e.current=new y),s.useEffect((()=>{const t=e.current;if(t)return console.log("MOUNT"),()=>{console.log("UNMOUNT"),t.detach(),e.current=null}}),[]),e.current}get score(){return this._score}set score(e){this._score=e;const t=document.getElementById("score"),n=e>1?"s":"";t&&(t.textContent=`${f(v)}${n} ${f(B)}${n} : ${e}`)}detach(){console.log("DETACH"),this.intention.detach(),this.coords.detach(),window.cancelAnimationFrame(this.animationFrame),this.animationFrame=0}setLaserOpacity(e){if(e===this.laser)return;this.laser=e;const t=document.getElementById("sprite-spaceship-laser");t&&(t.style.opacity=`${e}`)}scheduleNextFrame(){window.cancelAnimationFrame(this.animationFrame),this.animationFrame=window.requestAnimationFrame(this.nextFrame)}doRun(e,t){const n=40*Math.sin(.002*e),{intention:i,spaceship:s,cow:o}=this;let r=s.x;i.wantsToGoRight()&&(r+=3*t),i.wantsToGoLeft()&&(r-=3*t),r=960+250*(Math.cos(.001633*e)+Math.sin(.002104*e)),this.setLaserOpacity(i.wantsToSubdue()?1:0),s.update({x:p(r,300,1620),rotation:n});let a=.4*t;if((i.wantsToGoLeft()||i.wantsToGoRight())&&(a*=2),i.wantsToSubdue()&&(a*=10,o.hit(s.x,s.y,s.rotation)))return this.mode="eat",this.eatX0=o.x,this.eatY0=o.y,this.eatX1=s.x,this.eatY1=s.y,this.eatTime=e,void this.score++;this.energy.sub(a),this.energy.value<=0&&(this.mode="die",this.dieTime=e,this.dieY=s.y,this.setLaserOpacity(0)),o.update(e,t)}doDie(e,t){const{spaceship:n}=this,i=n.rotation+.5*t,s=e-this.dieTime-200,o=this.dieY+200*(s*s-4e4)/4e4;n.update({rotation:i,y:o}),e-this.dieTime>1e3&&((0,b.gQ)("/dead"),this.detach()),this.cow.update(e,t)}doEat(e,t){const n=Math.min(1,(e-this.eatTime)/1e3),i=(this.eatX1-this.eatX0)*n+this.eatX0,s=(this.eatY1-this.eatY0)*n+this.eatY0;this.cow.subdue(i,s,n,t),1===n&&(this.mode="run",this.pauseAccumulator+=e-this.eatTime,this.cow.reset(e),this.energy.add(2e3))}}var C=n(72),I=n.n(C),x=n(825),k=n.n(x),E=n(659),_=n.n(E),V=n(56),L=n.n(V),T=n(159),M=n.n(T),R=n(113),Y=n.n(R),z=n(263),S={};S.styleTagTransform=Y(),S.setAttributes=L(),S.insert=_().bind(null,"head"),S.domAPI=k(),S.insertStyleElement=M(),I()(z.A,S);const W=z.A&&z.A.locals?z.A.locals:void 0;function j({className:e,onMount:t,children:n}){const o=s.useRef(null),r=s.useRef(null);return function(e,t){const n=s.useRef(null);n.current||(n.current=new ResizeObserver((n=>{const i=e.current,s=t.current;if(i&&s)for(const e of n){const t=e.target,{width:n,height:s}=t.getBoundingClientRect();s>n?(console.log("PORTRAIT"),i.style.width=`${s}px`,i.style.height=`${n}px`,i.style.transform=`translateX(${n}px) rotate(90deg)`):(console.log("LANDSCAPE"),i.style.width=`${n}px`,i.style.height=`${s}px`,i.style.transform="none"),console.log("🚀 [LandscapeView] width, height = ",n,s,[...i.classList])}}))),s.useEffect((()=>{const t=e.current;if(!t)return;const i=n.current;if(!i)return;const s=t.parentElement;return s?(i.observe(s),()=>i.unobserve(s)):void 0}),[e.current])}(o,r),s.useEffect((()=>{const e=o.current;e&&t(e)}),[o.current]),(0,i.jsx)("div",{className:P(e,W.parent),ref:o,children:(0,i.jsx)("div",{className:W.child,ref:r,children:n})})}function P(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var N=n(13),O={};O.styleTagTransform=Y(),O.setAttributes=L(),O.insert=_().bind(null,"head"),O.domAPI=k(),O.insertStyleElement=M(),I()(N.A,O);const U=N.A&&N.A.locals?N.A.locals:void 0;function X({className:e,id:t,url:n,zIndex:s}){return(0,i.jsx)("div",{className:$(e,U.sprite),id:t,style:{"--custom-url":`url(${n})`,"--custom-z-index":s}})}function $(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var D=n(315),F={};F.styleTagTransform=Y(),F.setAttributes=L(),F.insert=_().bind(null,"head"),F.domAPI=k(),F.insertStyleElement=M(),I()(D.A,F);const K=D.A&&D.A.locals?D.A.locals:void 0;function q({className:e}){return(0,i.jsxs)("div",{className:G(e,K.viewEnergyBar),children:[(0,i.jsx)("div",{className:K.level,id:"energy-level"}),(0,i.jsx)("div",{className:K.border})]})}function G(...e){return e.filter((e=>"string"==typeof e)).join(" ")}const Z=n.p+"img/spaceship.28cb4d79552de7d691e1.webp",H=n.p+"img/cow.70ddbae0f000fc938d00.webp";var Q=n(527),J={};J.styleTagTransform=Y(),J.setAttributes=L(),J.insert=_().bind(null,"head"),J.domAPI=k(),J.insertStyleElement=M(),I()(Q.A,J);const ee=Q.A&&Q.A.locals?Q.A.locals:void 0;function te(){s.useRef(null);const e=y.use();return(0,i.jsx)(j,{onMount:e.attach,children:(0,i.jsxs)("div",{className:ee.page,children:[[0,1,2,3].map((e=>(0,i.jsx)("div",{className:ee.hill,style:{bottom:10*Math.sqrt(e)+"vmin",zIndex:""+10*(9-e),transform:`scale(${1-.2*e})`,animationDuration:3+5*e+"s",filter:`brightness(${.3*e+.1})`}}))),(0,i.jsxs)("div",{id:"sprite-spaceship",children:[(0,i.jsx)("div",{id:"sprite-spaceship-laser"}),(0,i.jsx)(X,{id:"sprite-spaceship-main",url:Z,zIndex:81})]}),(0,i.jsx)(X,{id:"sprite-cow",url:H,zIndex:80}),(0,i.jsx)(q,{}),(0,i.jsx)("div",{id:"score"})]})})}},191:(e,t,n)=>{e.exports=n.p+"img/hills.4f7d1cb3881dc5a9404a.webp"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SixLQUFLb0osS0FBS0gsR0FBYixPQUNSUixPQUFRLEdBQUcsSUFBTSxFQUFJUSxHQUNyQnpKLFVBQVcsU0FBUyxFQUFZLEdBQVJ5SixLQUN4Qkksa0JBQXNCLEVBQVksRUFBUkosRUFBUCxJQUNuQlosT0FBUSxjQUFzQixHQUFSWSxFQUFjLFlBSWhELFVBQUMsT0FBSTFMLEdBQUcsbUJBQ0osb0JBQUMsT0FBSUEsR0FBRyw0QkFDUixTQUFDLEdBQ0dBLEdBQUcsd0JBQ0hpTCxJQUFLLEVBQ0xDLE9BQVEsU0FHaEIsU0FBQyxFQUFNLENBQUNsTCxHQUFHLGFBQWFpTCxJQUFLLEVBQVFDLE9BQVEsTUFDN0MsU0FBQ0MsRUFBYSxLQUNkLFNBQUMsT0FBSW5MLEdBQUcsY0FJeEIsQyIsInNvdXJjZXMiOlsiL1VzZXJzL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2Fuc2VsbS0yMDI1L3NyYy9hcHAvcGxheS9wYWdlLm1vZHVsZS5jc3MiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2NvbXBvbmVudHMvTGFuZHNjYXBlVmlldy9MYW5kc2NhcGVWaWV3Lm1vZHVsZS5jc3MiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2NvbXBvbmVudHMvVmlld0VuZXJneUJhci9WaWV3RW5lcmd5QmFyLm1vZHVsZS5jc3MiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2NvbXBvbmVudHMvVmlld1Nwcml0ZS9WaWV3U3ByaXRlLm1vZHVsZS5jc3MiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2VuZ2luZS9pbnRlbnRpb24udHMiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2Nvb3Jkcy50cyIsIi9Vc2Vycy90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9hbnNlbG0tMjAyNS9zcmMvZW5naW5lL3Nwcml0ZS50cyIsIi9Vc2Vycy90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9hbnNlbG0tMjAyNS9zcmMvdXRpbHMvY2FsYy50cyIsIi9Vc2Vycy90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9hbnNlbG0tMjAyNS9zcmMvZW5naW5lL2VuZXJneS1iYXIudHMiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2VuZ2luZS9jb3cudHMiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL3V0aWxzL2FycmF5LnRzIiwiL1VzZXJzL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2Fuc2VsbS0yMDI1L3NyYy9lbmdpbmUvZW5naW5lLnRzIiwid2VicGFjazovLy4uLi8uL3NyYy9jb21wb25lbnRzL0xhbmRzY2FwZVZpZXcvTGFuZHNjYXBlVmlldy5tb2R1bGUuY3NzP2NhYzUiLCIvVXNlcnMvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvYW5zZWxtLTIwMjUvc3JjL2NvbXBvbmVudHMvTGFuZHNjYXBlVmlldy9MYW5kc2NhcGVWaWV3LnRzeCIsIndlYnBhY2s6Ly8uLi4vLi9zcmMvY29tcG9uZW50cy9WaWV3U3ByaXRlL1ZpZXdTcHJpdGUubW9kdWxlLmNzcz85NjUzIiwiL1VzZXJzL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2Fuc2VsbS0yMDI1L3NyYy9jb21wb25lbnRzL1ZpZXdTcHJpdGUvVmlld1Nwcml0ZS50c3giLCJ3ZWJwYWNrOi8vLi4uLy4vc3JjL2NvbXBvbmVudHMvVmlld0VuZXJneUJhci9WaWV3RW5lcmd5QmFyLm1vZHVsZS5jc3M/OTJlZCIsIi9Vc2Vycy90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9hbnNlbG0tMjAyNS9zcmMvY29tcG9uZW50cy9WaWV3RW5lcmd5QmFyL1ZpZXdFbmVyZ3lCYXIudHN4Iiwid2VicGFjazovLy4uLi8uL3NyYy9hcHAvcGxheS9wYWdlLm1vZHVsZS5jc3M/MGVhMiIsIi9Vc2Vycy90b2xva29iYW4vQ29kZS9naXRodWIvZ2FtZS9hbnNlbG0tMjAyNS9zcmMvYXBwL3BsYXkvcGFnZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uLy4uL2dmeC9oaWxscy53ZWJwXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuc3JjLWFwcC1wbGF5LXBhZ2UtbW9kdWxlX3BhZ2VfbHc5M19XIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI0Njtcbn1cblxuLnNyYy1hcHAtcGxheS1wYWdlLW1vZHVsZV9oaWxsX1Bqd19CMyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IC0xOTIwcHg7XG4gICAgcmlnaHQ6IC0xOTIwcHg7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMzB2bWluO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KTtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0LXg7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDE5MjBweCAzMHZtaW47XG4gICAgYW5pbWF0aW9uOiAzcyBpbmZpbml0ZSBsaW5lYXIgc3JjLWFwcC1wbGF5LXBhZ2UtbW9kdWxlX2FuaW1fUkVvODZ3O1xufVxuXG5Aa2V5ZnJhbWVzIHNyYy1hcHAtcGxheS1wYWdlLW1vZHVsZV9hbmltX1JFbzg2dyB7XG4gICAgZnJvbSB7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDA7XG4gICAgfVxuICAgIHRvIHtcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTE5MjBweDtcbiAgICB9XG59XG5cbmRpdiNzcHJpdGUtc3BhY2VzaGlwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogODU7XG59XG5cbmRpdiNzcHJpdGUtc3BhY2VzaGlwLW1haW4ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbmRpdiNzcHJpdGUtc3BhY2VzaGlwLWxhc2VyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAzNSU7XG4gICAgdG9wOiA1MCU7XG4gICAgd2lkdGg6IDMwJTtcbiAgICBoZWlnaHQ6IDUwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZlOTM7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGxlZnQsICNmZTkwLCAjZmU5MywgI2ZlOTMsICNmZTkwKTtcbiAgICB0cmFuc2l0aW9uOiBvcGFpdHkgMC4ycztcbiAgICBvcGFjaXR5OiAwO1xufVxuXG5kaXYjc2NvcmUge1xuICAgIGZvbnQtc2l6ZTogMTB2aDtcbiAgICB6LWluZGV4OiAxMDE7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwLjVlbTtcbiAgICBib3R0b206IDAuMjVlbTtcbiAgICBjb2xvcjogI2ZlOWI7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGxheS9wYWdlLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLGNBQWM7SUFDZCxTQUFTO0lBQ1QsV0FBVztJQUNYLGNBQWM7SUFDZCx5REFBMkM7SUFDM0MsMkJBQTJCO0lBQzNCLHNCQUFzQjtJQUN0Qiw4QkFBOEI7SUFDOUIsa0VBQWtDO0FBQ3RDOztBQUVBO0lBQ0k7UUFDSSxzQkFBc0I7SUFDMUI7SUFDQTtRQUNJLDRCQUE0QjtJQUNoQztBQUNKOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLHNFQUFzRTtJQUN0RSx1QkFBdUI7SUFDdkIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksZUFBZTtJQUNmLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGNBQWM7SUFDZCxZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5wYWdlIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNDY7XFxufVxcblxcbi5oaWxsIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAtMTkyMHB4O1xcbiAgICByaWdodDogLTE5MjBweDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgaGVpZ2h0OiAzMHZtaW47XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi8uLi9nZngvaGlsbHMud2VicCk7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiByZXBlYXQteDtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMDtcXG4gICAgYmFja2dyb3VuZC1zaXplOiAxOTIwcHggMzB2bWluO1xcbiAgICBhbmltYXRpb246IDNzIGluZmluaXRlIGxpbmVhciBhbmltO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGFuaW0ge1xcbiAgICBmcm9tIHtcXG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDA7XFxuICAgIH1cXG4gICAgdG8ge1xcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTE5MjBweDtcXG4gICAgfVxcbn1cXG5cXG46Z2xvYmFsKGRpdiNzcHJpdGUtc3BhY2VzaGlwKSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogODU7XFxufVxcblxcbjpnbG9iYWwoZGl2I3Nwcml0ZS1zcGFjZXNoaXAtbWFpbikge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuOmdsb2JhbChkaXYjc3ByaXRlLXNwYWNlc2hpcC1sYXNlcikge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAzNSU7XFxuICAgIHRvcDogNTAlO1xcbiAgICB3aWR0aDogMzAlO1xcbiAgICBoZWlnaHQ6IDUwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZTkzO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwgI2ZlOTAsICNmZTkzLCAjZmU5MywgI2ZlOTApO1xcbiAgICB0cmFuc2l0aW9uOiBvcGFpdHkgMC4ycztcXG4gICAgb3BhY2l0eTogMDtcXG59XFxuXFxuOmdsb2JhbChkaXYjc2NvcmUpIHtcXG4gICAgZm9udC1zaXplOiAxMHZoO1xcbiAgICB6LWluZGV4OiAxMDE7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDAuNWVtO1xcbiAgICBib3R0b206IDAuMjVlbTtcXG4gICAgY29sb3I6ICNmZTliO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJwYWdlXCI6IGBzcmMtYXBwLXBsYXktcGFnZS1tb2R1bGVfcGFnZV9sdzkzX1dgLFxuXHRcImhpbGxcIjogYHNyYy1hcHAtcGxheS1wYWdlLW1vZHVsZV9oaWxsX1Bqd19CM2AsXG5cdFwiYW5pbVwiOiBgc3JjLWFwcC1wbGF5LXBhZ2UtbW9kdWxlX2FuaW1fUkVvODZ3YFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtY29tcG9uZW50cy1MYW5kc2NhcGVWaWV3LUxhbmRzY2FwZVZpZXctbW9kdWxlX3BhcmVudF92SzI4aDAsXG4uc3JjLWNvbXBvbmVudHMtTGFuZHNjYXBlVmlldy1MYW5kc2NhcGVWaWV3LW1vZHVsZV9jaGlsZF93ZXRvbDIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnNyYy1jb21wb25lbnRzLUxhbmRzY2FwZVZpZXctTGFuZHNjYXBlVmlldy1tb2R1bGVfcGFyZW50X3ZLMjhoMCB7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0xhbmRzY2FwZVZpZXcvTGFuZHNjYXBlVmlldy5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztJQUVJLGtCQUFrQjtJQUNsQixPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxZQUFZO0lBQ1osU0FBUztJQUNULFVBQVU7SUFDVixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSwwQkFBMEI7QUFDOUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnBhcmVudCxcXG4uY2hpbGQge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4ucGFyZW50IHtcXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInBhcmVudFwiOiBgc3JjLWNvbXBvbmVudHMtTGFuZHNjYXBlVmlldy1MYW5kc2NhcGVWaWV3LW1vZHVsZV9wYXJlbnRfdksyOGgwYCxcblx0XCJjaGlsZFwiOiBgc3JjLWNvbXBvbmVudHMtTGFuZHNjYXBlVmlldy1MYW5kc2NhcGVWaWV3LW1vZHVsZV9jaGlsZF93ZXRvbDJgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfdmlld0VuZXJneUJhcl9NVXNsaXUge1xuICAgIC0tbWFyZ2luOiA1dmg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IHZhcigtLW1hcmdpbik7XG4gICAgcmlnaHQ6IHZhcigtLW1hcmdpbik7XG4gICAgdG9wOiB2YXIoLS1tYXJnaW4pO1xuICAgIGhlaWdodDogdmFyKC0tbWFyZ2luKTtcbiAgICBib3JkZXItcmFkaXVzOiA5OXZtYXg7XG4gICAgYmFja2dyb3VuZDogIzAwMDU7XG59XG5cbi5zcmMtY29tcG9uZW50cy1WaWV3RW5lcmd5QmFyLVZpZXdFbmVyZ3lCYXItbW9kdWxlX2JvcmRlcl96MnBjYnQsXG4uc3JjLWNvbXBvbmVudHMtVmlld0VuZXJneUJhci1WaWV3RW5lcmd5QmFyLW1vZHVsZV9sZXZlbF9Lb3AwbTYge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogOTl2bWF4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbi5zcmMtY29tcG9uZW50cy1WaWV3RW5lcmd5QmFyLVZpZXdFbmVyZ3lCYXItbW9kdWxlX2JvcmRlcl96MnBjYnQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlcjogMXZoIHNvbGlkICMwMTM3O1xufVxuXG4uc3JjLWNvbXBvbmVudHMtVmlld0VuZXJneUJhci1WaWV3RW5lcmd5QmFyLW1vZHVsZV9sZXZlbF9Lb3AwbTYge1xuICAgIHdpZHRoOiAzMCU7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgI2Y5MCwgI2ZmZiwgI2Y5MCk7XG4gICAgYm94LXNoYWRvdzogMCAwIHZhcigtLW1hcmdpbikgI2Y5MDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVmlld0VuZXJneUJhci9WaWV3RW5lcmd5QmFyLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIsaUJBQWlCO0FBQ3JCOztBQUVBOztJQUVJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsWUFBWTtJQUNaLHFCQUFxQjtJQUNyQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLHFEQUFxRDtJQUNyRCxrQ0FBa0M7QUFDdENcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnZpZXdFbmVyZ3lCYXIge1xcbiAgICAtLW1hcmdpbjogNXZoO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IHZhcigtLW1hcmdpbik7XFxuICAgIHJpZ2h0OiB2YXIoLS1tYXJnaW4pO1xcbiAgICB0b3A6IHZhcigtLW1hcmdpbik7XFxuICAgIGhlaWdodDogdmFyKC0tbWFyZ2luKTtcXG4gICAgYm9yZGVyLXJhZGl1czogOTl2bWF4O1xcbiAgICBiYWNrZ3JvdW5kOiAjMDAwNTtcXG59XFxuXFxuLmJvcmRlcixcXG4ubGV2ZWwge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBib3JkZXItcmFkaXVzOiA5OXZtYXg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5ib3JkZXIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYm9yZGVyOiAxdmggc29saWQgIzAxMzc7XFxufVxcblxcbi5sZXZlbCB7XFxuICAgIHdpZHRoOiAzMCU7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICNmOTAsICNmZmYsICNmOTApO1xcbiAgICBib3gtc2hhZG93OiAwIDAgdmFyKC0tbWFyZ2luKSAjZjkwO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ2aWV3RW5lcmd5QmFyXCI6IGBzcmMtY29tcG9uZW50cy1WaWV3RW5lcmd5QmFyLVZpZXdFbmVyZ3lCYXItbW9kdWxlX3ZpZXdFbmVyZ3lCYXJfTVVzbGl1YCxcblx0XCJib3JkZXJcIjogYHNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfYm9yZGVyX3oycGNidGAsXG5cdFwibGV2ZWxcIjogYHNyYy1jb21wb25lbnRzLVZpZXdFbmVyZ3lCYXItVmlld0VuZXJneUJhci1tb2R1bGVfbGV2ZWxfS29wMG02YFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtY29tcG9uZW50cy1WaWV3U3ByaXRlLVZpZXdTcHJpdGUtbW9kdWxlX3Nwcml0ZV9VWWxXYTQge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHZhcigtLWN1c3RvbS11cmwpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHotaW5kZXg6IHZhcigtLWN1c3RvbS16LWluZGV4KTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVmlld1Nwcml0ZS9WaWV3U3ByaXRlLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLG1DQUFtQztJQUNuQywwQkFBMEI7SUFDMUIsb0JBQW9CO0lBQ3BCLDhCQUE4QjtBQUNsQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3ByaXRlIHtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdmFyKC0tY3VzdG9tLXVybCk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgei1pbmRleDogdmFyKC0tY3VzdG9tLXotaW5kZXgpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJzcHJpdGVcIjogYHNyYy1jb21wb25lbnRzLVZpZXdTcHJpdGUtVmlld1Nwcml0ZS1tb2R1bGVfc3ByaXRlX1VZbFdhNGBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImV4cG9ydCBjbGFzcyBJbnRlbnRpb24ge1xuICAgIHByaXZhdGUgaW50ZW50UmlnaHQgPSAwXG4gICAgcHJpdmF0ZSBpbnRlbnRMZWZ0ID0gMFxuICAgIHByaXZhdGUgaW50ZW50U3ViZHVjdGlvbiA9IDBcblxuICAgIGF0dGFjaCgpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5oYW5kbGVLZXlEb3duKVxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5oYW5kbGVLZXlVcClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5oYW5kbGVQb2ludGVyRG93bilcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLmhhbmRsZUNvbnRleHRNZW51KVxuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5oYW5kbGVLZXlEb3duKVxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5oYW5kbGVLZXlVcClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5oYW5kbGVQb2ludGVyRG93bilcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMuaGFuZGxlUG9pbnRlclVwKVxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLmhhbmRsZUNvbnRleHRNZW51KVxuICAgIH1cblxuICAgIHdhbnRzVG9Hb1JpZ2h0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2UgLy8gdGhpcy5pbnRlbnRSaWdodCA+IDBcbiAgICB9XG5cbiAgICB3YW50c1RvR29MZWZ0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2UgLy8gdGhpcy5pbnRlbnRMZWZ0ID4gMFxuICAgIH1cblxuICAgIHdhbnRzVG9TdWJkdWUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVudFN1YmR1Y3Rpb24gPiAwXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyRG93biA9IChldnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgdGhpcy5pbnRlbnRTdWJkdWN0aW9uID0gMVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlclVwID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmludGVudFN1YmR1Y3Rpb24gPSAwXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVDb250ZXh0TWVudSA9IChldnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlS2V5RG93biA9IChldnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGltZSA9IERhdGUubm93KClcbiAgICAgICAgc3dpdGNoIChldnQua2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZW50U3ViZHVjdGlvbiA9IHRpbWVcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmludGVudFJpZ2h0ID0gdGltZVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlbnRMZWZ0ID0gdGltZVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZUtleVVwID0gKGV2dDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2dC5rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCIgXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlbnRTdWJkdWN0aW9uID0gMFxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZW50UmlnaHQgPSAwXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmludGVudExlZnQgPSAwXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qKlxuICogQWxsIHNjcmVlbnMgYXJlIGRpZmZlcmVudCwgYnV0IHdlIHdhbnQgdG8gdXNlIGEgc3lzdGVtIG9mIGNvb3JkaW5hdGVzIHRoYXRcbiAqIG1ha2VzIHVzIGJlbGlldmUgd2UgYXJlIHVzaW5nIGEgMTkyMHgxMDgwIHZpZXdwb3J0LlxuICogVGhpcyBjbGFzcyB3aWxsIGRvIHRoZSBjb252ZXJ0aW9uIGludG8gdGhlIGFjdHVhbCBjb29yZGluYXRlcyBpbiBwaXhlbHMuXG4gKiBUaGUgdmlld3BvcnQgaXMgc3VwcG9zZWQgdG8gYmUgY29udGFpbmVkIGluc2lkZSBvZiB0aGUgYWN0dWFsIHZpZXcsXG4gKiBhbmQgdGhlIHZpZXcgaXMgYWx3YXlzIGluIGxhbmRzY2FwZSBvcmllbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIENvb3JkcyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXJcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyYW5zZm9ybToge1xuICAgICAgICB4OiBudW1iZXJcbiAgICAgICAgeTogbnVtYmVyXG4gICAgICAgIHNjYWxlOiBudW1iZXJcbiAgICB9ID0geyB4OiAwLCB5OiAwLCBzY2FsZTogMSB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGxvZ2ljYWxXaWR0aCA9IDE5MjAsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBsb2dpY2FsSGVpZ2h0ID0gMTA4MFxuICAgICkge1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMuaGFuZGxlUmVzaXplKVxuICAgIH1cblxuICAgIHgobG9naWNhbFg6IG51bWJlcikge1xuICAgICAgICBjb25zdCB7IHNjYWxlLCB4IH0gPSB0aGlzLnRyYW5zZm9ybVxuICAgICAgICByZXR1cm4gbG9naWNhbFggKiBzY2FsZSArIHhcbiAgICB9XG5cbiAgICB5KGxvZ2ljYWxZOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgeSB9ID0gdGhpcy50cmFuc2Zvcm1cbiAgICAgICAgcmV0dXJuIGxvZ2ljYWxZICogc2NhbGUgKyB5XG4gICAgfVxuXG4gICAgd2lkdGgobG9naWNhbFdpZHRoOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGxvZ2ljYWxXaWR0aCAqIHRoaXMudHJhbnNmb3JtLnNjYWxlXG4gICAgfVxuXG4gICAgaGlnaHQobG9naWNhbEhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBsb2dpY2FsSGVpZ2h0ICogdGhpcy50cmFuc2Zvcm0uc2NhbGVcbiAgICB9XG5cbiAgICBhdHRhY2goZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5kZXRhY2goKVxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KVxuICAgICAgICB0aGlzLmhhbmRsZVJlc2l6ZSgpXG4gICAgfVxuXG4gICAgZGV0YWNoKCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBlbGVtZW50IH0gPSB0aGlzXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heChyZWN0LndpZHRoLCByZWN0LmhlaWdodClcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5taW4ocmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpXG4gICAgICAgIGNvbnN0IHNjYWxlVyA9IHdpZHRoIC8gdGhpcy5sb2dpY2FsV2lkdGhcbiAgICAgICAgY29uc3Qgc2NhbGVIID0gaGVpZ2h0IC8gdGhpcy5sb2dpY2FsSGVpZ2h0XG4gICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5taW4oc2NhbGVXLCBzY2FsZUgpXG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnggPSAod2lkdGggLSB0aGlzLmxvZ2ljYWxXaWR0aCAqIHNjYWxlKSAvIDJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ueSA9IChoZWlnaHQgLSB0aGlzLmxvZ2ljYWxIZWlnaHQgKiBzY2FsZSkgLyAyXG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnNjYWxlID0gc2NhbGVcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb29yZHMgfSBmcm9tIFwiLi4vY29vcmRzXCJcblxuZXhwb3J0IGludGVyZmFjZSBTcHJpdGVTdGF0dXMge1xuICAgIHg6IG51bWJlclxuICAgIHk6IG51bWJlclxuICAgIHdpZHRoOiBudW1iZXJcbiAgICBoZWlnaHQ6IG51bWJlclxuICAgIHJvdGF0aW9uOiBudW1iZXJcbiAgICBzY2FsZVg6IG51bWJlclxuICAgIHNjYWxlWTogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBTcHJpdGUge1xuICAgIHByaXZhdGUgc3RhdHVzOiBTcHJpdGVTdGF0dXMgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIHdpZHRoOiAxMjgsXG4gICAgICAgIGhlaWdodDogMTI4LFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgc2NhbGVYOiAxLFxuICAgICAgICBzY2FsZVk6IDEsXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29vcmRzOiBDb29yZHMsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudElkOiBzdHJpbmdcbiAgICApIHt9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzLnhcbiAgICB9XG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cy55XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzLndpZHRoXG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cy5oZWlnaHRcbiAgICB9XG4gICAgZ2V0IHJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMucm90YXRpb25cbiAgICB9XG5cbiAgICB1cGRhdGUoZGF0YTogUGFydGlhbDxTcHJpdGVTdGF0dXM+KTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0dXMsXG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgY29vcmRzLCBzdGF0dXMgfSA9IHRoaXNcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gZmFsc2VcblxuICAgICAgICBjb25zdCB4ID0gY29vcmRzLngoc3RhdHVzLngpXG4gICAgICAgIGNvbnN0IHkgPSBjb29yZHMueShzdGF0dXMueSlcbiAgICAgICAgY29uc3Qgd2lkdGggPSBjb29yZHMud2lkdGgoc3RhdHVzLndpZHRoKSAqIHN0YXR1cy5zY2FsZVhcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY29vcmRzLndpZHRoKHN0YXR1cy5oZWlnaHQpICogc3RhdHVzLnNjYWxlWVxuICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBgJHt4IC0gd2lkdGggLyAyfXB4YFxuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IGAke3kgLSBoZWlnaHQgLyAyfXB4YFxuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YFxuICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGByb3RhdGUoJHtzdGF0dXMucm90YXRpb259ZGVnKWBcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBlbGVtZW50KCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50SWQpXG4gICAgICAgIGlmICghZWxlbWVudCkgY29uc29sZS5lcnJvcihcIk5vIGVsZW1lbnQgd2l0aCB0aGlzIGlkOlwiLCB0aGlzLmVsZW1lbnRJZClcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluKSByZXR1cm4gbWluXG4gICAgaWYgKHZhbHVlID4gbWF4KSByZXR1cm4gbWF4XG4gICAgcmV0dXJuIHZhbHVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWcycmFkKGRlZzogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChkZWcgKiBNYXRoLlBJKSAvIDE4MFxufSIsImltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIkAvdXRpbHMvY2FsY1wiXG5cbmNvbnN0IE1BWF9FTkVSR1kgPSAxZTRcblxuZXhwb3J0IGNsYXNzIEVuZXJneUJhciB7XG4gICAgcHJpdmF0ZSBfdmFsdWUgPSBNQVhfRU5FUkdZXG5cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgY2xhbXBlZFZhbHVlID0gY2xhbXAodmFsdWUsIDAsIE1BWF9FTkVSR1kpXG4gICAgICAgIGlmIChjbGFtcGVkVmFsdWUgPT09IHRoaXMuX3ZhbHVlKSByZXR1cm5cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IGNsYW1wZWRWYWx1ZVxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVuZXJneS1sZXZlbFwiKVxuICAgICAgICBpZiAoIWRpdikgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgcGVyY2VudCA9ICgxMDAgKiBjbGFtcGVkVmFsdWUpIC8gTUFYX0VORVJHWVxuICAgICAgICBkaXYuc3R5bGUud2lkdGggPSBgJHtwZXJjZW50fSVgXG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gMFxuICAgICAgICB0aGlzLnZhbHVlID0gTUFYX0VORVJHWVxuICAgIH1cblxuICAgIGFkZChkZWx0YTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudmFsdWUgKz0gZGVsdGFcbiAgICB9XG5cbiAgICBzdWIoZGVsdGE6IG51bWJlcikge1xuICAgICAgICB0aGlzLnZhbHVlIC09IGRlbHRhXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29vcmRzIH0gZnJvbSBcIkAvY29vcmRzXCJcbmltcG9ydCB7IFNwcml0ZSB9IGZyb20gXCIuL3Nwcml0ZVwiXG5pbXBvcnQgeyBkZWcycmFkIH0gZnJvbSBcIkAvdXRpbHMvY2FsY1wiXG5cbmV4cG9ydCBjbGFzcyBDb3cge1xuICAgIHByaXZhdGUgdGltZTAgPSAwXG4gICAgcHJpdmF0ZSByZWFkb25seSBzcHJpdGU6IFNwcml0ZVxuXG4gICAgY29uc3RydWN0b3IoY29vcmRzOiBDb29yZHMpIHtcbiAgICAgICAgY29uc3Qgc3ByaXRlID0gbmV3IFNwcml0ZShjb29yZHMsIFwic3ByaXRlLWNvd1wiKVxuICAgICAgICB0aGlzLnNwcml0ZSA9IHNwcml0ZVxuICAgICAgICBzcHJpdGUudXBkYXRlKHtcbiAgICAgICAgICAgIHg6IDE5MjAgLyAyLFxuICAgICAgICAgICAgeTogKDIgKiAxMDgwKSAvIDMsXG4gICAgICAgICAgICB3aWR0aDogMjU2LFxuICAgICAgICAgICAgaGVpZ2h0OiAxMjgsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwcml0ZS54XG4gICAgfVxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGUueVxuICAgIH1cblxuICAgIHJlc2V0KHN0YXJ0aW5nVGltZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudGltZTAgPSBzdGFydGluZ1RpbWVcbiAgICAgICAgdGhpcy5zcHJpdGUudXBkYXRlKHsgc2NhbGVYOiAxLCBzY2FsZVk6IDEgfSlcbiAgICB9XG5cbiAgICB1cGRhdGUodGltZTogbnVtYmVyLCBkZWxheTogbnVtYmVyKSB7XG4gICAgICAgIHRpbWUgLT0gdGhpcy50aW1lMFxuICAgICAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpc1xuICAgICAgICBjb25zdCBXID0gMTkyMFxuICAgICAgICBjb25zdCBsYXBzZSA9IDQwMDBcbiAgICAgICAgY29uc3QgdCA9ICh0aW1lICUgbGFwc2UpIC8gbGFwc2VcbiAgICAgICAgY29uc3QgeCA9IDIgKiBXICogdCAtIFcgLyAyXG4gICAgICAgIGNvbnN0IGFuZyA9IHRpbWUgKiAwLjAwNVxuICAgICAgICBjb25zdCB5ID1cbiAgICAgICAgICAgICgyICogMTA4MCkgLyAzIC1cbiAgICAgICAgICAgIDIgKiAoc3ByaXRlLmhlaWdodCAqIE1hdGguYWJzKE1hdGguc2luKGFuZykpIC0gc3ByaXRlLmhlaWdodClcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBNYXRoLmNvcyhhbmcgKiAyKSAqIDMwXG4gICAgICAgIHNwcml0ZS51cGRhdGUoe1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdWJkdWUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHQ6IG51bWJlciwgZDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gMSAtIHQgKiAwLjlcbiAgICAgICAgdGhpcy5zcHJpdGUudXBkYXRlKHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgcm90YXRpb246IHRoaXMuc3ByaXRlLnJvdGF0aW9uICsgZCAqIDAuNSxcbiAgICAgICAgICAgIHNjYWxlWDogc2NhbGUsXG4gICAgICAgICAgICBzY2FsZVk6IHNjYWxlLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGhpdCh4U2hpcDogbnVtYmVyLCB5U2hpcDogbnVtYmVyLCByb3RhdGlvbjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IHhDb3cgPSBzcHJpdGUueFxuICAgICAgICBjb25zdCB5Q293ID0gc3ByaXRlLnlcbiAgICAgICAgY29uc3QgYW5nID0gZGVnMnJhZChyb3RhdGlvbilcbiAgICAgICAgY29uc3QgdnggPSAtTWF0aC5zaW4oYW5nKVxuICAgICAgICBjb25zdCB2eSA9IE1hdGguY29zKGFuZylcbiAgICAgICAgY29uc3QgQU14ID0geENvdyAtIHhTaGlwXG4gICAgICAgIGNvbnN0IEFNeSA9IHlDb3cgLSB5U2hpcFxuICAgICAgICBjb25zdCBkaXN0ID0gTWF0aC5hYnMoQU14ICogdnkgLSBBTXkgKiB2eClcbiAgICAgICAgcmV0dXJuIGRpc3QgPCBzcHJpdGUuaGVpZ2h0ICogMC4yXG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHBpY2s8VD4oYXJyOiBUW10pOiBUIHtcbiAgICBjb25zdCBpID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aClcbiAgICByZXR1cm4gYXJyW2ldXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgSW50ZW50aW9uIH0gZnJvbSBcIi4vaW50ZW50aW9uXCJcbmltcG9ydCB7IENvb3JkcyB9IGZyb20gXCJAL2Nvb3Jkc1wiXG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tIFwiQC9lbmdpbmUvc3ByaXRlXCJcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIkAvdXRpbHMvY2FsY1wiXG5pbXBvcnQgeyBFbmVyZ3lCYXIgfSBmcm9tIFwiLi9lbmVyZ3ktYmFyXCJcbmltcG9ydCB7IGdvdG8gfSBmcm9tIFwiQC9hcHBcIlxuaW1wb3J0IHsgQ293IH0gZnJvbSBcIi4vY293XCJcbmltcG9ydCB7IHBpY2sgfSBmcm9tIFwiQC91dGlscy9hcnJheVwiXG5cbmNvbnN0IE1BWF9FTkVSR1kgPSAxMDAwMFxuXG5jb25zdCBWQUNIRSA9IFtcInZhY2hlXCIsIFwidmFjaGVcIiwgXCJ2YWNoZVwiLCBcInZhY2hlXCIsIFwiYmVzdGlvbGVcIl1cbmNvbnN0IE1BTkdFID0gW1xuICAgIFwiYWJzb3Jiw6llXCIsXG4gICAgXCJhdHRyYXDDqWVcIixcbiAgICBcImF2YWzDqWVcIixcbiAgICBcImNhcHR1csOpZVwiLFxuICAgIFwiZMOpcGVjw6llXCIsXG4gICAgXCJkw6lzaW50w6lncsOpZVwiLFxuICAgIFwiZGlnw6lyw6llXCIsXG4gICAgXCJlbXByaXNvbm7DqWVcIixcbiAgICBcImVuZ2xvdXRpZVwiLFxuICAgIFwibGlxdWlkw6llXCIsXG4gICAgXCJtYW5nw6llXCIsXG4gICAgXCJwdWx2w6lyaXPDqWVcIixcbl1cblxuZXhwb3J0IGNsYXNzIEVuZ2luZSB7XG4gICAgcHVibGljIHN0YXRpYyB1c2UoKTogRW5naW5lIHtcbiAgICAgICAgY29uc3QgcmVmRW5naW5lID0gUmVhY3QudXNlUmVmPEVuZ2luZSB8IG51bGw+KG51bGwpXG4gICAgICAgIGlmICghcmVmRW5naW5lLmN1cnJlbnQpIHJlZkVuZ2luZS5jdXJyZW50ID0gbmV3IEVuZ2luZSgpXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbmdpbmUgPSByZWZFbmdpbmUuY3VycmVudFxuICAgICAgICAgICAgaWYgKCFlbmdpbmUpIHJldHVyblxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1PVU5UXCIpXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVU5NT1VOVFwiKVxuICAgICAgICAgICAgICAgIGVuZ2luZS5kZXRhY2goKVxuICAgICAgICAgICAgICAgIHJlZkVuZ2luZS5jdXJyZW50ID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgcmV0dXJuIHJlZkVuZ2luZS5jdXJyZW50XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbnRlbnRpb24gPSBuZXcgSW50ZW50aW9uKClcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvb3JkczogQ29vcmRzXG4gICAgcHJpdmF0ZSByZWFkb25seSBzcGFjZXNoaXA6IFNwcml0ZVxuICAgIHByaXZhdGUgcmVhZG9ubHkgY293OiBDb3dcbiAgICBwcml2YXRlIG1vZGU6IFwicnVuXCIgfCBcImRpZVwiIHwgXCJlYXRcIiA9IFwicnVuXCJcbiAgICBwcml2YXRlIHBhdXNlQWNjdW11bGF0b3IgPSAwXG4gICAgcHJpdmF0ZSBlbmVyZ3kgPSBuZXcgRW5lcmd5QmFyKClcbiAgICBwcml2YXRlIHRpbWUgPSAwXG4gICAgcHJpdmF0ZSBsYXNlciA9IDBcbiAgICBwcml2YXRlIGRpZVRpbWUgPSAwXG4gICAgcHJpdmF0ZSBkaWVZID0gMFxuICAgIHByaXZhdGUgZWF0WDAgPSAwXG4gICAgcHJpdmF0ZSBlYXRZMCA9IDBcbiAgICBwcml2YXRlIGVhdFgxID0gMFxuICAgIHByaXZhdGUgZWF0WTEgPSAwXG4gICAgcHJpdmF0ZSBlYXRUaW1lID0gMFxuICAgIHByaXZhdGUgYW5pbWF0aW9uRnJhbWUgPSAwXG4gICAgcHJpdmF0ZSBfc2NvcmUgPSAwXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3QgY29vcmRzID0gbmV3IENvb3JkcygpXG4gICAgICAgIHRoaXMuY293ID0gbmV3IENvdyhjb29yZHMpXG4gICAgICAgIHRoaXMuY29vcmRzID0gY29vcmRzXG4gICAgICAgIHRoaXMuc3BhY2VzaGlwID0gbmV3IFNwcml0ZShjb29yZHMsIFwic3ByaXRlLXNwYWNlc2hpcFwiKVxuICAgICAgICB0aGlzLnNwYWNlc2hpcC51cGRhdGUoe1xuICAgICAgICAgICAgeDogMTkyMCAvIDIsXG4gICAgICAgICAgICB5OiAxMDgwIC8gMyxcbiAgICAgICAgICAgIHdpZHRoOiA1MTIsXG4gICAgICAgICAgICBoZWlnaHQ6IDI1NixcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXQgc2NvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY29yZVxuICAgIH1cbiAgICBzZXQgc2NvcmUodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9zY29yZSA9IHZhbHVlXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2NvcmVcIilcbiAgICAgICAgY29uc3QgcyA9IHZhbHVlID4gMSA/IFwic1wiIDogXCJcIlxuICAgICAgICBpZiAoZGl2KVxuICAgICAgICAgICAgZGl2LnRleHRDb250ZW50ID0gYCR7cGljayhWQUNIRSl9JHtzfSAke3BpY2soTUFOR0UpfSR7c30gOiAke3ZhbHVlfWBcbiAgICB9XG5cbiAgICByZWFkb25seSBhdHRhY2ggPSAoY29udGFpbmVyOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFUVEFDSFwiKVxuICAgICAgICB0aGlzLmludGVudGlvbi5hdHRhY2goKVxuICAgICAgICB0aGlzLmNvb3Jkcy5hdHRhY2goY29udGFpbmVyKVxuICAgICAgICB0aGlzLnNjaGVkdWxlTmV4dEZyYW1lKClcbiAgICAgICAgdGhpcy5lbmVyZ3kucmVzZXQoKVxuICAgICAgICB0aGlzLnNjb3JlID0gMFxuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJERVRBQ0hcIilcbiAgICAgICAgdGhpcy5pbnRlbnRpb24uZGV0YWNoKClcbiAgICAgICAgdGhpcy5jb29yZHMuZGV0YWNoKClcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWUgPSAwXG4gICAgfVxuXG4gICAgc2V0TGFzZXJPcGFjaXR5KG9wYWNpdHk6IG51bWJlcikge1xuICAgICAgICBpZiAob3BhY2l0eSA9PT0gdGhpcy5sYXNlcikgcmV0dXJuXG5cbiAgICAgICAgdGhpcy5sYXNlciA9IG9wYWNpdHlcbiAgICAgICAgY29uc3QgbGFzZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwcml0ZS1zcGFjZXNoaXAtbGFzZXJcIilcbiAgICAgICAgaWYgKCFsYXNlcikgcmV0dXJuXG5cbiAgICAgICAgbGFzZXIuc3R5bGUub3BhY2l0eSA9IGAke29wYWNpdHl9YFxuICAgIH1cblxuICAgIHByaXZhdGUgc2NoZWR1bGVOZXh0RnJhbWUoKSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lKVxuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm5leHRGcmFtZSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG5leHRGcmFtZSA9ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU5leHRGcmFtZSgpXG4gICAgICAgIGxldCBkZWxheSA9IDBcbiAgICAgICAgaWYgKHRoaXMudGltZSA+IDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gdGltZSAtIHRoaXMudGltZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZSA9IHRpbWVcbiAgICAgICAgdGltZSAtPSB0aGlzLnBhdXNlQWNjdW11bGF0b3JcblxuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgICAgICAgY2FzZSBcInJ1blwiOlxuICAgICAgICAgICAgICAgIHRoaXMuZG9SdW4odGltZSwgZGVsYXkpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgXCJkaWVcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmRvRGllKHRpbWUsIGRlbGF5KVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiZWF0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5kb0VhdCh0aW1lLCBkZWxheSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkb1J1bih0aW1lOiBudW1iZXIsIGRlbGF5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYW5nbGUgPSA0MCAqIE1hdGguc2luKHRpbWUgKiAyZS0zKVxuICAgICAgICBjb25zdCB7IGludGVudGlvbiwgc3BhY2VzaGlwLCBjb3cgfSA9IHRoaXNcbiAgICAgICAgbGV0IHggPSBzcGFjZXNoaXAueFxuICAgICAgICBjb25zdCBzcGVlZCA9IDNcbiAgICAgICAgaWYgKGludGVudGlvbi53YW50c1RvR29SaWdodCgpKSB4ICs9IGRlbGF5ICogc3BlZWRcbiAgICAgICAgaWYgKGludGVudGlvbi53YW50c1RvR29MZWZ0KCkpIHggLT0gZGVsYXkgKiBzcGVlZFxuICAgICAgICB4ID1cbiAgICAgICAgICAgIDE5MjAgLyAyICtcbiAgICAgICAgICAgIChNYXRoLmNvcyh0aW1lICogMS42MzNlLTMpICsgTWF0aC5zaW4odGltZSAqIDIuMTA0ZS0zKSkgKiAyNTBcbiAgICAgICAgdGhpcy5zZXRMYXNlck9wYWNpdHkoaW50ZW50aW9uLndhbnRzVG9TdWJkdWUoKSA/IDEgOiAwKVxuICAgICAgICBzcGFjZXNoaXAudXBkYXRlKHtcbiAgICAgICAgICAgIHg6IGNsYW1wKHgsIDMwMCwgMTYyMCksXG4gICAgICAgICAgICByb3RhdGlvbjogYW5nbGUsXG4gICAgICAgIH0pXG4gICAgICAgIGxldCBlbmVyZ3lMb3NzID0gZGVsYXkgKiAwLjRcbiAgICAgICAgaWYgKGludGVudGlvbi53YW50c1RvR29MZWZ0KCkgfHwgaW50ZW50aW9uLndhbnRzVG9Hb1JpZ2h0KCkpXG4gICAgICAgICAgICBlbmVyZ3lMb3NzICo9IDJcbiAgICAgICAgaWYgKGludGVudGlvbi53YW50c1RvU3ViZHVlKCkpIHtcbiAgICAgICAgICAgIGVuZXJneUxvc3MgKj0gMTBcbiAgICAgICAgICAgIGlmIChjb3cuaGl0KHNwYWNlc2hpcC54LCBzcGFjZXNoaXAueSwgc3BhY2VzaGlwLnJvdGF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZSA9IFwiZWF0XCJcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFgwID0gY293LnhcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFkwID0gY293LnlcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFgxID0gc3BhY2VzaGlwLnhcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFkxID0gc3BhY2VzaGlwLnlcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFRpbWUgPSB0aW1lXG4gICAgICAgICAgICAgICAgdGhpcy5zY29yZSsrXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmVyZ3kuc3ViKGVuZXJneUxvc3MpXG4gICAgICAgIGlmICh0aGlzLmVuZXJneS52YWx1ZSA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBcImRpZVwiXG4gICAgICAgICAgICB0aGlzLmRpZVRpbWUgPSB0aW1lXG4gICAgICAgICAgICB0aGlzLmRpZVkgPSBzcGFjZXNoaXAueVxuICAgICAgICAgICAgdGhpcy5zZXRMYXNlck9wYWNpdHkoMClcbiAgICAgICAgfVxuICAgICAgICBjb3cudXBkYXRlKHRpbWUsIGRlbGF5KVxuICAgIH1cblxuICAgIHByaXZhdGUgZG9EaWUodGltZTogbnVtYmVyLCBkZWxheTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgc3BhY2VzaGlwIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gc3BhY2VzaGlwLnJvdGF0aW9uICsgZGVsYXkgKiAwLjVcbiAgICAgICAgY29uc3QgdCA9IHRpbWUgLSB0aGlzLmRpZVRpbWUgLSAyMDBcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZGllWSArICgodCAqIHQgLSA0MDAwMCkgKiAyMDApIC8gNDAwMDBcbiAgICAgICAgc3BhY2VzaGlwLnVwZGF0ZSh7IHJvdGF0aW9uLCB5IH0pXG4gICAgICAgIGlmICh0aW1lIC0gdGhpcy5kaWVUaW1lID4gMTAwMCkge1xuICAgICAgICAgICAgZ290byhcIi9kZWFkXCIpXG4gICAgICAgICAgICB0aGlzLmRldGFjaCgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb3cudXBkYXRlKHRpbWUsIGRlbGF5KVxuICAgIH1cblxuICAgIHByaXZhdGUgZG9FYXQodGltZTogbnVtYmVyLCBkZWxheTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLm1pbigxLCAodGltZSAtIHRoaXMuZWF0VGltZSkgLyAxMDAwKVxuICAgICAgICBjb25zdCB4ID0gKHRoaXMuZWF0WDEgLSB0aGlzLmVhdFgwKSAqIHQgKyB0aGlzLmVhdFgwXG4gICAgICAgIGNvbnN0IHkgPSAodGhpcy5lYXRZMSAtIHRoaXMuZWF0WTApICogdCArIHRoaXMuZWF0WTBcbiAgICAgICAgdGhpcy5jb3cuc3ViZHVlKHgsIHksIHQsIGRlbGF5KVxuICAgICAgICBpZiAodCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gXCJydW5cIlxuICAgICAgICAgICAgdGhpcy5wYXVzZUFjY3VtdWxhdG9yICs9IHRpbWUgLSB0aGlzLmVhdFRpbWVcbiAgICAgICAgICAgIHRoaXMuY293LnJlc2V0KHRpbWUpXG4gICAgICAgICAgICB0aGlzLmVuZXJneS5hZGQoMmUzKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9MYW5kc2NhcGVWaWV3Lm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9MYW5kc2NhcGVWaWV3Lm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9MYW5kc2NhcGVWaWV3Lm1vZHVsZS5jc3NcIlxuXG5leHBvcnQgaW50ZXJmYWNlIExhbmRzY2FwZVZpZXdQcm9wcyB7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXG4gICAgb25Nb3VudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWRcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExhbmRzY2FwZVZpZXcoe1xuICAgIGNsYXNzTmFtZSxcbiAgICBvbk1vdW50LFxuICAgIGNoaWxkcmVuLFxufTogTGFuZHNjYXBlVmlld1Byb3BzKSB7XG4gICAgY29uc3QgcmVmUGFyZW50ID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbClcbiAgICBjb25zdCByZWZDaGlsZCA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpXG4gICAgdXNlUmVzaXplT2JzZXJ2ZXIocmVmUGFyZW50LCByZWZDaGlsZClcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSByZWZQYXJlbnQuY3VycmVudFxuICAgICAgICBpZiAocGFyZW50KSBvbk1vdW50KHBhcmVudClcbiAgICB9LCBbcmVmUGFyZW50LmN1cnJlbnRdKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2pvaW4oY2xhc3NOYW1lLCBzdHlsZXMucGFyZW50KX0gcmVmPXtyZWZQYXJlbnR9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaGlsZH0gcmVmPXtyZWZDaGlsZH0+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZnVuY3Rpb24gam9pbiguLi5jbGFzc2VzOiB1bmtub3duW10pOiBzdHJpbmcge1xuICAgIHJldHVybiBjbGFzc2VzLmZpbHRlcigoY2xzKSA9PiB0eXBlb2YgY2xzID09PSBcInN0cmluZ1wiKS5qb2luKFwiIFwiKVxufVxuXG5mdW5jdGlvbiB1c2VSZXNpemVPYnNlcnZlcihcbiAgICByZWZQYXJlbnQ6IHsgY3VycmVudDogSFRNTERpdkVsZW1lbnQgfCBudWxsIH0sXG4gICAgcmVmQ2hpbGQ6IHsgY3VycmVudDogSFRNTERpdkVsZW1lbnQgfCBudWxsIH1cbikge1xuICAgIGNvbnN0IHJlZk9ic2VydmVyID0gUmVhY3QudXNlUmVmPFJlc2l6ZU9ic2VydmVyIHwgbnVsbD4obnVsbClcbiAgICBpZiAoIXJlZk9ic2VydmVyLmN1cnJlbnQpIHtcbiAgICAgICAgcmVmT2JzZXJ2ZXIuY3VycmVudCA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gcmVmUGFyZW50LmN1cnJlbnRcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcmVmQ2hpbGQuY3VycmVudFxuICAgICAgICAgICAgaWYgKCFwYXJlbnQgfHwgIWNoaWxkKSByZXR1cm5cblxuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZW50cnkudGFyZ2V0XG4gICAgICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID4gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9ydHJhaXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJQT1JUUkFJVFwiKVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc3R5bGUud2lkdGggPSBgJHtoZWlnaHR9cHhgXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS5oZWlnaHQgPSBgJHt3aWR0aH1weGBcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7d2lkdGh9cHgpIHJvdGF0ZSg5MGRlZylgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTGFuZHNjYXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTEFORFNDQVBFXCIpXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc3R5bGUudHJhbnNmb3JtID0gYG5vbmVgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICBcIvCfmoAgW0xhbmRzY2FwZVZpZXddIHdpZHRoLCBoZWlnaHQgPSBcIixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgWy4uLnBhcmVudC5jbGFzc0xpc3RdXG4gICAgICAgICAgICAgICAgKSAvLyBARklYTUU6IFJlbW92ZSB0aGlzIGxpbmUgd3JpdHRlbiBvbiAyMDI1LTAyLTI1IGF0IDExOjI0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpdiA9IHJlZlBhcmVudC5jdXJyZW50XG4gICAgICAgIGlmICghZGl2KSByZXR1cm5cblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IHJlZk9ic2VydmVyLmN1cnJlbnRcbiAgICAgICAgaWYgKCFvYnNlcnZlcikgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZGl2LnBhcmVudEVsZW1lbnRcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHJldHVyblxuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKVxuICAgICAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIudW5vYnNlcnZlKGNvbnRhaW5lcilcbiAgICB9LCBbcmVmUGFyZW50LmN1cnJlbnRdKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9WaWV3U3ByaXRlLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9WaWV3U3ByaXRlLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9WaWV3U3ByaXRlLm1vZHVsZS5jc3NcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdTcHJpdGVQcm9wcyB7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXG4gICAgaWQ6IHN0cmluZ1xuICAgIHVybDogc3RyaW5nXG4gICAgekluZGV4OiBudW1iZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVmlld1Nwcml0ZSh7XG4gICAgY2xhc3NOYW1lLFxuICAgIGlkLFxuICAgIHVybCxcbiAgICB6SW5kZXgsXG59OiBWaWV3U3ByaXRlUHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2pvaW4oY2xhc3NOYW1lLCBzdHlsZXMuc3ByaXRlKX1cbiAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgXCItLWN1c3RvbS11cmxcIjogYHVybCgke3VybH0pYCxcbiAgICAgICAgICAgICAgICBcIi0tY3VzdG9tLXotaW5kZXhcIjogekluZGV4LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICApXG59XG5cbmZ1bmN0aW9uIGpvaW4oLi4uY2xhc3NlczogdW5rbm93bltdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY2xhc3Nlcy5maWx0ZXIoKGNscykgPT4gdHlwZW9mIGNscyA9PT0gXCJzdHJpbmdcIikuam9pbihcIiBcIilcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vVmlld0VuZXJneUJhci5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vVmlld0VuZXJneUJhci5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vVmlld0VuZXJneUJhci5tb2R1bGUuY3NzXCJcblxuZXhwb3J0IGludGVyZmFjZSBWaWV3RW5lcmd5QmFyUHJvcHMge1xuICAgIGNsYXNzTmFtZT86IHN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWaWV3RW5lcmd5QmFyKHsgY2xhc3NOYW1lIH06IFZpZXdFbmVyZ3lCYXJQcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtqb2luKGNsYXNzTmFtZSwgc3R5bGVzLnZpZXdFbmVyZ3lCYXIpfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubGV2ZWx9IGlkPVwiZW5lcmd5LWxldmVsXCIgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYm9yZGVyfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmZ1bmN0aW9uIGpvaW4oLi4uY2xhc3NlczogdW5rbm93bltdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY2xhc3Nlcy5maWx0ZXIoKGNscykgPT4gdHlwZW9mIGNscyA9PT0gXCJzdHJpbmdcIikuam9pbihcIiBcIilcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vcGFnZS5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vcGFnZS5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tIFwiQC9lbmdpbmUvZW5naW5lXCJcbmltcG9ydCBMYW5kc2NhcGVWaWV3IGZyb20gXCJAL2NvbXBvbmVudHMvTGFuZHNjYXBlVmlld1wiXG5pbXBvcnQgU3ByaXRlIGZyb20gXCJAL2NvbXBvbmVudHMvVmlld1Nwcml0ZVwiXG5pbXBvcnQgVmlld0VuZXJneUJhciBmcm9tIFwiQC9jb21wb25lbnRzL1ZpZXdFbmVyZ3lCYXJcIlxuXG5pbXBvcnQgU3BhY2VzaGlwVVJMIGZyb20gXCJAL2dmeC9zcGFjZXNoaXAud2VicFwiXG5pbXBvcnQgQ293VVJMIGZyb20gXCJAL2dmeC9jb3cud2VicFwiXG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vcGFnZS5tb2R1bGUuY3NzXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZSgpIHtcbiAgICBjb25zdCByZWZDb250YWluZXIgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKVxuICAgIGNvbnN0IGVuZ2luZSA9IEVuZ2luZS51c2UoKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPExhbmRzY2FwZVZpZXcgb25Nb3VudD17ZW5naW5lLmF0dGFjaH0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnBhZ2V9PlxuICAgICAgICAgICAgICAgIHtbMCwgMSwgMiwgM10ubWFwKChpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5oaWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IGAke01hdGguc3FydChpbmRleCkgKiAxMH12bWluYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IGAkezEwICogKDkgLSBpbmRleCl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgkezEgLSBpbmRleCAqIDAuMn0pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7MyArIGluZGV4ICogNS4wfXNgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogYGJyaWdodG5lc3MoJHtpbmRleCAqIDAuMyArIDAuMX0pYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInNwcml0ZS1zcGFjZXNoaXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInNwcml0ZS1zcGFjZXNoaXAtbGFzZXJcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8U3ByaXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cInNwcml0ZS1zcGFjZXNoaXAtbWFpblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1NwYWNlc2hpcFVSTH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleD17ODF9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPFNwcml0ZSBpZD1cInNwcml0ZS1jb3dcIiB1cmw9e0Nvd1VSTH0gekluZGV4PXs4MH0gLz5cbiAgICAgICAgICAgICAgICA8Vmlld0VuZXJneUJhciAvPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJzY29yZVwiIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9MYW5kc2NhcGVWaWV3PlxuICAgIClcbn1cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImxvY2FscyIsIkludGVudGlvbiIsImludGVudFJpZ2h0IiwiaW50ZW50TGVmdCIsImludGVudFN1YmR1Y3Rpb24iLCJoYW5kbGVQb2ludGVyRG93biIsImV2dCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwidGhpcyIsImhhbmRsZVBvaW50ZXJVcCIsImhhbmRsZUNvbnRleHRNZW51IiwiaGFuZGxlS2V5RG93biIsInRpbWUiLCJEYXRlIiwibm93Iiwia2V5IiwiaGFuZGxlS2V5VXAiLCJhdHRhY2giLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJib2R5IiwiZGV0YWNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIndhbnRzVG9Hb1JpZ2h0Iiwid2FudHNUb0dvTGVmdCIsIndhbnRzVG9TdWJkdWUiLCJDb29yZHMiLCJjb25zdHJ1Y3RvciIsImxvZ2ljYWxXaWR0aCIsImxvZ2ljYWxIZWlnaHQiLCJlbGVtZW50IiwidHJhbnNmb3JtIiwieCIsInkiLCJzY2FsZSIsImhhbmRsZVJlc2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIk1hdGgiLCJtYXgiLCJoZWlnaHQiLCJtaW4iLCJzY2FsZVciLCJzY2FsZUgiLCJvYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwibG9naWNhbFgiLCJsb2dpY2FsWSIsImhpZ2h0Iiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIlNwcml0ZSIsImNvb3JkcyIsImVsZW1lbnRJZCIsInN0YXR1cyIsInJvdGF0aW9uIiwic2NhbGVYIiwic2NhbGVZIiwidXBkYXRlIiwiZGF0YSIsInN0eWxlIiwibGVmdCIsInRvcCIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImVycm9yIiwiY2xhbXAiLCJ2YWx1ZSIsIk1BWF9FTkVSR1kiLCJFbmVyZ3lCYXIiLCJfdmFsdWUiLCJjbGFtcGVkVmFsdWUiLCJkaXYiLCJwZXJjZW50IiwicmVzZXQiLCJhZGQiLCJkZWx0YSIsInN1YiIsIkNvdyIsInRpbWUwIiwic3ByaXRlIiwic3RhcnRpbmdUaW1lIiwiZGVsYXkiLCJXIiwiYW5nIiwiYWJzIiwic2luIiwiY29zIiwic3ViZHVlIiwidCIsImQiLCJoaXQiLCJ4U2hpcCIsInlTaGlwIiwieENvdyIsInlDb3ciLCJQSSIsInZ4IiwidnkiLCJBTXgiLCJBTXkiLCJwaWNrIiwiYXJyIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJWQUNIRSIsIk1BTkdFIiwiRW5naW5lIiwiaW50ZW50aW9uIiwibW9kZSIsInBhdXNlQWNjdW11bGF0b3IiLCJlbmVyZ3kiLCJsYXNlciIsImRpZVRpbWUiLCJkaWVZIiwiZWF0WDAiLCJlYXRZMCIsImVhdFgxIiwiZWF0WTEiLCJlYXRUaW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJfc2NvcmUiLCJjb250YWluZXIiLCJsb2ciLCJzY2hlZHVsZU5leHRGcmFtZSIsInNjb3JlIiwibmV4dEZyYW1lIiwiZG9SdW4iLCJkb0RpZSIsImRvRWF0IiwiY293Iiwic3BhY2VzaGlwIiwidXNlIiwicmVmRW5naW5lIiwiY3VycmVudCIsImVuZ2luZSIsInMiLCJ0ZXh0Q29udGVudCIsIndpbmRvdyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0TGFzZXJPcGFjaXR5Iiwib3BhY2l0eSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFuZ2xlIiwiZW5lcmd5TG9zcyIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJMYW5kc2NhcGVWaWV3IiwiY2xhc3NOYW1lIiwib25Nb3VudCIsImNoaWxkcmVuIiwicmVmUGFyZW50IiwicmVmQ2hpbGQiLCJyZWZPYnNlcnZlciIsImVudHJpZXMiLCJwYXJlbnQiLCJjaGlsZCIsImVudHJ5IiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwicGFyZW50RWxlbWVudCIsInVzZVJlc2l6ZU9ic2VydmVyIiwiam9pbiIsInJlZiIsImNsYXNzZXMiLCJmaWx0ZXIiLCJjbHMiLCJWaWV3U3ByaXRlIiwidXJsIiwiekluZGV4IiwiVmlld0VuZXJneUJhciIsInZpZXdFbmVyZ3lCYXIiLCJsZXZlbCIsImJvcmRlciIsIlBhZ2UiLCJwYWdlIiwibWFwIiwiaW5kZXgiLCJoaWxsIiwiYm90dG9tIiwic3FydCIsImFuaW1hdGlvbkR1cmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==