"use strict";(self.webpackChunkansy_2025=self.webpackChunkansy_2025||[]).push([[212],{108:(n,t,e)=>{e.d(t,{A:()=>a});var o=e(8519),i=e.n(o),s=e(3645),r=e.n(s)()(i());r.push([n.id,".src-components-Tgd-tgd-module_Tgd_OOp4wr {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.src-components-Tgd-tgd-module_scene_Y7GvnV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.src-components-Tgd-tgd-module_gizmo_xdmsjj {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO.src-components-Tgd-tgd-module_hide_c5quHT {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > svg {\n    animation-name: src-components-Tgd-tgd-module_anim__5xUBz;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes src-components-Tgd-tgd-module_anim__5xUBz {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}","",{version:3,sources:["webpack://./src/components/Tgd/tgd.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,4BAA4B;IAC5B,UAAU;IACV,SAAS;IACT,0CAA0C;IAC1C,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,yDAAoB;IACpB,sBAAsB;IACtB,mCAAmC;IACnC,8BAA8B;AAClC;;AAEA;IACI,KAAK,YAAY,EAAE,oBAAoB,CAAC;IACxC,OAAO,UAAU,EAAE,mBAAmB;AAC1C",sourcesContent:[".Tgd {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.scene {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.gizmo {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.spinner {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.spinner.hide {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.spinner > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.spinner > svg {\n    animation-name: anim;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes anim {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}"],sourceRoot:""}]),r.locals={Tgd:"src-components-Tgd-tgd-module_Tgd_OOp4wr",scene:"src-components-Tgd-tgd-module_scene_Y7GvnV",gizmo:"src-components-Tgd-tgd-module_gizmo_xdmsjj",spinner:"src-components-Tgd-tgd-module_spinner_xcGEuO",hide:"src-components-Tgd-tgd-module_hide_c5quHT",anim:"src-components-Tgd-tgd-module_anim__5xUBz"};const a=r},642:(n,t,e)=>{e.d(t,{A:()=>a});var o=e(8519),i=e.n(o),s=e(3645),r=e.n(s)()(i());r.push([n.id,".src-app-03-play-page-module_play__1TKhV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.src-app-03-play-page-module_startScreen_o4kZW0 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.src-app-03-play-page-module_startButton_PzpJRF {\n    font-size: 6vw;\n}\n","",{version:3,sources:["webpack://./src/app/03/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".play {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.startScreen {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.startButton {\n    font-size: 6vw;\n}\n"],sourceRoot:""}]),r.locals={play:"src-app-03-play-page-module_play__1TKhV",startScreen:"src-app-03-play-page-module_startScreen_o4kZW0",startButton:"src-app-03-play-page-module_startButton_PzpJRF"};const a=r},4335:(n,t,e)=>{e.d(t,{A:()=>o});const o={intro1:"Tu es le meilleur Anselm!\n\nLa soucoupe est maintenant pleine de carburant et on va pouvoir aller sur la Lune chercher un vaisseau plus puissant pour sortir du systÃ¨me solaire.",intro2:"Pour rester discrÄ“ts, on l'a cachÃ© dans un cratÃ¨re.\n    \n    Il va falloir faire preuve d'un peu d'adresse pour naviguer lÃ -dedans.",start:"C'est parti !"}},6228:(n,t,e)=>{e.r(t),e.d(t,{default:()=>G});var o=e(6070),i=e(758),s=e(2235),r=e(3713),a=e(6203),c=e(43),l=e.n(c),u=e(5920),A=e.n(u),d=e(3004),h=e.n(d),m=e(7419),p=e.n(m),g=e(1663),f=e.n(g),v=e(1612),b=e.n(v),I=e(108),C={};C.styleTagTransform=b(),C.setAttributes=p(),C.insert=h().bind(null,"head"),C.domAPI=A(),C.insertStyleElement=f(),l()(I.A,C);const x=I.A&&I.A.locals?I.A.locals:void 0;function B(...n){return n.filter(r.Kg).join(" ")}var w=function(n,t,e,o){return new(e||(e=Promise))((function(i,s){function r(n){try{c(o.next(n))}catch(n){s(n)}}function a(n){try{c(o.throw(n))}catch(n){s(n)}}function c(n){var t;n.done?i(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(r,a)}c((o=o.apply(n,t||[])).next())}))};function y({className:n,options:t,onReady:e,assets:c,children:l,gizmo:u=!1}){const[,A]=i.useState(!1),d=i.useRef(null),h=i.useRef(null),m=i.useRef(null),[p,g]=i.useState(!0);return i.useEffect((()=>{const n=h.current,t=d.current;if(!n||!t)return;const e=new ResizeObserver((()=>t.paint()));return e.observe(n),n.requestFullscreen||(n.requestFullscreen=n.webkitRequestFullscreen),A(Boolean(n.requestFullscreen)),()=>e.unobserve(n)}),[d.current,h.current]),(0,o.jsxs)("div",{className:[n,x.Tgd].filter(r.Kg).join(" "),children:[(0,o.jsx)("canvas",{className:x.scene,ref:n=>{if(!n)return;if(h.current)return;h.current=n;const o=new s.tfp(n,t);d.current=o,o.inputs.keyboard.eventKeyPress.addListener((n=>{if("?"===n.key){const{camera:n}=o;n instanceof s.xNY&&console.log(`new TgdCameraPerspective({\n  fovy: ${n.fovy},\n  near: ${n.near},\n  far: ${n.far},\n  zoom: ${n.zoom},\n  transfo: {\n    distance: ${n.transfo.distance},\n    position: ${JSON.stringify(Array.from(n.transfo.position))},\n    orientation: ${JSON.stringify(Array.from(n.transfo.orientation))},\n    scale: ${JSON.stringify(Array.from(n.transfo.scale))}\n  }\n})`),console.log("Camera:",o.camera.getCurrentState())}})),g(!0),function(){return w(this,arguments,void 0,(function*({glb:n,data:t,image:e}={}){const o={glb:{},data:{},image:{}},i=[];return e&&Object.keys(e).forEach((n=>{i.push((()=>w(this,void 0,void 0,(function*(){const t=e[n];try{const e=yield(0,s.V_9)(t);e&&(o.image[n]=e)}catch(t){throw console.error(`Unable to load Image "${n}"!`),console.error(t),t}}))))})),n&&Object.keys(n).forEach((t=>{i.push((()=>w(this,void 0,void 0,(function*(){const e=n[t];try{const n=yield(0,s.TCe)(e);n&&(o.glb[t]=n)}catch(n){throw console.error(`Unable to load GLB "${t}"!`),console.error(n),n}}))))})),t&&Object.keys(t).forEach((n=>{i.push((()=>w(this,void 0,void 0,(function*(){const e=t[n],i=yield(0,s.vSU)(e);i&&(o.data[n]=i)}))))})),yield Promise.all(i.map((n=>n()))),o}))}(c).then((n=>{console.log("Ready!"),e(o,n),o.paint(),g(!1)})).catch((()=>g(!1)))}}),u&&(0,o.jsx)("canvas",{className:x.gizmo,ref:n=>{const t=new s.GbF({canvas:n});m.current=t,t.eventTipClick.addListener((({to:n})=>{const t=d.current;console.log("ðŸš€ [tgd] to, context =",n,t),t&&t.animSchedule({duration:.2,easingFunction:s.Wcc,action:(0,s.vRM)(t.camera,{orientation:n})})}));const e=d.current;e&&t.attachContext(e)}}),(0,o.jsxs)("div",{className:B(x.spinner,!p&&x.hide),children:[(0,o.jsx)(a.A,{}),(0,o.jsx)("div",{children:"Loading in progress..."})]})]})}var _=e(9715),E=e(7138),T={};T.styleTagTransform=b(),T.setAttributes=p(),T.insert=h().bind(null,"head"),T.domAPI=A(),T.insertStyleElement=f(),l()(E.A,T);const O=E.A&&E.A.locals?E.A.locals:void 0;function N({className:n,autoFocus:t,onClick:e,children:i}){return(0,o.jsx)("button",{type:"button",autoFocus:t,className:B(n,O.button),onClick:e,children:i})}class k extends s.tbm{constructor(n,t){super(),this.context=n,this._x=0,this.angle=0,this.speed=0,this.logicTime=-1,this.logicInteractive=(n,t)=>{const e=this.context.inputs.keyboard,o=this.context.inputs.pointer;let i=0;e.isDown("ArrowRight")||o.isTouching((({x:n})=>n>0))?(this.speed+=t,i=90*-t):e.isDown("ArrowLeft")||o.isTouching((({x:n})=>n<0))?(this.speed-=t,i=90*+t):(this.angle*=.9,this.speed*=0),this.angle=(0,s.O6b)(this.angle+i,-60,60),this.x+=2.5*this.speed*t,(-1===this.x&&this.speed<0||1===this.x&&this.speed>0)&&(this.speed=-this.speed),this.node.transfo.setEulerRotation(0,0,this.angle)},this.painterOpaque=(0,s.TB8)({data:t,context:n,node:"Saucer"}).painter,this.node=new s.buV({children:[new s.buV({children:[this.painterOpaque],logic(n){const{orientation:t}=this.transfo;t.reset(),this.transfo.orbitAroundX(.2*Math.sin(3.7*n)),this.transfo.orbitAroundY(n)}})]}),this.node.transfo.setPosition(0,0,0),this.mode="still",this.active=!1}set mode(n){const{node:t}=this;t.logic="interactive"===n?this.logicInteractive:void 0}delete(){this.node.delete()}paint(n,t){this.node.paint(n,t)}get x(){return this._x}set x(n){const[t]=this.node.transfo.scale;this._x=(0,s.O6b)(n,-1,1);const e=4*this._x;this.node.transfo.setPosition(e/t,0,0);const[,o,i]=this.context.camera.transfo.position;this.context.camera.transfo.setPosition(1.2*e,o,i)}}const M=new s.dLJ({uniforms:{uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4",uniMove:"float",uniLight:"float"},attributes:{attShift:"float",POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"},varying:{varNormal:"vec3",varLight:"float"},mainCode:["float SIZE = 100.0;","varNormal = mat3(uniModelViewMatrix) * NORMAL;","vec4 point = vec4(POSITION, 1.0);","point.z -= SIZE * attShift;","point.z += mod(uniMove, SIZE);","varLight = smoothstep(-200.0, 0.0, point.z) * uniLight;","gl_Position = uniProjectionMatrix * uniModelViewMatrix * point;"]}).code,S=new s.NI6({uniforms:{uniHue:"float"},varying:{varNormal:"vec3",varLight:"float"},functions:Object.assign({},(0,s.EPI)()),outputs:{FragColor:"vec4"},mainCode:["vec3 normal = normalize(varNormal);","vec3 color = shiftHue(vec3(0.5) + 0.5 * normal, uniHue);","color *= smoothstep(-1.0, 1.0, normal.z);","FragColor = vec4(color * varLight, 1.0);"]}).code;class j extends s.tbm{constructor(n,t){super(),this.context=n,this.light=0,this.move=0;const e=new s.a6X(n.gl,{vert:M,frag:S});this.prg=e;const o=new s.I9j({attShift:"float"},{divisor:1});o.set("attShift",new Float32Array([0,1,2,3,4]));const i=new s.I9j({POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"});t.setAttrib(i,"POSITION"),t.setAttrib(i,"NORMAL"),t.setAttrib(i,"TEXCOORD_0");const r=t.getMeshPrimitiveIndices();this.type=(0,s.Lmp)(r),this.count=r.length;const a=new s.ZV_(n.gl,e,[o,i],r);this.vao=a}delete(){this.prg.delete(),this.vao.delete()}paint(n,t){const{context:e,prg:o,vao:i,count:s,type:r,move:a}=this,{gl:c}=e;o.use(),o.uniformMatrix4fv("uniModelViewMatrix",e.camera.matrixModelView),o.uniformMatrix4fv("uniProjectionMatrix",e.camera.matrixProjection),o.uniform1f("uniMove",a),o.uniform1f("uniLight",this.light),o.uniform1f("uniHue",n),i.bind(),c.drawElementsInstanced(c.TRIANGLES,s,r,0,4),i.unbind()}}const L=new s.oao(.8,.6,.1,1);class P extends s.rBx{constructor(n={}){var t;super(),this.light=1,this.uniforms={uniModelViewMatrix:"mat4",uniLight:"float"},this.specularExponent=10,this.specularIntensity=.2;const e=n.color instanceof s.HTX?n.color:new s.oao(null!==(t=n.color)&&void 0!==t?t:L),o=!(e instanceof s.oao);this.texture=o?e:null;const i=new s.hNi(0,0,-1);this.fragmentShaderCode=[`vec3 uniLightDir = vec3(${i.join(", ")});`,`float uniSpecularIntensity = ${this.specularIntensity.toFixed(2)};`,`float uniSpecularExponent = ${this.specularExponent.toFixed(2)};`,"vec3 normal = normalize(varNormal);","float light = 1.0 - dot(normal, uniLightDir);",o?"vec4 color = texture(texDiffuse, varUV);":`vec4 color = vec4(${e.join(", ")});`,"vec3 normal2 = mat3(uniModelViewMatrix) * normal;","float spec = max(0.0, reflect(uniLightDir, normal2).z);","spec = pow(spec, uniSpecularExponent) * uniSpecularIntensity;","color = vec4(","  color.rgb * vec3(light) + vec3(spec),","  1.0",");","float ghost = smoothstep(0.5, 0.0, normal.z) * .3;","color.rgb += vec3(1.0 + normal.x, 1.0 + normal.y, 0.0) * ghost;","return color * vec4(vec3(uniLight), 1.0);"],this.vertexShaderCode=["varNormal = mat3(uniTransfoMatrix) * NORMAL;"],this.varyings={varNormal:"vec3"},o&&(this.vertexShaderCode.push("varUV = TEXCOORD_0;"),this.varyings.varUV="vec2",this.uniforms.texDiffuse="sampler2D")}setUniforms(n){const{texture:t,light:e}=this;t&&t.activate(0,n,"texDiffuse"),n.uniform1f("uniLight",e)}}class z extends s.tbm{constructor(n,t,e=0){super(),this.speed=100,this.time0=0,this.x=0,this.y=0,this.z=0,this.rotX=0,this.rotY=0,this.rotZ=0;const o=new s.dRj(n,{asset:t,material:({color:n})=>new P({color:n})});o.transfo.setPosition(0,0,0),this.painter=o,this.reset(e)}reset(n=0){this.x=(0,s.Qc2)(-1,1),this.y=(1-Math.abs(this.x))*(0,s.Qc2)(-3,3),this.z=-200*(1+n),this.rotX=(0,s.Qc2)(-240,240),this.rotY=(0,s.Qc2)(-240,240),this.rotZ=(0,s.Qc2)(-240,240),this.painter.transfo.setScale((0,s.Qc2)(.7,1.1),(0,s.Qc2)(.7,1.1),(0,s.Qc2)(.7,1.1))}delete(){}paint(n,t){const{painter:e,x:o,y:i,z:r,rotX:a,rotY:c,rotZ:l,speed:u,time0:A}=this;n-=A;const{transfo:d}=e,h=(0,s.BAd)(-200,0,r);e.material.light=h,d.setPosition(10*o,i,r),d.setEulerRotation(a*n,c*n,l*n),e.paint(n,t),this.z+=t*u,this.z>20&&this.reset()}}class R extends s.tbm{constructor(n,t){super(),this.obtacles=[new z(n,t),new z(n,t,.5),new z(n,t,.25),new z(n,t,.75)]}set speed(n){for(const t of this.obtacles)t.speed=n}set time0(n){for(const t of this.obtacles)t.time0=n}delete(){for(const n of this.obtacles)n.delete()}paint(n,t){for(const e of this.obtacles)e.paint(n,t)}}class Y extends s.buV{constructor(n,t){var e;const o=t.getNodeByNameOrThrow("Moon"),i=null!==(e=o.mesh)&&void 0!==e?e:0,r=new s.dRj(n,{asset:t,meshIndex:i}),a={};o.translation&&(a.position=new s.hNi(o.translation)),o.rotation&&(a.orientation=new s.HIE(o.rotation)),o.scale&&(a.scale=new s.hNi(o.scale)),super({children:[r],transfo:a})}}class W{constructor(n,t){this.moon=new Y(n,t.glb.moon),this.saucer=new k(n,t.glb.saucer),this.tunnel=new j(n,t.glb.tunnel),this.obstacles=new R(n,t.glb.obstacle);const{width:e,height:o}=t.image.imageNegZ,i=(0,s.lu8)(e,o),r=new s.$ff(n,{camera:n.camera,imagePosX:i,imagePosY:i,imagePosZ:i,imageNegX:i,imageNegY:i,imageNegZ:t.image.imageNegZ});this.groupInterior=new s.EWU([this.tunnel,this.obstacles]),this.groupInterior.active=!1,this.groupExterior=new s.EWU([this.moon,r]),this.groupExterior.active=!1;const a=new s.o57(n,{depth:1,color:[0,0,0,1]}),c=new s.Ipk(n,{depth:s.Eg5.lessOrEqual,cull:s.TfJ.back,children:[this.groupInterior,this.groupExterior,this.saucer]});n.add(a,c),this.step="exterior"}set step(n){this.groupExterior.active="exterior"===n,this.groupInterior.active="interior"===n}}class F{constructor(){this.actors=null,this.context=null,this.time0=0,this.init=(n,t)=>{const e=new W(n,t);this.actors=e,this.context=n,this.reset(),n.play()},this.stepTransitionFromExteriorToInterior=()=>{const{context:n,actors:t}=this;if(!n||!t)return;const{saucer:e,tunnel:o}=t;e.mode="interactive",t.step="interior",n.animSchedule({duration:.2,action:(0,s.$4L)(e.node.transfo,{scale:e.node.transfo.scale.clone()},{scale:[.5,.5,.5]})}),n.animSchedule({delay:.2,duration:2,easingFunction:s.Wcc,action:n=>{o.light=n}}),this.time0=-1,t.obstacles.time0=this.time0,n.logicClear(),n.logicAdd(this.logicTunnelRun),console.log("ðŸš€ [game] context.time =",n.time)},this.reset=()=>{const{context:n,actors:t}=this;if(!n||!t)return;const{saucer:e}=t;t.step="exterior",e.active=!0,e.node.transfo.setPosition(0,180,0),n.camera.from(new s.xNY({fovy:(0,s.HPH)(40),near:.01,far:1e3,zoom:2.5421269851440123,transfo:{distance:0,position:[0,300,-300],orientation:[.341026246547699,-.19848087430000305,-.5130870938301086,.7622650861740112],scale:[2.5421268939971924,2.5421268939971924,2.5421268939971924]}}))},this.start=()=>{const{context:n,actors:t}=this;if(!n||!t)return;console.log("Started!"),n.debugHierarchy();const{saucer:e}=t;n.animSchedule((0,s.emj)(e.node.transfo,[{duration:3,transfo:{position:[0,100,0]}},{duration:1,transfo:{position:[0,0,0]}}])),n.animSchedule((0,s.emj)(n.camera.transfo,[{duration:3,easingFunction:s.LcY,transfo:{distance:150,orientation:new s.HIE,position:new s.hNi(0,120,0)}},{duration:1,easingFunction:s.Wcc,transfo:{distance:0,position:new s.hNi(0,90,0),orientation:new s.HIE(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)}},{duration:1,easingFunction:s.Wcc,transfo:{distance:20,position:new s.hNi(0,0,0),orientation:new s.HIE(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)},onEnd:this.stepTransitionFromExteriorToInterior},{duration:.6,transfo:{distance:20,orientation:new s.HIE,position:[0,4,0],scale:[1,1,1]}}])),n.animSchedule({duration:2,easingFunction:s.ygX,action(t){n.camera.zoom=(0,s.fTR)(3,1,t)}})},this.logicTunnelRun=(n,t)=>{const{actors:e}=this;if(!e)return;this.time0<0&&(this.time0=n);const o=100+1*(n-=this.time0);e.tunnel.move=n*o,e.obstacles.speed=o}}}const V=e.p+"img/negZ.0605a456c61684cca92e.webp",X=e.p+"bin/moon.7bbc310fdf7a63bb0e9b.glb",Z=e.p+"bin/saucer.972f959b0b5793f88921.glb",U=e.p+"bin/tunnel.e91067c02b7240d699c0.glb",D=e.p+"bin/obstacle-1.a54849a260c0179f5712.glb";var $=e(642),H={};H.styleTagTransform=b(),H.setAttributes=p(),H.insert=h().bind(null,"head"),H.domAPI=A(),H.insertStyleElement=f(),l()($.A,H);const J=$.A&&$.A.locals?$.A.locals:void 0;function G(){const n=(0,_.m)(),[t,e]=i.useState(!1),s=function(){const n=i.useRef(null);return n.current||(n.current=new F),n.current}();return(0,o.jsxs)("div",{className:J.play,children:[(0,o.jsx)(y,{gizmo:!1,onReady:(n,t)=>{s.init(n,t)},assets:{image:{imageNegZ:V},glb:{moon:X,saucer:Z,tunnel:U,obstacle:D}}}),!t&&(0,o.jsx)("div",{className:J.startScreen,children:(0,o.jsx)(N,{className:J.startButton,onClick:()=>{s.start(),e(!0)},autoFocus:!0,children:n.start()})})]})}},7138:(n,t,e)=>{e.d(t,{A:()=>a});var o=e(8519),i=e.n(o),s=e(3645),r=e.n(s)()(i());r.push([n.id,'.src-components-Button-Button-module_button_AisLsJ {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.src-components-Button-Button-module_button_AisLsJ::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.src-components-Button-Button-module_button_AisLsJ:focus,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-visible,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n',"",{version:3,sources:["webpack://./src/components/Button/Button.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,wBAAwB;IACxB,mEAAmE;IACnE,WAAW;IACX,cAAc;IACd,oBAAoB;IACpB,gBAAgB;IAChB,0BAA0B;IAC1B,0BAA0B;IAC1B,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,oBAAoB;IACpB,0BAA0B;IAC1B,2BAA2B;AAC/B;;AAEA;;;IAGI,aAAa;IACb,iDAAiD;IACjD,6BAA6B;AACjC",sourcesContent:['.button {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.button::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.button:focus,\nbutton.button:focus-visible,\nbutton.button:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n'],sourceRoot:""}]),r.locals={button:"src-components-Button-Button-module_button_AisLsJ"};const a=r},9715:(n,t,e)=>{e.d(t,{m:()=>s});var o=e(3095),i=e(4335);function s(){return(0,o.L5)(i.A,{en:()=>e.e(36).then(e.bind(e,3036)),alien:()=>e.e(588).then(e.bind(e,6588))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,