"use strict";(self.webpackChunkansy_2025=self.webpackChunkansy_2025||[]).push([[193],{53:(t,e,n)=>{n.r(e),n.d(e,{default:()=>jn});var i=n(4848),r=n(6540);function s(t){if(t instanceof Uint8Array)return WebGL2RenderingContext.UNSIGNED_BYTE;if(t instanceof Uint16Array)return WebGL2RenderingContext.UNSIGNED_SHORT;if(t instanceof Uint32Array)return WebGL2RenderingContext.UNSIGNED_INT;throw new Error("[webglElementTypeFromDataView] drawElements() and drawElementsInstanced() can only be fed with Uint8Array, Uint16Array or Uint32Array!")}function o(t,e=6){const n=Math.pow(10,e),i=[];let r=0;for(const s of t){const t=(Math.round(s*n)/n).toFixed(e);r=Math.max(r,t.length),i.push(t)}return i.map((t=>t.padStart(r," ")))}document.createElement("canvas").getContext("webgl2");var a=n(5935);function h(t,e,n){return t<e?e:t>n?n:t}function c(t,e,n){return(1-n)*t+n*e}Math.PI;const l=Math.PI/180;class u extends Float32Array{static newFrom([t,e,n]){return new u(t,e,n)}static newFromMix([t,e,n],[i,r,s],o=.5){const a=1-o;return new u(a*t+o*i,a*e+o*r,a*n+o*s)}static distance(t,e){const n=e.x-t.x,i=e.y-t.y,r=e.z-t.z;return Math.hypot(n,i,r)}constructor(t=0,e=0,n=0){if(super(3),"number"!=typeof t)return this.x=t[0],this.y=t[1],void(this.z=t[2]);this.x=t,this.y=e,this.z=n}clone(){return new u(this)}mix(t,e=.5){const n=1-e;return this.x=n*this.x+e*t.x,this.y=n*this.y+e*t.y,this.z=n*this.z+e*t.z,this}isEqual(t){const[e,n,i]=t;return e===this.x&&n===this.y&&i===this.z}isClose(t,e=1e-6){const[n,i,r]=t;return!(Math.abs(n-this.x)>e||Math.abs(i-this.y)>e||Math.abs(r-this.z)>e)}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),[r,s,o]=this,[a,h,c]=t,l=h*o-c*s,u=c*r-a*o,d=a*s-h*r,m=(r*a+s*h+o*c)*(1-n);return this.x=r*n+l*i+a*m,this.y=s*n+u*i+h*m,this.z=o*n+d*i+c*m,this}applyMatrix(t){const{x:e,y:n,z:i}=this;return this.x=e*t.m00+n*t.m10+i*t.m20,this.y=e*t.m01+n*t.m11+i*t.m21,this.z=e*t.m02+n*t.m12+i*t.m22,this}applyQuaternion(t){return a.gL(this,this,t),this}from(t){const[e,n,i]=t;return this.x=e,this.y=n,this.z=i,this}fromOpposite(t){const[e,n,i]=t;return this.x=-e,this.y=-n,this.z=-i,this}fromMix(t,e,n){const[i,r,s]=t,[o,a,h]=e;return this.reset(c(i,o,n),c(r,a,n),c(s,h,n))}reset(t=0,e=0,n=0){return this[0]=t,this[1]=e,this[2]=n,this}distanceToLineSquared(t,e){const[n,i,r]=this,[s,o,a]=t,[h,c,l]=e,u=h*(n-s)+c*(i-o)+l*(r-a),d=n-(s+u*h),m=i-(o+u*c),f=r-(a+u*l);return d*d+m*m+f*f}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}get z(){return this[2]}set z(t){this[2]=t}add(...t){for(const e of t){const[t,n,i]=e;this[0]+=t,this[1]+=n,this[2]+=i}return this}addWithScale(t,e){return this[0]+=t.x*e,this[1]+=t.y*e,this[2]+=t.z*e,this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]+this[2]*t[2]}get size(){return Math.hypot(this[0],this[1],this[2])}normalize(){const t=this[0]*this[0]+this[1]*this[1]+this[2]*this[2];return 0===t?this:this.scale(1/Math.sqrt(t))}cross(t){const[e,n,i]=this,[r,s,o]=t;return this[0]=n*o-s*i,this[1]=i*r-o*e,this[2]=e*s-r*n,this}random(){return this[0]=Math.random()-.5,this[1]=Math.random()-.5,this[2]=Math.random()-.5,this}debug(t="vec3"){const{x:e,y:n,z:i}=this,r=[e,n,i].map((t=>t.toFixed(6)));console.log(`${t}:   `,r.join(" | "),"   length:",Math.hypot(e,n,i))}}u.X=new u(1,0,0),u.Y=new u(0,1,0),u.Z=new u(0,0,1);class d extends Float32Array{static fromSlerp([t,e,n,i=0],[r,s,o,a=0],h=.5){const c=1-h;return new d(c*t+h*r,c*e+h*s,c*n+h*o,c*i+h*a)}constructor(t=0,e=0,n=0,i=1){if(super(4),t instanceof d)return this.x=t.x,this.y=t.y,this.z=t.z,void(this.w=t.w);if(t instanceof u)return this.x=t.x,this.y=t.y,this.z=t.z,void(this.w=i);if(Array.isArray(t)){if("number"==typeof e){const[n,i,r]=t;return this.x=null!=n?n:0,this.y=null!=i?i:0,this.z=null!=r?r:0,void(this.w=e)}{const[e,n,i,r]=t;return this.x=null!=e?e:0,this.y=null!=n?n:0,this.z=null!=i?i:0,void(this.w=null!=r?r:1)}}this.x=t,this.y=e,this.z=n,this.w=i}reset(t=0,e=0,n=0,i=1){return this.x=t,this.y=e,this.z=n,this.w=i,this}from(t){const[e,n,i,r]=t;return this.x=e,this.y=n,this.z=i,this.w=r,this}fromVec3(t){const[e,n,i]=t;return this.x=e,this.y=n,this.z=i,this}clone(){return new d(this)}mix(t,e=.5){return this.x=(1-e)*this.x+e*t.x,this.y=(1-e)*this.y+e*t.y,this.z=(1-e)*this.z+e*t.z,this.w=(1-e)*this.w+e*t.w,this}isEqual(t){const[e,n,i,r]=t;return e===this.x&&n===this.y&&i===this.z&&r===this.w}isClose({x:t,y:e,z:n,w:i},r=1e-6){return!(Math.abs(t-this.x)>r||Math.abs(e-this.y)>r||Math.abs(n-this.z)>r||Math.abs(i-this.w)>r)}applyMatrix(t){const{x:e,y:n,z:i,w:r}=this;return this.x=e*t.m00+n*t.m01+i*t.m02+r*t.m03,this.y=e*t.m10+n*t.m11+i*t.m12+r*t.m13,this.z=e*t.m20+n*t.m21+i*t.m22+r*t.m23,this.w=e*t.m30+n*t.m31+i*t.m32+r*t.m33,this}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}get z(){return this[2]}set z(t){this[2]=t}get w(){return this[3]}set w(t){this[3]=t}add(...t){for(const e of t)this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],e.length>3&&(this[3]+=e[3]);return this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],t.length>3&&(this[3]-=t[3]),this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this[3]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]+this[2]*t[2]+this[3]*t[3]}get size(){return Math.hypot(this[0],this[1],this[2],this[3])}normalize(){const t=this[0]*this[0]+this[1]*this[1]+this[2]*this[2]+this[3]*this[3];return 0===t?this:this.scale(1/Math.sqrt(t))}debug(t="vec4"){const{x:e,y:n,z:i,w:r}=this,s=[e,n,i,r].map((t=>t.toFixed(6)));console.log(`${t}:   `,s.join(" | "),`  (length = ${this.size})`)}}d.X=new d(1,0,0,0),d.Y=new d(0,1,0,0),d.Z=new d(0,0,1,0),d.W=new d(0,0,0,1);var m=n(3862);class f extends Float32Array{constructor(t=1,e=0,n=0,i=0,r=0,s=1,o=0,a=0,h=0,c=0,l=1,u=0,d=0,m=0,f=0,g=1){super("number"==typeof t?[t,e,n,i,r,s,o,a,h,c,l,u,d,m,f,g]:t)}reset(t=d.X,e=d.Y,n=d.Z,i=d.W){const[r,s,o,a]=t,[h,c,l,u]=e,[m,f,g,p]=n,[A,v,x,b]=i;return this.m00=r,this.m01=s,this.m02=o,this.m03=a,this.m10=h,this.m11=c,this.m12=l,this.m13=u,this.m20=m,this.m21=f,this.m22=g,this.m23=p,this.m30=A,this.m31=v,this.m32=x,this.m33=b,this}multiply(t){return m.lw(this,this,t),this}invert(t){return m.B8(this,null!=t?t:this),this}get translation(){const{m03:t,m13:e,m23:n}=this;return new u(t,e,n)}set translation(t){const[e,n,i]=t;this.m03=e,this.m13=n,this.m23=i}toTanslation(t){return t.x=this.m03,t.y=this.m13,t.z=this.m23,this}translate(t){const[e,n,i]=t;return this.m03+=e,this.m13+=n,this.m23+=i,this}from(t){var e;for(let n=0;n<this.length;n++)this[n]=null!==(e=t[n])&&void 0!==e?e:0;return this}fromMat3(t){return this.m00=t.m00,this.m01=t.m01,this.m02=t.m02,this.m10=t.m10,this.m11=t.m11,this.m12=t.m12,this.m20=t.m20,this.m21=t.m21,this.m22=t.m22,this}toAxes(t,e,n){return this.toAxisX(t),this.toAxisY(e),this.toAxisZ(n)}toAxisX(t){return t.x=this.m00,t.y=this.m01,t.z=this.m02,this}toAxisY(t){return t.x=this.m10,t.y=this.m11,t.z=this.m12,this}toAxisZ(t){return t.x=this.m20,t.y=this.m21,t.z=this.m22,this}fromQuat({x:t,y:e,z:n,w:i}){return m.I0(this,[t,e,n,i]),this}get m00(){return this[g]}set m00(t){this[g]=t}get m10(){return this[p]}set m10(t){this[p]=t}get m20(){return this[A]}set m20(t){this[A]=t}get m30(){return this[v]}set m30(t){this[v]=t}get m01(){return this[x]}set m01(t){this[x]=t}get m11(){return this[b]}set m11(t){this[b]=t}get m21(){return this[E]}set m21(t){this[E]=t}get m31(){return this[y]}set m31(t){this[y]=t}get m02(){return this[w]}set m02(t){this[w]=t}get m12(){return this[_]}set m12(t){this[_]=t}get m22(){return this[T]}set m22(t){this[T]=t}get m32(){return this[C]}set m32(t){this[C]=t}get m03(){return this[M]}set m03(t){this[M]=t}get m13(){return this[R]}set m13(t){this[R]=t}get m23(){return this[L]}set m23(t){this[L]=t}get m33(){return this[P]}set m33(t){this[P]=t}debug(t="Mat4"){const e=o([this.m00,this.m01,this.m02,this.m03]),n=o([this.m10,this.m11,this.m12,this.m13]),i=o([this.m20,this.m21,this.m22,this.m23]),r=o([this.m30,this.m31,this.m32,this.m33]);console.log(t),console.log("   ",e.join(" | ")),console.log("   ",n.join(" | ")),console.log("   ",i.join(" | ")),console.log("   ",r.join(" | "))}}const g=0,p=1,A=2,v=3,x=4,b=5,E=6,y=7,w=8,_=9,T=10,C=11,M=12,R=13,L=14,P=15;var S=n(2391);class I extends Float32Array{constructor(t=1,e=0,n=0,i=0,r=1,s=0,o=0,a=0,h=1){if("number"==typeof t&&"number"==typeof e&&"number"==typeof n)super([t,e,n,i,r,s,o,a,h]);else if((t instanceof u||t instanceof d)&&(e instanceof u||e instanceof d)&&(n instanceof u||n instanceof d)){const i=t,r=e,s=n;super([i.x,i.y,i.z,r.x,r.y,r.z,s.x,s.y,s.z])}else if(t instanceof I){const e=t;super([e.m00,e.m10,e.m20,e.m01,e.m11,e.m21,e.m02,e.m12,e.m22])}else{if(!(t instanceof f))throw console.error("[TgdMat3]",arguments),new Error("Invalid TgdMat3 initialization!");{const e=t;super([e.m00,e.m10,e.m20,e.m01,e.m11,e.m21,e.m02,e.m12,e.m22])}}}multiply(t){return S.lw(this,this,t),this}transpose(){let t=this.m10;return this.m10=this.m01,this.m01=t,t=this.m20,this.m20=this.m02,this.m02=t,t=this.m21,this.m21=this.m12,this.m12=t,this}fromQuat({x:t,y:e,z:n,w:i}){return S.I0(this,[t,e,n,i]),this}toAxes(t,e,n){return this.toAxisX(t),this.toAxisY(e),this.toAxisZ(n)}toAxisX(t){return t.x=this.m00,t.y=this.m01,t.z=this.m02,this}toAxisY(t){return t.x=this.m10,t.y=this.m11,t.z=this.m12,this}toAxisZ(t){return t.x=this.m20,t.y=this.m21,t.z=this.m22,this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this[3]*=t,this[4]*=t,this[5]*=t,this[6]*=t,this[7]*=t,this[8]*=t,this}get m00(){return this[N]}set m00(t){this[N]=t}get m10(){return this[B]}set m10(t){this[B]=t}get m20(){return this[O]}set m20(t){this[O]=t}get m01(){return this[U]}set m01(t){this[U]=t}get m11(){return this[F]}set m11(t){this[F]=t}get m21(){return this[D]}set m21(t){this[D]=t}get m02(){return this[$]}set m02(t){this[$]=t}get m12(){return this[k]}set m12(t){this[k]=t}get m22(){return this[G]}set m22(t){this[G]=t}debug(t="Mat3"){const e=o([this.m00,this.m01,this.m02]),n=o([this.m10,this.m11,this.m12]),i=o([this.m20,this.m21,this.m22]);console.log(t,this.slice()),console.log("   ",e.join(" | ")),console.log("   ",n.join(" | ")),console.log("   ",i.join(" | "))}}const N=0,B=1,O=2,U=3,F=4,D=5,$=6,k=7,G=8;var z=n(7445);const W=new u,j=new u,V=new u,X=new I;class H extends d{static fromMatrix(t){const e=new H;return e.fromMatrix(t),e}static fromFace(t){return(new H).face(t)}static fromSlerp(t,e,n){return(new H).fromSlerp(t,e,n)}constructor(t=0,e=0,n=0,i=1){"number"==typeof t?super(t,e,n,i):super(t)}clone(){return new H(this)}multiply(t){return z.lw(this,this,t),this}fromSlerp(t,e,n){const[i,r,s,o]=t;let a,h,[c,l,u,d]=e,m=i*c+r*l+s*u+o*d;if(m<0&&(m=-m,c=-c,l=-l,u=-u,d=-d),1-m>1e-6){const t=Math.acos(m),e=1/Math.sin(t);a=Math.sin((1-n)*t)*e,h=Math.sin(n*t)*e}else a=1-n,h=n;return this.x=a*i+h*c,this.y=a*r+h*l,this.z=a*s+h*u,this.w=a*o+h*d,this}fromAxesTransposed([t,e,n],[i,r,s],[o,a,h]){return this.fromAxes([t,i,o],[e,r,a],[n,s,h])}fromAxes(t,e,n){const[i,r,s]=n;return z.ml(this,[-i,-r,-s],t,e),this}fromMatrix(t){return z.Gn(this,t),this}rotateAround(t,e){return X.fromQuat(this).toAxes(W,j,V),W.rotateAround(t,e),j.rotateAround(t,e),V.rotateAround(t,e),this.fromAxes(W,j,V)}static rotateAroundX(t){return(new H).rotateAroundX(t)}rotateAroundX(t){return this.rotateAround(u.X,t)}static rotateAroundY(t){return(new H).rotateAroundY(t)}rotateAroundY(t){return this.rotateAround(u.Y,t)}static rotateAroundZ(t){return(new H).rotateAroundZ(t)}rotateAroundZ(t){return this.rotateAround(u.Z,t)}toAxisX(t){const[e,n,i,r]=this,s=e+e,o=n+n,a=i+i,h=n*s,c=n*o,l=i*s,u=i*a,d=r*o,m=r*a;return t.x=1-c-u,t.y=h-m,t.z=l+d,t}toAxisY(t){const[e,n,i,r]=this,s=e+e,o=i+i,a=e*s,h=n*s,c=i*(n+n),l=i*o,u=r*s,d=r*o;return t.x=h+d,t.y=1-a-l,t.z=c-u,t}toAxisZ(t){const{x:e,y:n,z:i,w:r}=this,s=e+e,o=n+n,a=e*s,h=n*o,c=i*s,l=i*o,u=r*s,d=r*o;return t.x=c-d,t.y=l+u,t.z=1-a-h,t}toMatrix(t){const e=new u,n=new u,i=new u;return this.toAxisX(e),this.toAxisY(n),this.toAxisZ(i),t.m00=e.x,t.m01=e.y,t.m02=e.z,t.m10=n.x,t.m11=n.y,t.m12=n.z,t.m20=i.x,t.m21=i.y,t.m22=i.z,t}invert(){return z.B8(this,this),this}face(t="+X+Y+Z"){const[e,n,i,r]=K[t];return this.x=e,this.y=n,this.z=i,this.w=r,this}}const Y=Math.sqrt(2)/2,Z=.5,K={"-X-Y+Z":[0,0,1,0],"-X-Z-Y":[0,-Y,+Y,0],"-X+Y-Z":[0,1,0,0],"-X+Z+Y":[0,+Y,+Y,0],"-Y-X-Z":[+Y,-Y,0,0],"-Y-Z+X":[+Z,-Z,+Z,-Z],"-Y+X+Z":[0,0,-Y,+Y],"-Y+Z-X":[+Z,-Z,-Z,+Z],"-Z-X+Y":[+Z,-Z,-Z,-Z],"-Z-Y-X":[-Y,0,+Y,0],"-Z+X-Y":[+Z,+Z,-Z,+Z],"-Z+Y+X":[0,+Y,0,+Y],"+X-Y-Z":[1,0,0,0],"+X-Z+Y":[-Y,0,0,+Y],"+X+Y+Z":[0,0,0,1],"+X+Z-Y":[+Y,0,0,+Y],"+Y-X+Z":[0,0,+Y,+Y],"+Y-Z-X":[-Z,-Z,+Z,+Z],"+Y+X-Z":[+Y,+Y,0,0],"+Y+Z+X":[+Z,+Z,+Z,+Z],"+Z-X-Y":[+Z,-Z,+Z,+Z],"+Z-Y+X":[+Y,0,+Y,0],"+Z+X+Y":[+Z,+Z,+Z,-Z],"+Z+Y-X":[0,-Y,0,+Y]};class Q{constructor(t){var e,n,i,r;this._matrix=new f(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this._position=new u(0,0,0),this._orientation=new H(0,0,0,1),this._scale=new u(1,1,1),this._distance=0,this.tmpVec3=new u,this._axisX=new u,this._axisY=new u,this._axisZ=new u,this.dirty=!1,t&&(t instanceof Q?this.from(t):(this.distance=null!==(e=t.distance)&&void 0!==e?e:this.distance,this.position=null!==(n=t.position)&&void 0!==n?n:this.position,this.orientation=null!==(i=t.orientation)&&void 0!==i?i:this.orientation,this.scale=null!==(r=t.scale)&&void 0!==r?r:this.scale),this.updateMatrix())}clone(){return new Q(this)}from(t){var e,n,i,r;return this.position=null!==(e=t.position)&&void 0!==e?e:this.position,this.orientation=null!==(n=t.orientation)&&void 0!==n?n:this.orientation,this.scale=null!==(i=t.scale)&&void 0!==i?i:this.scale,this.distance=null!==(r=t.distance)&&void 0!==r?r:this.distance,this.updateMatrix(),this}fromMatrix(t){return this.matrix.from(t),this.dirty=!1,this}get matrix(){return this.updateIfNeeded(),this._matrix}set matrix(t){this._matrix.from(t),this.dirty=!1}get axisX(){return this.updateIfNeeded(),this._axisX}get axisY(){return this.updateIfNeeded(),this._axisY}get axisZ(){return this.updateIfNeeded(),this._axisZ}updateIfNeeded(){if(!this.dirty)return;const t=this._matrix;m.o1(t,this._orientation,this._position,this._scale),t.toAxisX(this._axisX),t.toAxisY(this._axisY),t.toAxisZ(this._axisZ);const e=this._distance;0!==e&&(this.tmpVec3.reset(0,0,e).applyQuaternion(this._orientation),t.m03+=this.tmpVec3.x,t.m13+=this.tmpVec3.y,t.m23+=this.tmpVec3.z),this.dirty=!1}reset(){return this.orientation.reset(),this.position.reset(),this.scale.reset(),this.dirty=!0,this}get distance(){return this._distance}set distance(t){this._distance=t,this.updateMatrix()}setDistance(t){return this.distance=t,this}get position(){return this.updateMatrix(),this._position}set position(t){this.updateMatrix(),this._position.from(t)}setPosition(t,e,n){return this.updateMatrix(),"number"==typeof t?this._position.reset(t,e,n):this._position.reset(t[0],t[1],t[2]),this}get actualPosition(){const t=this.distance;return 0===t?this.position:this.tmpVec3.from(this.position).addWithScale(this.axisZ,t)}get scale(){return this._scale}set scale(t){this.updateMatrix(),this._scale.from(t)}setScale(t,e,n){var i;return this.updateMatrix(),"number"==typeof t?this._scale.reset(t,null!=e?e:t,null!==(i=null!=n?n:e)&&void 0!==i?i:t):this._scale.reset(t[0],t[1],t[2]),this}get orientation(){return this.updateMatrix(),this._orientation}set orientation(t){this._orientation.from(t),this.updateMatrix()}setOrientation(t,e,n,i){return"number"==typeof t?this._orientation.reset(t,e,n,i):this._orientation.reset(t[0],t[1],t[2],t[3]),this.updateMatrix(),this}setEulerRotation(t,e,n){return z.A6(this._orientation,t,e,n),this.updateMatrix(),this}orbitAroundX(t){return this._orientation.rotateAround(u.X,t),this.updateMatrix(),this}orbitAroundY(t){return this._orientation.rotateAround(u.Y,t),this.updateMatrix(),this}orbitAroundZ(t){return this._orientation.rotateAround(u.Z,t),this.updateMatrix(),this}moveAlongAxes(t,e,n){return this.position.addWithScale(this.axisX,t).addWithScale(this.axisY,e).addWithScale(this.axisZ,n),this.updateMatrix(),this}debug(t="Transfo"){console.log(t),console.log("Distance:",this.distance),this.orientation.debug("Orientation"),this.scale.debug("Scale"),this.position.debug("Position"),this.matrix.debug("Matrix")}updateMatrix(){this.dirty=!0}}class q extends Float32Array{static fromMix(t,e,n=.5){const i=1-n,r=i*t.x+n*e.x,s=i*t.y+n*e.y;return new q(r,s)}static distance(t,e){const n=e.x-t.x,i=e.y-t.y;return Math.hypot(n,i)}constructor(t=0,e=0){if(super(2),"number"!=typeof t)return this.x=t[0],void(this.y=t[1]);this.x=t,this.y=e}clone(){return new q(this)}mix(t,e=.5){return this.x=(1-e)*this.x+e*t.x,this.y=(1-e)*this.y+e*t.y,this}isEqual(t){const[e,n]=t;return e===this.x&&n===this.y}isClose(t,e=1e-6){const[n,i]=t;return!(Math.abs(n-this.x)>e||Math.abs(i-this.y)>e)}from(t){const[e,n]=t;return this.x=e,this.y=n,this}fromMix(t,e,n){const[i,r]=t,[s,o]=e;return this.reset(c(i,s,n),c(r,o,n))}reset(t,e){return this[0]=t,this[1]=e,this}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}add(...t){for(const e of t)this[0]+=e.x,this[1]+=e.y;return this}addWithScale(t,e){return this[0]+=t.x*e,this[1]+=t.y*e,this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this}scale(t){return this[0]*=t,this[1]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]}get size(){return Math.hypot(this[0],this[1])}normalize(){const t=this[0]*this[0]+this[1]*this[1];return 0===t?this:this.scale(1/Math.sqrt(t))}random(){return this[0]=Math.random()-.5,this[1]=Math.random()-.5,this}debug(t="vec2"){const{x:e,y:n}=this,i=[e,n].map((t=>t.toFixed(6)));console.log(`${t}:   `,i.join(" | "),"   length:",Math.hypot(e,n))}}class J{constructor(t={}){var e,n,i,r;this._screenWidth=1920,this._screenHeight=1080,this._screenAspectRatio=1920/1080,this._dirtyModelView=!0,this.dirtyModelViewInverse=!0,this._dirtyAxis=!0,this._dirtyProjection=!0,this.dirtyProjectionInverse=!0,this._near=.001,this._far=1/0,this._matrixModelView=new f,this._matrixProjectionInverse=new f,this._zoom=1,this.name=null!==(e=t.name)&&void 0!==e?e:"TgdCamera#"+J.incrementalId++,this._near=null!==(n=t.near)&&void 0!==n?n:.001,this._far=null!==(i=t.far)&&void 0!==i?i:1e6,this.transfo=new Q(t.transfo),this.zoom=null!==(r=t.zoom)&&void 0!==r?r:1}getCurrentState(){return{distance:this.transfo.distance,orientation:this.transfo.orientation.clone(),spaceHeightAtTarget:this.spaceHeightAtTarget,position:this.transfo.position.clone(),zoom:this.zoom}}get near(){return this._near}set near(t){t!==this._near&&(this._near=t,this.dirtyProjection=!0)}get far(){return this._far}set far(t){t!==this._far&&(this._far=t,this.dirtyProjection=!0)}get screenAspectRatio(){return this._screenAspectRatio}get screenWidth(){return this._screenWidth}set screenWidth(t){t!==this._screenWidth&&(this._screenWidth=t,this.dirtyProjection=!0,this._screenAspectRatio=this._screenWidth/this._screenHeight)}get screenHeight(){return this._screenHeight}set screenHeight(t){t!==this._screenHeight&&(this._screenHeight=t,this.dirtyProjection=!0,this._screenAspectRatio=this._screenWidth/this._screenHeight)}get spaceHeightAtTarget(){return this.getSpaceHeightAtTarget()}set spaceHeightAtTarget(t){this.setSpaceHeightAtTarget(t)}get spaceWidthAtTarget(){return this.screenWidth*this.spaceHeightAtTarget/this.screenHeight}set spaceWidthAtTarget(t){this.setSpaceHeightAtTarget(t*this.screenHeight/this.screenWidth)}from(t){const{zoom:e,screenWidth:n,screenHeight:i}=t;return this.transfo.from(t.transfo),this.zoom=e,this.screenWidth=n,this.screenHeight=i,this.dirtyModelView=!0,this.copyProjectionFrom(t),this}fromTransfo(t){return this.transfo.from(t),this.dirtyModelView=!0,this}get matrixModelView(){return this._matrixModelView.invert(this.transfo.matrix)}get matrixProjectionInverse(){return this.dirtyProjectionInverse&&(this._matrixProjectionInverse.invert(this.matrixProjection),this.dirtyProjectionInverse=!1),this._matrixProjectionInverse}get zoom(){return this._zoom}set zoom(t){this._zoom!==t&&(this._zoom=t,this.transfo.setScale(t,t,t),this.dirtyModelView=!0)}toCode(t){return`// ${null!=t?t:"TgdCamera"}\n// Not implemented yet`}debug(t){const e=`${this.name}: ${null!=t?t:""}`;console.log("TgdCamera",e),console.log("    Distance:",this.transfo.distance),console.log("    Zoom:",this.zoom),this.transfo.orientation.debug("   Orientation"),this.transfo.position.debug("    Target"),this.transfo.actualPosition.debug("    Actual position"),this.matrixModelView.debug("    MatrixModelView"),this.matrixProjection.debug("    MatrixProjection")}get dirtyModelView(){return this._dirtyModelView}set dirtyModelView(t){this._dirtyModelView=t,t&&(this.dirtyModelViewInverse=!0)}get dirtyProjection(){return this._dirtyProjection}set dirtyProjection(t){this._dirtyProjection=t,t&&(this.dirtyProjectionInverse=!0)}}J.incrementalId=1;class tt extends J{constructor(t={}){var e;super(t),this._matrixProjection=new f,this._fovy=Math.PI/4,this._ray={origin:new u,direction:new u},this._fovy=null!==(e=t.fovy)&&void 0!==e?e:Math.PI/4}copyProjectionFrom(t){return this.fovy=t.fovy,this.near=t.near,this.far=t.far,this}castRay(t,e){const{transfo:n}=this,{origin:i,direction:r}=this._ray;i.from(n.actualPosition);const s=Math.atan(.5*this.fovy),o=s*this.screenAspectRatio;return r.fromOpposite(n.axisZ).addWithScale(n.axisX,o*t).addWithScale(n.axisY,s*e).normalize(),this._ray}get fovy(){return this._fovy}set fovy(t){t!==this._fovy&&(this._fovy=t,this.dirtyProjection=!0)}get matrixProjection(){return this.updateProjectionIfNeeded(),this._matrixProjection}getSpaceHeightAtTarget(){return 2*Math.tan(.5*this.fovy)*this.transfo.distance}setSpaceHeightAtTarget(t){this.transfo.setDistance(t/(2*Math.tan(.5*this.fovy)))}updateProjectionIfNeeded(){if(!this.dirtyProjection)return;const t=this._fovy,e=this.screenAspectRatio,n=this._near,i=this._far,r=this._matrixProjection;m.fN(r,t,e,n,i),r[0]*=this.zoom,r[5]*=this.zoom,this.dirtyProjection=!0}toCode(t){const e=[];return t&&e.push(`// ${t}`),e.push("const camera = new TgdCameraPerspective({"),this.name&&e.push(`  name: ${JSON.stringify(this.name)},`),e.push(`  fovy: ${this._fovy},`),e.push(`  near: ${this._near},`),e.push(`  far: ${this._far},`),e.push(`  zoom: ${this.zoom},`),e.push("  transfo: {"),e.push(`  distance: ${this.transfo.distance},`),e.push(`    position: ${JSON.stringify([...this.transfo.position])},`),e.push(`    orientation: ${JSON.stringify([...this.transfo.orientation])},`),e.push(`    scale: ${JSON.stringify([...this.transfo.scale])},`),e.push("  }"),e.push("}"),e.join("\n")}}class et{constructor(){this.listeners=new Set}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}dispatch(t){for(const e of this.listeners)e(t)}}class nt{constructor(){this.eventKeyPress=new et,this.keysDown=new Set,this.keysUp=new Set,this.attached=!1,this.handleKeyDown=t=>{this.keysDown.add(t.key),this.keysUp.delete(t.key)},this.handleKeyUp=t=>{this.keysDown.delete(t.key),this.keysUp.add(t.key),this.eventKeyPress.dispatch(t)},document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),this.attached=!0}detach(){this.attached&&(document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),this.attached=!1)}isUp(...t){return!this.isDown(...t)}isDown(...t){for(const e of t)if(!this.keysDown.has(e))return!1;return!0}hasClicked(t){return!!this.keysUp.has(t)&&(this.keysUp.delete(t),!0)}}class it{constructor(t){this.canvas=t,this.eventTap=new et,this.eventMoveStart=new et,this.eventMove=new et,this.eventMoveEnd=new et,this.eventZoom=new et,this.tapDelay=300,this.controlKeys={altKey:!1,ctrlKey:!1,metaKey:!1,shiftKey:!1},this.start={x:0,y:0,t:0,fingersCount:1},this.current={x:0,y:0,t:0,fingersCount:1},this.previous={x:0,y:0,t:0,fingersCount:1},this.pointerEvent=null,this.handleContextMenu=t=>{t.preventDefault()},this.handleCanvasWheel=t=>{let e=t.deltaX+t.deltaY+t.deltaZ;e=e>0?1:-1,this.eventZoom.dispatch(Object.assign({current:this.getPoint(t),direction:e,preventDefault:()=>t.preventDefault()},this.controlKeys))},this.handlePointerDown=t=>{if(!t.isPrimary)return;this.canvas.setPointerCapture(t.pointerId),t.preventDefault(),t.stopPropagation(),this.pointerEvent=t;const e=this.getPoint(t);this.start=this.current=this.previous=e,this.eventMoveStart.dispatch(Object.assign({start:e,current:e,previous:e},this.controlKeys))},this.handlePointerMove=t=>{t.isPrimary&&this.pointerEvent&&this.canvas&&(this.previous=this.current,this.current=this.getPoint(t),this.eventMove.dispatch(Object.assign({start:this.start,current:this.current,previous:this.previous},this.controlKeys)))},this.handlePointerUp=t=>{t.isPrimary&&this.pointerEvent&&(t.preventDefault(),this.current=this.getPoint(t),this.eventMoveEnd.dispatch(Object.assign({start:this.start,current:this.current,previous:this.previous},this.controlKeys)),this.pointerEvent=null,t.timeStamp-this.start.t<this.tapDelay&&this.eventTap.dispatch(Object.assign(Object.assign({},this.start),this.controlKeys)))},t.addEventListener("pointerdown",this.handlePointerDown,!0),t.addEventListener("wheel",this.handleCanvasWheel),t.addEventListener("contextmenu",this.handleContextMenu),t.addEventListener("pointermove",this.handlePointerMove),t.addEventListener("pointerup",this.handlePointerUp)}isTouching(t){return!!this.pointerEvent&&(!t||t(this.current))}detach(){const{canvas:t}=this;t&&(t.removeEventListener("pointerdown",this.handlePointerDown),t.removeEventListener("wheel",this.handleCanvasWheel),t.removeEventListener("contextmenu",this.handleContextMenu),t.removeEventListener("pointermove",this.handlePointerMove),t.removeEventListener("pointerup",this.handlePointerUp))}getPoint(t){this.controlKeys={altKey:t.altKey||2===t.buttons,ctrlKey:t.ctrlKey,metaKey:t.metaKey,shiftKey:t.shiftKey};const{left:e,top:n,width:i,height:r}=this.canvas.getBoundingClientRect();return{x:2*((t.clientX-e)/i-.5),y:-2*((t.clientY-n)/r-.5),t:t.timeStamp,fingersCount:1}}}class rt{constructor(t){this.canvas=t,this._keyboard=null,this._pointer=null}get keyboard(){return this._keyboard||(this._keyboard=new nt),this._keyboard}get pointer(){return this._pointer||(this._pointer=new it(this.canvas)),this._pointer}}class st{constructor(){this.name="Painter/"+st.counter++,this.active=!0}debugHierarchy(){return{[this.active?this.name:`${this.name} (Inactive)`]:null}}}st.log=new class{constructor(){this.level=0,this.lookupTable=new Map}lookup(t,e){var n;if("number"!=typeof e)return JSON.stringify(e);const{lookupTable:i}=this;if(0===i.size)for(const e in t){const n=t[e];"number"==typeof n&&i.set(n,`gl.${e}`)}return null!==(n=i.get(e))&&void 0!==n?n:`gl[${e}]`}call(t,e){const n="  ".repeat(this.level);console.log(`${n}>>>`,t),this.level++;const i=Date.now();try{return e()}catch(t){throw console.error(t),t}finally{this.level--,console.log(`${n}<<<`,t,`(${Date.now()-i} ms)`)}}stateDepth(t){if(console.log("// [State] Depth"),t.getParameter(t.DEPTH_TEST)){console.log("gl.enable( gl.DEPTH_TEST )"),console.log("gl.depthFunc(",this.lookup(t,t.getParameter(t.DEPTH_FUNC)),")"),console.log("gl.depthMask(",this.lookup(t,t.getParameter(t.DEPTH_WRITEMASK)),")");const[e,n]=t.getParameter(t.DEPTH_RANGE);console.log("gl.depthRange(",e,",",n,")")}else console.log("gl.disable( gl.DEPTH_TEST )")}},st.counter=0;class ot extends st{constructor(t=[],{onEnter:e,onExit:n,name:i}={}){super(),this.active=!0,this.onEnter=e,this.onExit=n,this.painters=[...t],this.name=null!=i?i:`Group/${this.name}`}forEachChild(t){for(const[e,n]of this.painters.entries())t(n,e)}has(t){return this.painters.includes(t)}add(...t){for(const e of t)this.painters.push(e)}addFirst(...t){for(let e=t.length-1;e>=0;e--){const n=t[e];this.painters.unshift(n)}}remove(...t){for(const e of t){const t=this.painters.indexOf(e);-1!==t&&(this.painters.splice(t,1),e.delete())}}removeAll(){for(const t of this.painters)t.delete();this.painters.splice(0,this.painters.length)}delete(){for(const t of this.painters)t.delete();this.painters.splice(0,this.painters.length)}paint(t,e){var n,i;if(this.active){null===(n=this.onEnter)||void 0===n||n.call(this,t,e);for(const n of this.painters)n.active&&n.paint(t,e);null===(i=this.onExit)||void 0===i||i.call(this,t,e)}}debugHierarchy(){return{[this.active?this.name:`${this.name} (Inactive)`]:this.painters.map((t=>t.debugHierarchy()))}}}function at(t,e,n){const i=t.clone().from(e),r=i.distance,s=i.position.clone(),o=i.scale.clone(),a=i.orientation.clone(),h=t.clone().from(n),l=h.orientation.clone(),u=h.position.clone(),d=h.scale.clone(),m=h.distance;return e=>{t.distance=c(r,m,e),t.position.fromMix(s,u,e),t.scale.fromMix(o,d,e),t.orientation.fromSlerp(a,l,e),t.updateMatrix()}}function ht(t,e){var n,i;const r=new Q(t.transfo).from(e);r.debug(),"number"==typeof e.distance&&(r.distance=e.distance);const s=t.zoom,o=null!==(n=e.zoom)&&void 0!==n?n:s,a=at(t.transfo,{},r),h=t.spaceHeightAtTarget,l=null!==(i=e.spaceHeightAtTarget)&&void 0!==i?i:t.spaceHeightAtTarget;return n=>{a(n),"number"==typeof e.spaceHeightAtTarget&&(t.spaceHeightAtTarget=c(h,l,n)),t.zoom=c(s,o,n)}}function ct(t){return t}function lt(t){return 1-(1-t)*(1-t)}function ut(t){return 1-Math.pow(1-t,3)}function dt(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2}function mt(t,e,n,i=0){const r=e+i;return(t-r)/(n-r)}function ft(t,e,n={}){const i=[];let r=t,s=1;for(const n of e){const e=new Q(r).from(n.transfo);i.push(Object.assign(Object.assign({name:"Step#"+s++},n),{action:at(t,r,e)})),r=e}return function(t,e={}){if(0===t.length)return{action(){},duration:0};const{intervals:n,duration:i}=function(t){var e;const n=[];let i=0,r=0;for(const s of t){const t=s.duration+(null!==(e=s.delay)&&void 0!==e?e:0);r=i+t,n.push({animation:s,begin:i,end:r}),i+=t}return{intervals:n,duration:r}}(t);let r=null,s="???";return Object.assign(Object.assign({},e),{duration:i,onEnd(){var t,n;null===(t=null==r?void 0:r.onEnd)||void 0===t||t.call(r),null===(n=e.onEnd)||void 0===n||n.call(e)},action(t){var e,o,a;const h=t*i;for(const{animation:t,begin:i,end:c}of n)if(h>=i&&h<=c){r&&r!==t&&(null===(e=r.onEnd)||void 0===e||e.call(r)),r=t;const n=mt(h,i,c,t.delay);if(n<0||n>1)return;s!==t.name&&(s=null!==(o=t.name)&&void 0!==o?o:"");const l=null!==(a=t.easingFunction)&&void 0!==a?a:ct;return void t.action(l(n))}}})}(i,n)}function gt(t,e,n){const i=document.createElement("canvas");i.width=t,i.height=e;const r=i.getContext("2d",n);if(!r)throw new Error("Unable to create 2D context!");return{canvas:i,ctx:r}}function pt(t){return!!t&&!Array.isArray(t)&&"object"==typeof t}function At(t){return"string"==typeof t}function vt(t){return"number"==typeof t}function xt(t,e,n="data"){if("unknown"===e)return;if("null"===e){if(null!==t)throw new TypeError(`Expected ${n} to be null and not a ${typeof t}!`);return}if("string"==typeof e){if(typeof t!==e)throw new TypeError(`Expected ${n} to be a ${e} and not a ${typeof t}!`);return}if(Array.isArray(e)){const[i]=e;switch(i){case"array":return void function(t,e,n){if(!Array.isArray(t))throw new TypeError(`Expected ${e} to be an array and not a ${typeof t}!`);const[,i]=n;for(const[n,r]of t.entries())xt(r,i,`${e}[${n}]`)}(t,n,e);case"map":return void function(t,e,n){if(!pt(t))throw new TypeError(`Expected ${e} to be an object and not a ${typeof t}!`);const[,i]=n;for(const n of Object.keys(t))"string"==typeof n&&xt(t[n],i,`${e}[${n}]`)}(t,n,e);case"?":return void function(t,e,n){if(void 0===t)return;const[,i]=n;xt(t,i,e)}(t,n,e);case"|":return void function(t,e,n){const[,...i]=n;let r=new Error(`No type has been defined for this alternative: ${JSON.stringify(n)}!`);for(const n of i)try{return void xt(t,n,e)}catch(t){t instanceof Error&&(r=t)}throw r}(t,n,e);case"tuple":return void function(t,e,[,...n]){if(function(t,e="data"){if(!Array.isArray(t))throw new TypeError(`${e} was expected to be an Array but we got ${typeof t}!`)}(t),n.length!==t.length)throw new TypeError(`Expected ${e} to have ${n.length} elements, not ${t.length}!`);for(const[i,r]of n.entries()){const n=r;xt(t[i],n,`${e}[$i]`)}}(t,n,e);case"partial":return void function(t,e,[,n]){!function(t,e="data"){if(!pt(t))throw new TypeError(`${e} was expected to be an object but we got ${typeof t}!`)}(t,e);for(const i of Object.keys(n)){if("string"!=typeof i)continue;const r=t[i];void 0!==r&&xt(r,n[i],`${e}.${i}`)}}(t,n,e);case"literal":return void function(t,e,n){const[,...i]=n;for(const e of i)if(t===e)return;throw new TypeError(`Expected ${e} to be a literal (${i.map((t=>`"${t}"`)).join(" | ")})!`)}(t,n,e);default:if(i.startsWith("array("))return void function(t,e,n,i){if(!Array.isArray(t))throw new TypeError(`Expected ${e} to be an array and not a ${typeof t}!`);if(t.length!==i)throw new TypeError(`${e} was expected to have a length of ${i}, but we got ${t.length}!`);const[,r]=n;for(const[n,i]of t.entries())xt(i,r,`${e}[${n}]`)}(t,n,e,Number.parseInt(i.slice(6,-1),10));throw new TypeError(`Don't know how to create a type guard for this kind of type: ${JSON.stringify(e)}`)}}if("object"!=typeof t)throw new TypeError(`Expected ${n} to be an object and not a ${typeof t}!`);const i=t;for(const t of Object.keys(e))"string"==typeof t&&xt(i[t],e[t],`${n}.${t}`)}function bt(t){xt(t,["partial",{accessors:["array",{bufferView:["?","number"],byteOffset:["?","number"],componentType:"number",normalized:["?","boolean"],count:"number",type:"string",name:["?","string"]}],meshes:["array",{name:"string",primitives:["array",{attributes:["map","number"],indices:["?","number"],mode:["?","number"],material:["?","number"]}]}],images:["array",["partial",{bufferView:"number",mimeType:"string",name:"string",uri:"string"}]],bufferViews:["array",{buffer:"number",byteLength:"number",byteOffset:["?","number"],byteStride:["?","number"],target:["?","number"]}],materials:["array",yt],samplers:["array",["partial",{minFilter:"number",magFilter:"number",wrapS:"number",wrapT:"number",name:"string"}]],textures:["array",["partial",{sampler:"number",source:"number",name:"string"}]]}])}const Et={index:"number",texCoord:["?","number"]},yt=["partial",{name:"string",pbrMetallicRoughness:["partial",{baseColorFactor:["array(4)","number"],baseColorTexture:Et,metallicFactor:"number",roughnessFactor:"number",metalicRoughnessTexture:Et}],normalTexture:Object.assign(Object.assign({},Et),{scale:["?","number"]}),occlusionTexture:Object.assign(Object.assign({},Et),{strength:["?","number"]}),emissiveTexture:Et,alphaMode:["literal","OPAQUE","MASK","BLEND"],alphaCutoff:"number",doubleSided:"boolean"}];var wt,_t,Tt,Ct,Mt,Rt,Lt;function Pt(t,e){e.enabled?t.enable(t.BLEND):t.disable(t.BLEND),t.blendEquationSeparate(e.equationColor,e.equationAlpha),t.blendFuncSeparate(e.functionColorSrc,e.functionColorDst,e.functionAlphaSrc,e.functionAlphaDst)}!function(t){t[t.NEVER=WebGL2RenderingContext.NEVER]="NEVER",t[t.LESS=WebGL2RenderingContext.LESS]="LESS",t[t.EQUAL=WebGL2RenderingContext.EQUAL]="EQUAL",t[t.LEQUAL=WebGL2RenderingContext.LEQUAL]="LEQUAL",t[t.GREATER=WebGL2RenderingContext.GREATER]="GREATER",t[t.NOTEQUAL=WebGL2RenderingContext.NOTEQUAL]="NOTEQUAL",t[t.GEQUAL=WebGL2RenderingContext.GEQUAL]="GEQUAL",t[t.ALWAYS=WebGL2RenderingContext.ALWAYS]="ALWAYS"}(wt||(wt={})),function(t){t[t.FUNC_ADD=WebGL2RenderingContext.FUNC_ADD]="FUNC_ADD",t[t.FUNC_SUBTRACT=WebGL2RenderingContext.FUNC_SUBTRACT]="FUNC_SUBTRACT",t[t.FUNC_REVERSE_SUBTRACT=WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT]="FUNC_REVERSE_SUBTRACT",t[t.MIN=WebGL2RenderingContext.MIN]="MIN",t[t.MAX=WebGL2RenderingContext.MAX]="MAX"}(_t||(_t={})),function(t){t[t.ZERO=WebGL2RenderingContext.ZERO]="ZERO",t[t.ONE=WebGL2RenderingContext.ONE]="ONE",t[t.SRC_COLOR=WebGL2RenderingContext.SRC_COLOR]="SRC_COLOR",t[t.ONE_MINUS_SRC_COLOR=WebGL2RenderingContext.ONE_MINUS_SRC_COLOR]="ONE_MINUS_SRC_COLOR",t[t.DST_COLOR=WebGL2RenderingContext.DST_COLOR]="DST_COLOR",t[t.ONE_MINUS_DST_COLOR=WebGL2RenderingContext.ONE_MINUS_DST_COLOR]="ONE_MINUS_DST_COLOR",t[t.SRC_ALPHA=WebGL2RenderingContext.SRC_ALPHA]="SRC_ALPHA",t[t.ONE_MINUS_SRC_ALPHA=WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA]="ONE_MINUS_SRC_ALPHA",t[t.DST_ALPHA=WebGL2RenderingContext.DST_ALPHA]="DST_ALPHA",t[t.ONE_MINUS_DST_ALPHA=WebGL2RenderingContext.ONE_MINUS_DST_ALPHA]="ONE_MINUS_DST_ALPHA",t[t.CONSTANT_COLOR=WebGL2RenderingContext.CONSTANT_COLOR]="CONSTANT_COLOR",t[t.ONE_MINUS_CONSTANT_COLOR=WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR]="ONE_MINUS_CONSTANT_COLOR",t[t.CONSTANT_ALPHA=WebGL2RenderingContext.CONSTANT_ALPHA]="CONSTANT_ALPHA",t[t.ONE_MINUS_CONSTANT_ALPHA=WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA]="ONE_MINUS_CONSTANT_ALPHA",t[t.SRC_ALPHA_SATURATE=WebGL2RenderingContext.SRC_ALPHA_SATURATE]="SRC_ALPHA_SATURATE"}(Tt||(Tt={})),function(t){t[t.NEVER=WebGL2RenderingContext.NEVER]="NEVER",t[t.LESS=WebGL2RenderingContext.LESS]="LESS",t[t.EQUAL=WebGL2RenderingContext.EQUAL]="EQUAL",t[t.LEQUAL=WebGL2RenderingContext.LEQUAL]="LEQUAL",t[t.GREATER=WebGL2RenderingContext.GREATER]="GREATER",t[t.NOTEQUAL=WebGL2RenderingContext.NOTEQUAL]="NOTEQUAL",t[t.GEQUAL=WebGL2RenderingContext.GEQUAL]="GEQUAL",t[t.ALWAYS=WebGL2RenderingContext.ALWAYS]="ALWAYS"}(Ct||(Ct={})),function(t){t[t.KEEP=WebGL2RenderingContext.KEEP]="KEEP",t[t.ZERO=WebGL2RenderingContext.ZERO]="ZERO",t[t.REPLACE=WebGL2RenderingContext.REPLACE]="REPLACE",t[t.INCR=WebGL2RenderingContext.INCR]="INCR",t[t.INCR_WRAP=WebGL2RenderingContext.INCR_WRAP]="INCR_WRAP",t[t.DECR=WebGL2RenderingContext.DECR]="DECR",t[t.DECR_WRAP=WebGL2RenderingContext.DECR_WRAP]="DECR_WRAP",t[t.INVERT=WebGL2RenderingContext.INVERT]="INVERT"}(Mt||(Mt={})),function(t){t[t.FRONT=WebGL2RenderingContext.FRONT]="FRONT",t[t.BACK=WebGL2RenderingContext.BACK]="BACK",t[t.FRONT_AND_BACK=WebGL2RenderingContext.FRONT_AND_BACK]="FRONT_AND_BACK"}(Rt||(Rt={})),function(t){t[t.ALPHA=WebGL2RenderingContext.ALPHA]="ALPHA",t[t.RGB=WebGL2RenderingContext.RGB]="RGB",t[t.RGBA=WebGL2RenderingContext.RGBA]="RGBA",t[t.LUMINANCE=WebGL2RenderingContext.LUMINANCE]="LUMINANCE",t[t.LUMINANCE_ALPHA=WebGL2RenderingContext.LUMINANCE_ALPHA]="LUMINANCE_ALPHA"}(Lt||(Lt={})),_t.FUNC_ADD,_t.FUNC_ADD,Tt.SRC_ALPHA,Tt.ONE_MINUS_SRC_ALPHA,Tt.ONE,Tt.ZERO,_t.FUNC_ADD,_t.FUNC_ADD,Tt.SRC_ALPHA,Tt.ONE_MINUS_SRC_ALPHA,Tt.ONE,Tt.ZERO,_t.FUNC_ADD,_t.FUNC_ADD,Tt.ONE,Tt.ONE_MINUS_SRC_ALPHA,Tt.ONE,Tt.ZERO;const St={off:{enabled:!1,cullFace:Rt.BACK},back:{enabled:!0,cullFace:Rt.BACK},front:{enabled:!0,cullFace:Rt.FRONT}};function It(t,e){e.enabled?t.enable(t.CULL_FACE):t.disable(t.CULL_FACE),t.cullFace(e.cullFace)}function Nt(t){return{enabled:Boolean(t.getParameter(t.CULL_FACE)),cullFace:t.getParameter(t.CULL_FACE_MODE)}}const Bt={off:{enabled:!1,func:wt.LESS,mask:!0,rangeMin:0,rangeMax:1},less:{enabled:!0,func:wt.LESS,mask:!0,rangeMin:0,rangeMax:1},lessOrEqual:{enabled:!0,func:wt.LEQUAL,mask:!0,rangeMin:0,rangeMax:1}};function Ot(t,e){e.enabled?t.enable(t.DEPTH_TEST):t.disable(t.DEPTH_TEST),t.depthFunc(e.func),t.depthMask(e.mask),t.depthRange(e.rangeMin,e.rangeMax)}const Ut={off:{enabled:!1,maskBack:0,maskFront:0,functionBack:Ct.ALWAYS,functionBackMask:0,functionBackRef:0,functionFront:Ct.ALWAYS,functionFrontMask:0,functionFrontRef:0,operationBack1FailStencil:Mt.KEEP,operationBack2FailDepth:Mt.KEEP,operationBack3Pass:Mt.KEEP,operationFront1FailStencil:Mt.KEEP,operationFront2FailDepth:Mt.KEEP,operationFront3Pass:Mt.KEEP},write:t=>({enabled:!0,maskBack:255,maskFront:255,functionBack:Ct.ALWAYS,functionBackRef:t,functionBackMask:255,functionFront:Ct.ALWAYS,functionFrontRef:t,functionFrontMask:255,operationBack1FailStencil:Mt.KEEP,operationBack2FailDepth:Mt.KEEP,operationBack3Pass:Mt.REPLACE,operationFront1FailStencil:Mt.KEEP,operationFront2FailDepth:Mt.KEEP,operationFront3Pass:Mt.REPLACE}),paintIfEqual:t=>({enabled:!0,maskBack:0,maskFront:0,functionBack:Ct.EQUAL,functionBackRef:t,functionBackMask:255,functionFront:Ct.EQUAL,functionFrontRef:t,functionFrontMask:255,operationBack1FailStencil:Mt.KEEP,operationBack2FailDepth:Mt.KEEP,operationBack3Pass:Mt.KEEP,operationFront1FailStencil:Mt.KEEP,operationFront2FailDepth:Mt.KEEP,operationFront3Pass:Mt.KEEP})};function Ft(t,e){e.enabled?(t.enable(t.STENCIL_TEST),t.stencilFuncSeparate(t.FRONT,e.functionFront,e.functionFrontRef,e.functionFrontMask),t.stencilFuncSeparate(t.BACK,e.functionBack,e.functionBackRef,e.functionBackMask),t.stencilOpSeparate(t.FRONT,e.operationFront1FailStencil,e.operationFront2FailDepth,e.operationFront3Pass),t.stencilOpSeparate(t.BACK,e.operationBack1FailStencil,e.operationBack2FailDepth,e.operationBack3Pass),t.stencilMaskSeparate(t.FRONT,e.maskFront),t.stencilMaskSeparate(t.BACK,e.maskBack)):t.disable(t.STENCIL_TEST)}class Dt{constructor(){this.animations=new Map}schedule(t){var e;t.name||(t.name="TgdAnimation#"+Dt.counter++);const{action:n,duration:i,easingFunction:r,repeat:s}=t;return this.animations.set(t,{start:-1,delay:null!==(e=t.delay)&&void 0!==e?e:0,duration:i,inverseDuration:1/i,action:r?t=>n(r(t)):n,loop:1,repeat:null!=s?s:1,cancel:()=>this.cancel(t),onEnd:t.onEnd}),t}cancel(t){this.animations.delete(t)}paint(t){var e;if(0===this.animations.size)return!1;for(const n of this.animations.values()){n.start<0&&(n.start=t+n.delay);const i=t-n.start;if(i<0)continue;const r=Math.min(1,n.inverseDuration*i);for(n.action(r);t>n.start+n.duration;){try{null===(e=n.onEnd)||void 0===e||e.call(n)}catch(t){console.error("Animation.onEnd() failed for",n),console.error(t)}n.loop++,n.start+=n.duration}n.loop>n.repeat&&n.cancel()}return!0}}Dt.counter=1;class $t{constructor(t,e={}){var n;this.canvas=t,this.options=e,this.eventPaint=new et,this._camera=new tt({transfo:{distance:15},far:100,near:.1,fovy:Math.PI/8,zoom:1}),this._aspectRatio=1,this._aspectRatioInverse=1,this.isPlaying=!1,this.requestAnimationFrame=-1,this.lastTime=-1,this.timeShift=0,this.animationManager=new Dt,this.paint=()=>{this.requestAnimationFrame=globalThis.requestAnimationFrame(this.actualPaint)},this.actualPaint=t=>{this.timeShift=t-Date.now();const{lastTime:e,gl:n}=this;if(e<0)return this.lastTime=t,void this.paint();const i=t-this.lastTime;if(i<1.016)return;this.lastTime=t,this._camera.screenWidth=n.drawingBufferWidth,this._camera.screenHeight=n.drawingBufferHeight,this._aspectRatio=n.drawingBufferWidth/n.drawingBufferHeight,this._aspectRatioInverse=1/this._aspectRatio;const r=.001*t,s=.001*i;this.painters.paint(r,s),(this.animationManager.paint(r)||this.isPlaying)&&this.paint(),this.eventPaint.dispatch(this)};const i=t.getContext("webgl2",e);if(!i)throw new Error("Unable to create a WebGL2 context!");e.enableTextureFloatStorage&&i.getExtension("EXT_color_buffer_float"),this.implementationColorReadFormat=i.getParameter(i.IMPLEMENTATION_COLOR_READ_FORMAT),this.implementationColorReadType=i.getParameter(i.IMPLEMENTATION_COLOR_READ_TYPE),this.gl=i,this.observer=new ResizeObserver((()=>{var n;const r=t.clientWidth,s=t.clientHeight;t.width=r,t.height=s,i.viewport(0,0,r,s),this.paint(),null===(n=e.onResize)||void 0===n||n.call(e,this,t.clientWidth,t.clientHeight)})),this.observer.observe(t),this.inputs=new rt(t),e.camera&&(this._camera=e.camera),this.painters=new ot,this.name=null!==(n=e.name)&&void 0!==n?n:"Context#"+$t.incrementalId++,this.painters.name=this.name,t.style.touchAction="none",this.stateReset()}get time(){return Date.now()+this.timeShift}debugHierarchy(){return this.painters.debugHierarchy()}get camera(){return this._camera}set camera(t){t!==this._camera&&(this._camera=t,this.paint())}animSchedule(...t){var e,n;const i=[];let r=0;for(const s of t){const t=s.duration+(null!==(e=s.delay)&&void 0!==e?e:0);s.delay=r+(null!==(n=s.delay)&&void 0!==n?n:0),r+=t,i.push(this.animationManager.schedule(s))}return this.paint(),i}animCancel(t){this.animationManager.cancel(t)}get onEnter(){return this.painters.onEnter}set onEnter(t){this.painters.onEnter=t}get onExit(){return this.painters.onExit}set onExit(t){this.painters.onExit=t}get width(){return this.gl.drawingBufferWidth}get height(){return this.gl.drawingBufferHeight}get aspectRatio(){return this._aspectRatio}get aspectRatioInverse(){return this._aspectRatioInverse}get playing(){return this.isPlaying}set playing(t){t!==this.isPlaying&&(t&&this.paint(),this.isPlaying=t)}play(){this.playing=!0}pause(){this.playing=!1}has(t){return this.painters.has(t)}add(...t){this.painters.add(...t)}addFirst(...t){this.painters.addFirst(...t)}remove(...t){this.painters.remove(...t)}removeAll(){this.painters.removeAll()}takeSnapshot(t){const e=t.getContext("2d");if(!e)throw new Error("[TgdContext.takeSnapshot] We cannot get a 2D context for the target canvas! Maybe it already has another type of context.");const{width:n,height:i}=t,r=function(t,e){const n=document.createElement("canvas");return n.width=t,n.height=e,n}(n,i),s=new $t(r,this.options);this.painters.forEachChild((t=>s.add(t))),s.actualPaint(this.lastTime),s.gl.finish(),e.drawImage(r,0,0)}lookupWebglConstant(t){const{gl:e}=this;for(const n in e)if(e[n]===t)return n;return`Unknown gl[${t}]`}destroy(){globalThis.cancelAnimationFrame(this.requestAnimationFrame),this.playing=!1,this.painters.delete(),this.observer.unobserve(this.canvas)}stateReset(){const{gl:t}=this,e=t.getParameter(t.MAX_VERTEX_ATTRIBS),n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n);for(let n=0;n<e;++n)t.disableVertexAttribArray(n),t.vertexAttribPointer(n,4,t.FLOAT,!1,0,0),t.vertexAttrib1f(n,0);t.deleteBuffer(n);const i=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);for(let e=0;e<i;++e)t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_CUBE_MAP,null),t.bindTexture(t.TEXTURE_2D,null);return t.activeTexture(t.TEXTURE0),t.useProgram(null),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.DITHER),t.disable(t.SCISSOR_TEST),t.blendColor(0,0,0,0),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.clearColor(0,0,0,0),t.clearDepth(1),t.clearStencil(-1),t.colorMask(!0,!0,!0,!0),t.cullFace(t.BACK),t.depthFunc(t.LESS),t.depthMask(!0),t.depthRange(0,1),t.frontFace(t.CCW),t.hint(t.GENERATE_MIPMAP_HINT,t.DONT_CARE),t.lineWidth(1),t.pixelStorei(t.PACK_ALIGNMENT,4),t.pixelStorei(t.UNPACK_ALIGNMENT,4),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),t.polygonOffset(0,0),t.sampleCoverage(1,!1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilMask(4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),t}}$t.incrementalId=1;class kt{constructor(t,{geo:e,minZoom:n=.001,maxZoom:i=1/0,speedZoom:r=1,speedOrbit:s=1,speedPanning:o=1,inertiaZoom:a=0,inertiaOrbit:h=0,inertiaPanning:c=0,fixedTarget:l=!1,debug:u=!1,onZoomRequest:d=Gt}={}){this.context=t,this.id="TgdControllerCameraOrbit-"+kt.counter++,this.eventChange=new et,this.minZoom=.001,this.maxZoom=1/0,this.speedZoom=1,this.speedOrbit=1,this.speedPanning=1,this.inertiaZoom=0,this.inertiaOrbit=0,this.inertiaPanning=0,this.fixedTarget=!1,this._enabled=!0,this.animOrbit=null,this.disabledUntil=0,this.tmpQuat=new H,this.handleMove=t=>{this.enabled&&!this.animOrbit&&this.actualMove(t)},this.actualMove=t=>{if(t.current.t-t.previous.t<=0)return;const{context:e}=this,{keyboard:n}=e.inputs;if(t.altKey||2===t.current.fingersCount)return this.handlePan(t);if(this.geo){const e=n.isDown("Shift")?.2:2,i=n.isDown("x")?0:e*(t.previous.x-t.current.x),r=n.isDown("y")?0:e*(t.previous.y-t.current.y),s=this.geo.lng+i,o=this.geo.lat+r;this.orbitGeo(o,s)}else{if(n.isDown("z"))return this.handleRotateAroundZ(t);this.orbit(t.current.x-t.previous.x,t.current.y-t.previous.y,t.shiftKey)}},this.handleMoveStart=()=>{if(!this.enabled)return;const{animOrbit:t,context:e}=this;t&&(e.animCancel(t),this.animOrbit=null)},this.handleMoveEnd=t=>{if(!this.enabled)return;const{context:e,inertiaOrbit:n}=this;if(n>0){const i=1/(t.current.t-t.previous.t),r=i*(t.current.x-t.previous.x),s=i*(t.current.y-t.previous.y),o=structuredClone(t);o.current.t=Date.now(),this.animOrbit={duration:.001*n,action:t=>{o.previous.t=o.current.t,o.previous.x=o.current.x,o.previous.y=o.current.y,o.previous.fingersCount=o.current.fingersCount,o.current.t=Date.now();const e=(1-t)*(o.current.t-o.previous.t);o.current.x+=e*r,o.current.y+=e*s,this.actualMove(o)},easingFunction:lt},e.animSchedule(this.animOrbit)}},this.handleZoom=t=>{if(!this.enabled||0===this.speedZoom||!this.onZoomRequest({altKey:t.altKey,ctrlKey:t.ctrlKey,metaKey:t.metaKey,shiftKey:t.shiftKey,x:t.current.x,y:t.current.y}))return;const{context:e}=this,{camera:n}=e;let i=.1*this.speedZoom;this.context.inputs.keyboard.isDown("Shift")&&(i*=.1);const r=-t.direction*i;n.transfo.distance=Math.max(0,n.transfo.distance+r),t.preventDefault(),this.fireZoomChange()},this.geo=void 0,e&&(this.geo=Object.assign({lat:0,lng:0,minLat:-Math.PI/2,maxLat:+Math.PI/2,minLng:-Number.MAX_VALUE,maxLng:+Number.MAX_VALUE},e)),this.cameraInitialState=t.camera.getCurrentState();const{inputs:m}=t;m.pointer.eventMoveStart.addListener(this.handleMoveStart),m.pointer.eventMoveEnd.addListener(this.handleMoveEnd),m.pointer.eventMove.addListener(this.handleMove),m.pointer.eventZoom.addListener(this.handleZoom),this.speedOrbit=s,this.speedZoom=r,this.speedPanning=o,this.inertiaOrbit=h,this.inertiaZoom=a,this.inertiaPanning=c,this.fixedTarget=l,this.minZoom=n,this.maxZoom=i,this.onZoomRequest=d,this.geo&&this.orbitGeo(this.geo.lat,this.geo.lng),globalThis.setTimeout((()=>t.paint())),u&&t.inputs.keyboard.eventKeyPress.addListener((t=>{"?"===t.key&&console.log(this.context.camera.toCode())}))}get enabled(){return this.context.time>this.disabledUntil&&this._enabled}set enabled(t){this._enabled=t}reset(t,e){const{context:n}=this;this.disableForSomeTime(t),n.animSchedule({action:ht(n.camera,this.cameraInitialState),duration:t,easingFunction:e})}disableForSomeTime(t){this.disabledUntil=Math.max(this.disabledUntil,this.context.time+t)}detach(){const{inputs:t}=this.context;t.pointer.eventMove.removeListener(this.handleMove),t.pointer.eventZoom.removeListener(this.handleZoom)}orbit(t,e,n){const{context:i}=this,{camera:r}=i,{keyboard:s}=i.inputs,o=3*(n?.1:1)*this.speedOrbit,a=t*o,h=e*o;s.isDown("x")||r.transfo.orbitAroundY(a),s.isDown("y")||r.transfo.orbitAroundX(-h),this.fireOrbitChange()}orbitGeo(t,e){const{geo:n}=this;if(!n)return;t=h(t,n.minLat,n.maxLat),n.lat=t,e=h(e,n.minLng,n.maxLng),n.lng=e;const{orientation:i}=this.cameraInitialState,r=zt(t,e),s=zt(t+Math.PI/2,e),o=new u(s).cross(r),a=new I;i.toMatrix(a);const c=new I(o,s,r);c.multiply(a),this.tmpQuat.fromMatrix(c),this.context.camera.transfo.orientation=this.tmpQuat,this.fireOrbitChange()}handlePan(t){const{fixedTarget:e,speedPanning:n,context:i}=this,{camera:r}=i,s=.5*n*(1/r.zoom),o=(t.current.x-t.previous.x)*s*r.spaceWidthAtTarget,a=(t.current.y-t.previous.y)*s*r.spaceHeightAtTarget;e||r.transfo.moveAlongAxes(-o,-a,0),this.fireOrbitChange()}handleRotateAroundZ(t){const{camera:e}=this.context,n=t.previous.x,i=t.previous.y;if(Math.abs(n)+Math.abs(i)===0)return;const r=t.current.x,s=t.current.y;if(Math.abs(r)+Math.abs(s)===0)return;const o=n*r+i*s,a=n*s-i*r,h=Math.atan2(a,o)*this.speedOrbit;e.transfo.orbitAroundZ(h),this.fireOrbitChange()}fireOrbitChange(){this.context.paint(),this.eventChange.dispatch(this.context.camera)}fireZoomChange(){this.context.paint()}}kt.counter=0;const Gt=()=>!0;function zt(t,e){const n=Math.cos(t),i=Math.sin(t),r=n*Math.cos(e),s=n*Math.sin(e);return new u(s,i,r)}function Wt(t){if("string"==typeof t)return!0;if(!Array.isArray(t))return!1;for(const e of t)if(!Wt(e))return!1;return!0}function jt(t,e="",n){if("string"==typeof t)return`${e}${t}`;if(!t)return"";const i=null!=n?n:new Set;if(!Array.isArray(t))return Object.keys(t).map((e=>i.has(e)?null:(i.add(e),`// ${e}\n${t[e]}\n`))).filter((t=>At(t))).join("\n");const r=`${e}    `;return t.filter((t=>null!==t)).filter((t=>!Array.isArray(t)||t.length>0)).map((t=>jt(t,r,i))).join("\n")}function Vt(t,e,n="----------------------------------------"){const i=Object.keys(t);return 0===i.length?[]:[`// ${n}`,...i.map((n=>`${e} ${t[n]} ${n};`))]}function Xt(t,e){if(Wt(t))return[t];const n=Object.keys(t);if(0===n.length)return[];const i=e?[`// ${e}`]:[];for(const e of n)i.push(t[e],"");return i}class Ht{constructor(t,e){var n;this.gl=t,this.code=e;const i=t.createProgram();if(!i)throw new Error("Unable to create WebGLProgram!");const r=jt(e.vert),s=this.createShader("VERTEX_SHADER",r);t.attachShader(i,s);const o=jt(e.frag),a=this.createShader("FRAGMENT_SHADER",o);if(t.attachShader(i,a),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS)){const e=null!==(n=t.getProgramInfoLog(i))&&void 0!==n?n:"";console.warn(e);const s=Zt(e),a=[Qt("Vertex Shader",r,s),Qt("Fragment Shader",o,s)].join("\n");throw new Error(a)}this.program=i,this.shaders=[s,a],this.uniformsLocations=this.getUniformsLocations(),t.detachShader(i,s),t.deleteShader(s),t.detachShader(i,a),t.deleteShader(a)}toCode({indent:t=""}={}){return["function createProgram(gl: WebGL2RenderingContext) {","  const prg = gl.createProgram()","  const vertexShader = gl.createShader(gl.VERTEX_SHADER)",`  gl.shaderSource(vertexShader, \`${jt(this.code.vert)}\`)`,"  gl.compileShader(vertexShader)","  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)",`  gl.shaderSource(fragmentShader, \`${jt(this.code.frag)}\`)`,"  gl.compileShader(fragmentShader)","  gl.attachShader(prg, vertexShader)","  gl.attachShader(prg, fragmentShader)","  gl.linkProgram(prg)","  return prg","}"].map((e=>`${t}${e}`)).join("\n")}hasAttribute(t){const{gl:e,program:n}=this;return e.getAttribLocation(n,t)>=0}getAttribLocation(t){const{gl:e,program:n}=this,i=e.getAttribLocation(n,t);if(i<0)throw new Error(`Attribute "${t}" not found!`);return i}getUniformLocation(t){const{uniformsLocations:e}=this,n=Object.keys(e);if(0===t.length)return console.warn(`Uniform "${t}" has not been found: there is no active uniform in this program!`),0;const i=e[t];return i||console.warn(`No active uniform found with name "${t}"!\nAvailable names are: ${n.join(", ")}.`),i}uniform1f(t,e){const{gl:n}=this;n.uniform1f(this.getUniformLocation(t),e)}uniform2f(t,e,n){const{gl:i}=this;i.uniform2f(this.getUniformLocation(t),e,n)}uniform3f(t,e,n,i){const{gl:r}=this;r.uniform3f(this.getUniformLocation(t),e,n,i)}uniform3fv(t,e){const{gl:n}=this;n.uniform3fv(this.getUniformLocation(t),e)}uniform4f(t,e,n,i,r){const{gl:s}=this;s.uniform4f(this.getUniformLocation(t),e,n,i,r)}uniform4fv(t,e){const{gl:n}=this;n.uniform4fv(this.getUniformLocation(t),e)}uniform1i(t,e){const{gl:n}=this;n.uniform1i(this.getUniformLocation(t),e)}uniform2i(t,e,n){const{gl:i}=this;i.uniform2i(this.getUniformLocation(t),e,n)}uniform3i(t,e,n,i){const{gl:r}=this;r.uniform3i(this.getUniformLocation(t),e,n,i)}uniform4i(t,e,n,i,r){const{gl:s}=this;s.uniform4i(this.getUniformLocation(t),e,n,i,r)}uniform1ui(t,e){const{gl:n}=this;n.uniform1ui(this.getUniformLocation(t),e)}uniform2ui(t,e,n){const{gl:i}=this;i.uniform2ui(this.getUniformLocation(t),e,n)}uniform3ui(t,e,n,i){const{gl:r}=this;r.uniform3ui(this.getUniformLocation(t),e,n,i)}uniform4ui(t,e,n,i,r){const{gl:s}=this;s.uniform4ui(this.getUniformLocation(t),e,n,i,r)}uniformMatrix3fv(t,e){const{gl:n}=this;n.uniformMatrix3fv(this.getUniformLocation(t),!1,e)}uniformMatrix4fv(t,e){const{gl:n}=this;n.uniformMatrix4fv(this.getUniformLocation(t),!1,e)}use(){const{gl:t,program:e}=this;t.useProgram(e)}delete(){const{gl:t}=this;for(const e of this.shaders)t.deleteShader(e);t.deleteProgram(this.program)}debug(t="TgdProgram"){console.log(t);const{code:e}=this;Qt("Vertex Shader",jt(e.vert)),Qt("Fragment Shader",jt(e.frag))}createShader(t,e){const{gl:n}=this,i=n.createShader(n[t]);if(!i)throw new Error(`Unable to create a WebGLShader of type "${t}"!`);n.shaderSource(i,e),n.compileShader(i);const r=n.getShaderInfoLog(i);if(r){console.error(`Error in ${t} code:`,r);const n=Zt(r);throw new Error(Qt(t,e,n))}return i}getUniformsLocations(){const{gl:t,program:e}=this,n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);if("number"!=typeof n)throw new Error("Unable to get the number of uniforms in a WebGLProgram!");const i={};for(let r=0;r<n;r++){const n=t.getActiveUniform(e,r);if(!n)continue;const s=t.getUniformLocation(e,n.name);if(null===s)throw new Error(`Unable to get location for uniform "${n.name}"!`);i[n.name]=s}return i}}const Yt=/^ERROR:[ \t]+([0-9]+):([0-9]+):/g;function Zt(t){const e=[],n=[];for(const i of t.split("\n")){Yt.lastIndex=-1;const t=Yt.exec(i);t&&(e.push(Number.parseInt(t[2],10)),n.push(i.slice(t[0].length).trim()))}return{lines:e,messages:n}}function Kt(t,e=!1){return`color:#fff;background:${t};font-family:monospace;font-size:80%;font-weight:${e?"bolder":"100"};margin:0;color:${e?"#777":"#fff"}`}function Qt(t,e,n){const{lines:i=[],messages:r=[]}=null!=n?n:{},s=[t],o=[`%c${t}`],a=["font-weight:bolder;font-size:120%"];let h=!1;for(const[t,n]of e.split("\n").entries()){const e=t+1,c=`${e}`.padStart(5," "),l=i.includes(e)?"#f00":"#000";o.push(`%c${c}  %c${n}`),s.push(`${c}  ${n}`),a.push(Kt(l,!0),Kt(l,!1)),i.includes(e)&&(h=!0,o.push(`%c${r[i.indexOf(e)]}`),s.push(`##### ${r[i.indexOf(e)]}`),a.push("color:#f33;background:#333;font-weight:bold"),console.error())}return console.log(o.join("\n"),...a),h?s.join("\n"):""}class qt{constructor(t,e={}){var n,i;this.attributesDefinition=t,this.options=e,this.stride=0,this.definitions={},this._data=new ArrayBuffer(0),this._count=0,this.target=null!==(n=e.target)&&void 0!==n?n:"ARRAY_BUFFER",this.usage=null!==(i=e.usage)&&void 0!==i?i:"STATIC_DRAW",this.initialize(t,e)}initialize(t,e={}){var n;for(const e of Object.keys(t)){const n=t[e];this.attributesDefinition[e]=n}const i=null!==(n=e.divisor)&&void 0!==n?n:0;let r=0;const s={},o={};for(const e of Object.keys(t)){s[e]=new ArrayBuffer(0);const n={dimension:Jt[t[e]],byteOffset:r,bytesPerElement:Float32Array.BYTES_PER_ELEMENT,divisor:i,getter:(t,e)=>(e>=t.byteLength&&(e%=t.byteLength),t.getFloat32(e,!0)),setter(t,e,n){t.setFloat32(e,n,!0)}};o[e]=n,r+=n.bytesPerElement*n.dimension}this.definitions=o,this.stride=r,this._data=te(this._data,this.count*this.stride)}assertAttribType(t,...e){const n=this.attributesDefinition[t];if(!n)throw new Error(`Attribute "${t}" does not exist! Available names are: ${Object.keys(this.attributesDefinition).join(", ")}.`);if(!e.includes(n))throw new Error(`Attribute "${t}" is of type "${n}", which is not ${e.join(" nor ")}!`);return this}addAttributes(t){const e=this.clone();for(const e of Object.keys(t)){const n=this.attributesDefinition[e],i=t[e];if(n&&n!==i)throw new Error(`It is not allowed to change the type of attribute "${e}" from "${n}" to "${i}"! Prefer removing the attribute first.`)}this.initialize(Object.assign(Object.assign({},this.attributesDefinition),t),this.options);const n=this;n.count=e.count;for(const t of e.attributesNames)try{const{get:i}=e.getAttribAccessor(t),{set:r}=n.getAttribAccessor(t);for(let n=0;n<e.count;n++){const e=this.getDef(t);for(let t=0;t<e.dimension;t++)r(i(n,t),n,t)}}catch(e){const n=e instanceof Error?e.message:JSON.stringify(e);throw new Error(`Unable to clone attribute "${t}"!\n${n}`)}}clone(){const t=new qt(structuredClone(this.attributesDefinition),this.options);t.count=this.count;const e=new DataView(this._data),n=new DataView(t._data);for(let t=0;t<e.byteLength;t++)n.setUint8(t,e.getUint8(t));return t}get data(){return this._data}get count(){return this._count}set count(t){this._count!==t&&(this._count=t,this._data=te(this._data,t*this.stride))}get attributesNames(){return Object.keys(this.attributesDefinition)}getAttribAccessor(t){const e=this.getDef(t),n=new DataView(this.data),i=this.stride;return{get(t,r=0){const s=e.byteOffset+i*t+r*e.bytesPerElement;return e.getter(n,s)},set(t,r,s=0){const o=e.byteOffset+i*r+s*e.bytesPerElement;e.setter(n,o,t)}}}set(t,e,{byteOffset:n=0,byteStride:i,first:r=0,count:s=1/0,targetFirst:o=0}={}){const{bytesPerElement:a,dimension:h,byteOffset:c}=this.getDef(t),l=e instanceof ArrayBuffer?e:e.buffer,u=a*h,d=null!=i?i:u;let m=n+d*r;const f=this.stride;let g=o*f+c;this.count=Math.max(this.count,Math.min(s,Math.floor((l.byteLength-m)/d)));const p=l.byteLength-d+1,A=this._data.byteLength+c-f+1,v=new Uint8Array(l),x=new Uint8Array(this._data);let b=0;for(;b<s&&m<p&&g<A;)x.set(v.subarray(m,m+u),g),b++,m+=d,g+=f}getDef(t){const e=this.definitions[t];if(!e)throw new Error(`[TgdDataset] Attribute "${String(t)}" not found in this DataSet!\nAvailable names are: ${Object.keys(this.definitions).map((t=>JSON.stringify(t))).join(", ")}.`);return e}defineAttributes(t,e){let n=0;const{definitions:i}=this;for(const r of Object.keys(i)){const s=i[r];if(e.hasAttribute(r)){const i=e.getAttribLocation(r);t.enableVertexAttribArray(i),t.vertexAttribPointer(i,s.dimension,t.FLOAT,!1,this.stride,n),t.vertexAttribDivisor(i,s.divisor)}n+=s.dimension*s.bytesPerElement}}toCode({indent:t=""}={}){const e=[];let n=0;const{definitions:i}=this;for(const t of Object.keys(i)){const r=i[t],s=`$${t}`;e.push(`const ${s} = gl.getAttribLocation(prg, "${t}")`,`gl.enableVertexAttribArray(${s})`,"gl.vertexAttribPointer(",`  ${s},`,`  ${r.dimension},  // Dimension`,"  gl.FLOAT,","  false,",`  ${this.stride},   // Stride`,`  ${n}   // Offset`,")",`gl.vertexAttribDivisor(${s}, ${r.divisor})`),n+=r.dimension*r.bytesPerElement}return e.map((e=>`${t}${e}`)).join("\n")}debug(t="Dataset"){console.log(t,"   count:",this.count,"   target:",this.target,"   usage:",this.usage);const e=[["Name","type","offset"]];for(const t of Object.keys(this.definitions)){const n=this.definitions[t];e.push([t,this.attributesDefinition[t],`${n.byteOffset}`])}const n=[0,1,2].map((t=>e.reduce(((e,n)=>Math.max(e,n[t].length)),0)));for(const[t,i,r]of e)console.log(`%c${t.padEnd(n[0]+2)}${i.padStart(n[1]+2)}${r.padStart(n[2]+2)}`,"font-family:monospace");for(const t of Object.keys(this.definitions)){const e=this.definitions[t];if(!e)continue;const{get:n}=this.getAttribAccessor(t),i=[];for(let t=0;t<this.count;t++){const r=[];for(let i=0;i<e.dimension;i++)r.push(n(t,i));i.push(r)}console.log(`Attribute "${t}":`,i)}}}const Jt={float:1,vec2:2,vec3:3,vec4:4},te="function"==typeof ArrayBuffer.prototype.transfer?function(t,e){return t.transfer(e)}:function(t,e){const n=new ArrayBuffer(null!=e?e:t.byteLength);return new Uint8Array(n).set(new Uint8Array(t)),n};class ee{constructor(t,e={}){var n,i;this.gl=t;const r=t.createBuffer();if(!r)throw new Error("Unable to create WebGLBuffer!");this._target=null!==(n=null==e?void 0:e.target)&&void 0!==n?n:"ARRAY_BUFFER",this._usage=null!==(i=null==e?void 0:e.usage)&&void 0!==i?i:"STATIC_DRAW",this.buffer=r;const{data:s}=e;s&&this.bufferData(Object.assign(Object.assign({},e),{data:s}))}get target(){return this._target}bind(t){const{gl:e,buffer:n}=this;this._target=null!=t?t:this._target,e.bindBuffer(e[this._target],n)}bufferData(t){var e,n;const{gl:i}=this;this._usage=null!==(e=t.usage)&&void 0!==e?e:this._usage,this._target=null!==(n=t.target)&&void 0!==n?n:this._target,this.bind(t.target),i.bufferData(i[this._target],t.data,i[this._usage])}delete(){const{gl:t,buffer:e}=this;t.deleteBuffer(e)}}class ne{constructor(t,e,n,i){this.gl=t,this.program=e,this.datasets=n,this.elements=i,this.drawBuffers=[],this.elemBuffer=null;const r=t.createVertexArray();if(!r)throw new Error("Unable to create VertexArrayObject!");if(this.vao=r,e&&n){if(t.bindVertexArray(r),this.drawBuffers=n.map((n=>{const i=new ee(t,{data:n.data,target:n.target,usage:n.usage});return i.bind(),n.defineAttributes(t,e),i})),i){const e=new ee(t,{data:i,target:"ELEMENT_ARRAY_BUFFER"});e.bind(),this.elemBuffer=e}t.bindVertexArray(null)}}getBuffer(t){return this.drawBuffers[t]}toCode({indent:t=""}={}){var e;const n=["function createVAO(","  gl: WebGL2RenderingContext,",`  prg: WebGLProgram${null===(e=this.datasets)||void 0===e?void 0:e.map(((t,e)=>`, data${e}: ArrayBuffer`)).join("")}`,") {","  const vao = gl.createVertexArray()","  gl.bindVertexArray(vao)"];if(this.datasets)for(const[e,i]of this.datasets.entries())n.push(`  const buff${e} = gl.createBuffer()`,`  gl.bindBuffer(gl.${i.target}, buff${e})`,`  gl.bufferData(gl.${i.target}, data${e}, gl.${i.usage})`,i.toCode({indent:`${t}  `}));return n.push("  return vao","}"),n.map((e=>`${t}${e}`)).join("\n")}debug(t="TgdVertexArray"){if(console.log(t),this.program&&this.program.debug(),this.datasets)for(const[t,e]of this.datasets.entries())e.debug(`   Dataset #${t}`);this.elements&&console.log("Elements:",this.elements)}bind(){this.gl.bindVertexArray(this.vao)}unbind(){this.gl.bindVertexArray(null)}delete(){const{gl:t,vao:e,drawBuffers:n,elemBuffer:i}=this;t.deleteVertexArray(e);for(const t of n)t.delete();i&&i.delete()}}class ie extends st{constructor({gl:t},e={}){var n,i,r,s;super(),this.options=e,this.red=1,this.green=.7,this.blue=0,this.alpha=1,this.depth=1,this.stencil=0,this.name=null!==(n=e.name)&&void 0!==n?n:`Clear/${this.name}`,this.gl=t;const o=null!==(i=e.color)&&void 0!==i?i:[0,0,0,1],a=null!==(r=e.depth)&&void 0!==r?r:1,h=null!==(s=e.stencil)&&void 0!==s?s:0;this.clearMask=0;let c=!1;if(void 0!==e.color&&(this.clearMask|=t.COLOR_BUFFER_BIT,c=!0),"number"==typeof e.depth&&(this.clearMask|=t.DEPTH_BUFFER_BIT,c=!0),"number"==typeof e.stencil&&(this.clearMask|=t.STENCIL_BUFFER_BIT,c=!0),!c)throw new Error("[TgdPainterClear] You must give at least a color or a depth in the constructor!");[this.red,this.green,this.blue,this.alpha]=o,this.depth=a,this.stencil=h}delete(){}paint(){const{clearMask:t,gl:e,red:n,green:i,blue:r,alpha:s,depth:o,stencil:a,options:h}=this;h.color&&e.clearColor(n,i,r,s),"number"==typeof h.depth&&e.clearDepth(o),"number"==typeof h.stencil&&(e.stencilMask(255),e.clearStencil(a)),e.clear(t)}}class re extends st{constructor({gl:t},{enabled:e=!0,func:n="LESS",mask:i=!0,rangeMin:r=0,rangeMax:s=1}={}){super(),this.gl=t,this.enabled=e,this.func=n,this.mask=i,this.rangeMin=r,this.rangeMax=s}delete(){}paint(){const{gl:t}=this,{enabled:e}=this;if(!e)return void t.disable(t.DEPTH_TEST);const{func:n,mask:i,rangeMin:r,rangeMax:s}=this;t.enable(t.DEPTH_TEST),t.depthFunc(t[n]),t.depthMask(i),t.depthRange(r,s)}update(){}}class se{constructor({precision:t="highp",uniforms:e={},attributes:n={},varying:i={},functions:r={},mainCode:s=[]}={}){this.precision=t,this.uniforms=e,this.attributes=n,this.varying=i,this.functions=r,this.mainCode=s}get code(){return jt(["#version 300 es",`precision ${this.precision} float;`,...Vt(this.uniforms,"uniform"),...Vt(this.attributes,"in"),...Vt(this.varying,"out"),...Xt(this.functions),"","void main() {",this.mainCode,"}"])}}class oe{constructor({precision:t="highp",uniforms:e={},outputs:n={FragColor:"vec4"},varying:i={},functions:r={},mainCode:s=["FragColor = vec4(1, 0.667, 0, 1);"]}={}){this.precision="mediump",this.precision=t,this.uniforms=e,this.outputs=n,this.varying=i,this.functions=r,this.mainCode=s}get code(){return jt(["#version 300 es",`precision ${this.precision} float;`,...Vt(this.uniforms,"uniform"),...Vt(this.varying,"in"),...Vt(this.outputs,"out"),...Xt(this.functions),"","void main() {",this.mainCode,"}"])}}class ae extends st{constructor(t,e={}){var n;super(),this.logicFunction=t,this.name=null!==(n=e.name)&&void 0!==n?n:`Logic/${this.name}`}delete(){}paint(t,e){this.logicFunction(t,e)}}class he{static make(t){var e,n,i;const r={},{count:s,drawMode:o,elements:a,attPosition:h,attNormal:c,attUV:l}=t;r[h.name]=null!==(e=h.type)&&void 0!==e?e:"vec3",c&&(r[c.name]=null!==(n=c.type)&&void 0!==n?n:"vec3"),l&&(r[l.name]=null!==(i=l.type)&&void 0!==i?i:"vec2");const u=new qt(r);return u.set(h.name,h.data),c&&u.set(c.name,c.data),l&&u.set(l.name,l.data),new he({dataset:u,count:s,drawMode:o,elements:a})}constructor(t){var e;const{dataset:n,drawMode:i="TRIANGLES",attPosition:r="POSITION",attNormal:o="NORMAL",attUV:a="TEXCOORD_0"}=t;this._dataset=n,this.drawMode=i;const{elements:h}=t;this.elements=h,this._elementsType=h?s(h):0,this.attPosition=r,this.attNormal=o,this.attUV=a,this.count=null!==(e=null==h?void 0:h.length)&&void 0!==e?e:n.count,t.computeNormalsIfMissing&&this.computeNormals()}get dataset(){return this._dataset}get elementsType(){return this._elementsType}getElement(t){var e,n;return null!==(n=null===(e=this.elements)||void 0===e?void 0:e[t])&&void 0!==n?n:-1}computeNormals(){let t=[];if(this.drawMode!==WebGL2RenderingContext.TRIANGLES&&"TRIANGLES"!==this.drawMode)return void console.error("We don't know how to compute normals for this draw mode:",this.drawMode);t=this.computeNormalsForTrianglesDrawMode();const e=this.attNormal;this.dataset.addAttributes({[e]:"vec3"});const n=[];for(const[e,i,r]of t)n.push(e,i,r);this.dataset.set(e,new Float32Array(n))}computeNormalsForTrianglesDrawMode(){const t=this.dataset,e=new Map,n=(t,n,i,r)=>{const s=function(t,e,n){const i=new u(e).subtract(t),r=new u(n).subtract(t);return i.cross(r).normalize()}(n,i,r),o=e.get(t);o?o.add(s):e.set(t,new u(s.x,s.y,s.z))},{get:i}=t.getAttribAccessor(this.attPosition),r=new Set;let s=0;for(let t=0;t<this.count;t+=3){const e=this.getElement(t+0);r.add(e),s=Math.max(s,e);const o=this.getElement(t+1);r.add(o),s=Math.max(s,o);const a=this.getElement(t+2);r.add(a),s=Math.max(s,a);const h=new u(i(e,0),i(e,1),i(e,2)),c=new u(i(o,0),i(o,1),i(o,2)),l=new u(i(a,0),i(a,1),i(a,2));n(e,h,c,l),n(o,c,l,h),n(a,l,h,c)}const o=[];for(let t=0;t<=s;t++){const n=e.get(t);n?(n.normalize(),o.push(n)):o.push(new u)}return o}}class ce extends he{static fromBoundingBox(t,e){const[n,i,r]=t,[s,o,a]=e;return new ce({sizeX:s-n,sizeY:o-i,sizeZ:a-r})}constructor({sizeX:t=1,sizeY:e=1,sizeZ:n=1,uvs:i="sameOnEachFace"}={}){const r=.5*t,s=.5*e,o=.5*n,a=new qt({POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"});a.set("POSITION",new Float32Array([...ue("+x+y+z",r,s,o),...ue("+y+z+x",r,s,o),...ue("+z+x+y",r,s,o),...ue("-x+z+y",r,s,o),...ue("-y+x+z",r,s,o),...ue("-z+y+x",r,s,o)])),a.set("TEXCOORD_0",new Float32Array(function(t){return"sameOnEachFace"===t?[...de,...de,...de,...de,...de,...de]:[...ge(0,0),...ge(1,0),...ge(2,0),...ge(0,1),...ge(1,1),...ge(2,1)]}(i))),a.set("NORMAL",new Float32Array([...Ae,...Ee,...Te,...xe,...we,...Me])),super({dataset:a,drawMode:"TRIANGLES"})}}const le=[[-1,1],[1,1],[-1,-1],[1,-1],[-1,-1],[1,1]];function ue(t,...e){function n(e){const n=t.charAt(e);switch(n){case"x":return 0;case"y":return 1;case"z":return 2;default:throw new Error(`Invalid coordinate name at pos ${e}: "${n}"!`)}}function i(e){const n=t.charAt(e);switch(n){case"+":return 1;case"-":return-1;default:throw new Error(`Invalid coordinate sign at pos ${e}: "${n}"!`)}}const r=[],s=i(0),o=n(1),a=i(2),h=n(3),c=i(4),l=n(5);for(const[t,n]of le){const i=[];i[o]=e[o]*s,i[h]=e[h]*a*t,i[l]=e[l]*c*n,r.push(...i)}return r}const de=[0,0,1,0,0,1,1,1,0,1,1,0],me=1/3,fe=.5;function ge(t,e){const n=me*t,i=fe*e;return de.map(((t,e)=>e%2==0?n+me*t:i+fe*t))}const pe=[1,0,0],Ae=[...pe,...pe,...pe,...pe,...pe,...pe],ve=[-1,0,0],xe=[...ve,...ve,...ve,...ve,...ve,...ve],be=[0,1,0],Ee=[...be,...be,...be,...be,...be,...be],ye=[0,-1,0],we=[...ye,...ye,...ye,...ye,...ye,...ye],_e=[0,0,1],Te=[..._e,..._e,..._e,..._e,..._e,..._e],Ce=[0,0,-1],Me=[...Ce,...Ce,...Ce,...Ce,...Ce,...Ce];class Re{constructor(){this.varyings={},this.uniforms={}}}class Le{constructor(t={}){var e,n;this._direction=new u,this.color=null!==(e=t.color)&&void 0!==e?e:new d(.8,.8,.8,1),this.direction=null!==(n=t.direction)&&void 0!==n?n:new u(0,0,-1)}get direction(){return this._direction}set direction(t){this._direction.from(t).normalize()}}var Pe=n(8401);function Se(t){return(0,Pe.sH)(this,void 0,void 0,(function*(){return new Promise((e=>{const n=new Image;n.addEventListener("load",(()=>e(n))),n.addEventListener("error",(()=>{console.error("Unable to load image:",t),e(null)})),n.src=t}))}))}class Ie{constructor(t,e){this.eventChange=new et,this._texture=null,this._width=0,this._height=0;const{gl:n}=t;this.gl=n,this.name="Texture2D/"+Ie.counter++;const i=n.createTexture();if(!i)throw new Error("Unable to create a WebGLTexture!");this._texture=i,this.setParams({magFilter:"LINEAR",minFilter:"LINEAR",wrapS:"REPEAT",wrapT:"REPEAT",wrapR:"REPEAT"}),this.storage=Object.assign({width:1,height:1,internalFormat:"RGBA8",levels:1,flipY:!1,premultipliedAlpha:!1},e),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,this.storage.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.storage.premultipliedAlpha),"number"==typeof(null==e?void 0:e.width)&&"number"==typeof(null==e?void 0:e.height)&&this.resize(null==e?void 0:e.width,null==e?void 0:e.height)}delete(){this.gl.deleteTexture(this.glTexture)}get width(){return this._width}get height(){return this._height}resize(t,e){if(t===this.width&&e===this.height)return;const{gl:n,storage:i}=this;this._width=i.width=t,this._height=i.height=e;const{internalFormat:r,levels:s}=this.storage;if(r.startsWith("COMPRESSED_")&&!n.getExtension("WEBGL_compressed_texture_etc"))throw new Error('Your browser does not support extension "WEBGL_compressed_texture_etc" on this device!');this.bind(),n.texStorage2D(n.TEXTURE_2D,s,n[r],t,e)}get glTexture(){if(this._texture)return this._texture;throw new Error(`Texture "${this.name}" has been deleted!`)}bind(){this.gl.bindTexture(this.gl.TEXTURE_2D,this.glTexture)}loadBitmap(t,e={}){if(!t)return this;if("string"==typeof t)return this.loadBitmap(Se(t),e);if(!((n=t)instanceof ImageData||n instanceof HTMLImageElement||n instanceof HTMLCanvasElement||n instanceof HTMLVideoElement||n instanceof ImageBitmap))return t.then((t=>this.loadBitmap(t))).catch((t=>console.error("Unable to load texture BMP:",t))),this;var n;const{storage:i,gl:r}=this,{level:s=0}=e;return this._width=t.width,this._height=t.height,this.bind(),r.texImage2D(r.TEXTURE_2D,s,r[i.internalFormat],r[function(t){for(const[e,n]of Ne)if(n.has(t))return e;throw new Error(`There is no compatible format for internalFormat "${t}" and type "UNSIGNED_BYTE"!`)}(i.internalFormat)],r.UNSIGNED_BYTE,t),this.eventChange.dispatch(this),this}loadData(t,e){const{level:n=0,width:i,height:r}=e,{gl:s}=this;return this.bind(),s.texImage2D(s.TEXTURE_2D,n,s.RGB,i,r,0,s.RGB,s.UNSIGNED_BYTE,t),this.eventChange.dispatch(this),this}activate(t,e,n){const{gl:i}=this;return i.activeTexture(i.TEXTURE0+t),this.bind(),e&&n&&e.uniform1i(n,t),this}generateMipmap(){const{gl:t}=this;return this.bind(),t.generateMipmap(t.TEXTURE_2D),this}setParams(t){return this.bind(),function(t,{wrapS:e,wrapT:n,wrapR:i,minFilter:r,magFilter:s}){e&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t[e]),n&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t[n]),i&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_R,t[i]),r&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t[r]),s&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t[s])}(this.gl,t),this}set textureBaseLevel(t){const{gl:e}=this;this.bind(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_BASE_LEVEL,t)}get textureBaseLevel(){const{gl:t}=this;return this.bind(),t.getTexParameter(t.TEXTURE_2D,t.TEXTURE_BASE_LEVEL)}set textureMaxLevel(t){const{gl:e}=this;this.bind(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAX_LEVEL,t)}get textureMaxLevel(){const{gl:t}=this;return this.bind(),t.getTexParameter(t.TEXTURE_2D,t.TEXTURE_MAX_LEVEL)}getParameter(t){const{gl:e,glTexture:n}=this;return e.bindTexture(e.TEXTURE_2D,n),e.getTexParameter(e.TEXTURE_2D,e[t])}}Ie.counter=0;const Ne=[["RGB",new Set(["RGB","RGB8","RGB565","SRGB8","RGB8_SNORM","RGB565","R11F_G11F_B10F","RGB9_E5","RGB16F","R11F_G11F_B10F","RGB9_E5","RGB32F","RGB16F","R11F_G11F_B10F","RGB9_E5"])],["RGBA",new Set(["RGBA","RGBA8","RGB5_A1","RGBA4","SRGB8_ALPHA8","RGBA8_SNORM","RGBA4","RGB5_A1","RGB10_A2","RGB5_A1","RGBA16F","RGBA32F","RGBA16F"])],["RG",new Set(["RG8"])],["RED",new Set(["R8"])]];class Be{constructor(t,e){this.context=t,this._width=0,this._height=0,this.numberOfImagesToLoad=6;const{gl:n}=t,i=n.createTexture();if(!i)throw new Error("Unable to create a WebGLTexture!");this.texture=i,this.loadImage(n.TEXTURE_CUBE_MAP_POSITIVE_X,e.imagePosX),this.loadImage(n.TEXTURE_CUBE_MAP_NEGATIVE_X,e.imageNegX),this.loadImage(n.TEXTURE_CUBE_MAP_POSITIVE_Y,e.imagePosY),this.loadImage(n.TEXTURE_CUBE_MAP_NEGATIVE_Y,e.imageNegY),this.loadImage(n.TEXTURE_CUBE_MAP_POSITIVE_Z,e.imagePosZ),this.loadImage(n.TEXTURE_CUBE_MAP_NEGATIVE_Z,e.imageNegZ)}delete(){this.context.gl.deleteTexture(this.texture)}get ready(){return 0===this.numberOfImagesToLoad}get width(){return this._width}get height(){return this._height}bind(){const{gl:t}=this.context;t.bindTexture(t.TEXTURE_CUBE_MAP,this.texture)}activate(t,e,n){if(!this.ready)return;const{context:i,texture:r}=this,{gl:s}=i;s.activeTexture(s.TEXTURE0+t),s.bindTexture(s.TEXTURE_CUBE_MAP,r),e.uniform1i(n,t)}loadImage(t,e){const{width:n,height:i}=e;if(n!==i)throw new Error(`Images in a CubeMap must be squares, but we got ${n}×${i}!`);if(0===this._width)this._width=n,this._height=i;else if(this._width!==n||this._height!==i)throw new Error(`Images in a CubeMap must all have the same size, but we got ${this._width}×${this._height} and ${n}×${i}!`);const{context:r,texture:s}=this,{gl:o}=r;o.bindTexture(o.TEXTURE_CUBE_MAP,s),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,e instanceof Image),o.texImage2D(t,0,o.RGBA,o.RGBA,o.UNSIGNED_BYTE,e),this.numberOfImagesToLoad--,0===this.numberOfImagesToLoad&&(o.generateMipmap(o.TEXTURE_CUBE_MAP),o.texParameteri(o.TEXTURE_CUBE_MAP,o.TEXTURE_MIN_FILTER,o.LINEAR_MIPMAP_LINEAR),r.paint())}}const Oe=new d(.8,.6,.1,1);class Ue extends Re{constructor(t={}){var e;super(),this.light=new Le,this.ambient=new Le({color:new d(.2,.1,0,0)}),this.specularExponent=20,this.specularIntensity=1,this.uniforms={uniLight:"vec3",uniLightDir:"vec3",uniAmbient:"vec3",uniSpecularExponent:"float",uniSpecularIntensity:"float",uniModelViewMatrix:"mat4"},this.lightColor=new u,this.ambientColor=new u;const n=t.color instanceof Ie?t.color:new d(null!==(e=t.color)&&void 0!==e?e:Oe);t.light&&(this.light=t.light),t.ambient&&(this.ambient=t.ambient),"number"==typeof t.specularExponent&&(this.specularExponent=t.specularExponent),"number"==typeof t.specularIntensity&&(this.specularIntensity=t.specularIntensity);const i=!(n instanceof d);this.texture=i?n:null,this.fragmentShaderCode=["vec3 normal = normalize(varNormal);","float light = 1.0 - dot(normal, uniLightDir);",i?"vec4 color = texture(texDiffuse, varUV);":`vec4 color = vec4(${n.join(", ")});`,"vec3 normal2 = mat3(uniModelViewMatrix) * normal;","float spec = max(0.0, reflect(uniLightDir, normal2).z);","spec = pow(spec, uniSpecularExponent) * uniSpecularIntensity;","color = vec4(","  color.rgb * (","    uniAmbient + uniLight * light","  ) + vec3(spec),","  1.0",");","return color;"],this.vertexShaderCode=["varNormal = mat3(uniTransfoMatrix) * NORMAL;"],this.varyings={varNormal:"vec3"},i&&(this.vertexShaderCode.push("varUV = TEXCOORD_0;"),this.varyings.varUV="vec2",this.uniforms.texDiffuse="sampler2D")}setUniforms(t){t.uniform3fv("uniLightDir",this.light.direction),this.lightColor.from(this.light.color).scale(this.light.color.w),t.uniform3fv("uniLight",this.lightColor),this.ambientColor.from(this.ambient.color).scale(this.ambient.color.w),t.uniform3fv("uniAmbient",this.ambientColor),t.uniform1f("uniSpecularExponent",this.specularExponent),t.uniform1f("uniSpecularIntensity",this.specularIntensity);const{texture:e}=this;e&&e.activate(0,t,"texDiffuse")}}new d(.6,1,.9,1);class Fe extends Re{constructor(){super(),this.fragmentShaderCode=["vec3 color = vec3(1.0) + normalize(varNormal);","color *= 0.5;","return vec4(color, 1.0);"],this.vertexShaderCode=["varNormal = NORMAL;"],this.varyings={varNormal:"vec3"}}setUniforms(t){}}class De extends st{constructor(t,e={}){var n,i;super(),this.context=t,this.transfo=new Q,this.drawMode=0,this.bboxMin=null,this.bboxMax=null,this.paint=(t,e)=>{const{context:n,prg:i,geometry:r,material:s,drawMode:o,count:a,transfo:h}=this,{gl:c,camera:l}=n;i.use(),s.setUniforms(i,t,e),i.uniformMatrix4fv("uniTransfoMatrix",h.matrix),i.uniformMatrix4fv("uniModelViewMatrix",l.matrixModelView),i.uniformMatrix4fv("uniProjectionMatrix",l.matrixProjection),this.vao.bind(),r.elements?c.drawElements(o,a,this.elementsType,0):c.drawArrays(o,0,a),this.vao.unbind()};const{transfo:r,material:s=new Fe,geometry:o=new ce}=e;this.transfo=new Q(r),this.material=s,this.geometry=o,this.drawMode="number"==typeof o.drawMode?o.drawMode:t.gl[o.drawMode];const a=new se({uniforms:Object.assign({uniTransfoMatrix:"mat4",uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4"},s.uniforms),attributes:{[o.attPosition]:"vec4",[o.attNormal]:"vec3",[o.attUV]:"vec2"},varying:s.varyings,functions:{applyMaterial:["void applyMaterial() {",[s.vertexShaderCode],"}"],getPosition:["vec4 getPosition(vec4 pos) {",[null!==(n=s.vertexShaderCodeForGetPosition)&&void 0!==n?n:"return pos;"],"}"]},mainCode:["gl_Position = uniProjectionMatrix * uniModelViewMatrix * uniTransfoMatrix * getPosition(POSITION);","applyMaterial();"]}).code,h=new oe({uniforms:s.uniforms,outputs:{FragColor:"vec4"},varying:s.varyings,functions:{applyMaterial:["vec4 applyMaterial() {",[s.fragmentShaderCode],"}"]},mainCode:["FragColor = applyMaterial();"]}).code,c=new Ht(t.gl,{vert:a,frag:h});c.debug(),this.prg=c,this.vao=new ne(t.gl,c,[o.dataset],o.elements),this.elementsType=o.elementsType,this.count=o.count,this.name=null!==(i=e.name)&&void 0!==i?i:`Mesh/${this.name}`}computeBoundingBox(){if(this.bboxMin&&this.bboxMax)return{min:this.bboxMin,max:this.bboxMax};const{dataset:t}=this.geometry,{get:e}=t.getAttribAccessor("POSITION"),n=new u(e(0,0),e(0,1),e(0,2)),i=new u(n);for(let r=1;r<t.count;r++){const t=e(r,0),s=e(r,1),o=e(r,2);n.x=Math.min(n.x,t),i.x=Math.max(i.x,t),n.y=Math.min(n.y,s),i.y=Math.max(i.y,s),n.z=Math.min(n.z,o),i.z=Math.max(i.z,o)}return this.bboxMin=n,this.bboxMax=i,{min:n,max:i}}delete(){this.vao.delete()}}class $e extends De{constructor(t,e){var n;const{asset:i,meshIndex:r=0,primitiveIndex:s=0,materialFactory:o=Ge}=e,a=function(t,e,n,i){var r,s,o;const a=null!==(r=t.getMeshPrimitive(e,n).material)&&void 0!==r?r:-1;if(-1===a)return ke;const h=t.getMaterial(a),c=h.pbrMetallicRoughness;if(!c){const e=h.emissiveTexture;if(!e)return ke;const n=t.createTexture2D(i,null!==(s=e.index)&&void 0!==s?s:0);return n.eventChange.addListener(i.paint),n}if(c.baseColorTexture){const e=null===(o=c.baseColorTexture)||void 0===o?void 0:o.index,n=t.createTexture2D(i,null!=e?e:0);return n.eventChange.addListener(i.paint),n}return c.baseColorFactor?new d(...c.baseColorFactor):ke}(i,r,s,t),h=o({color:a});let c=!1;const l={POSITION:"vec3",NORMAL:"vec3"};i.getMeshPrimitive().attributes.TEXCOORD_0&&(l.TEXCOORD_0="vec2");const u=new qt(l);i.setAttrib(u,"POSITION",r,s),i.getMeshPrimitive().attributes.NORMAL?i.setAttrib(u,"NORMAL",r,s):(console.warn("No normals found! We will apply smooth shading."),c=!0),i.getMeshPrimitive().attributes.TEXCOORD_0&&i.setAttrib(u,"TEXCOORD_0",r,s),super(t,{geometry:new he({dataset:u,elements:i.getMeshPrimitiveIndices(r,s),drawMode:"TRIANGLES",computeNormalsIfMissing:c}),material:h}),this.name=null!==(n=e.name)&&void 0!==n?n:`Gltf/${this.name}`}}const ke=new d(.9,.5,.1,1);function Ge({color:t}){return new Ue({color:t,specularIntensity:.3,specularExponent:80,light:new Le({color:new d(1,1,1,1),direction:new u(1,.2,0)}),ambient:new Le({color:new d(.2,.1,0,1)})})}class ze extends st{constructor(t={}){super(),this.parentMatrix=new f,this.globalMatrix=new f,this.nodes=[],this.targets=[];const{children:e=[],transfo:n,logic:i,paintTheTargets:r=!0,name:s=`TgdPainterNode/${this.name}`}=t;this.paintTheTargets=r;for(const t of e)this.add(t);this.transfo=new Q(n),this.logic=null==i?void 0:i.bind(this),this.name=s}delete(){var t;for(const t of this.nodes)t.delete();for(const e of this.targets)null===(t=e.delete)||void 0===t||t.call(e)}add(...t){for(const e of t)e instanceof ze?this.nodes.push(e):this.targets.push(e);return this}remove(...t){for(const e of t)if(e instanceof ze){const t=this.nodes.indexOf(e);-1!==t&&this.nodes.splice(t,1)}else{const t=this.targets.indexOf(e);-1!==t&&this.targets.splice(t,1)}return this}getNodes(){return[...this.nodes]}getTargets(){return[...this.targets]}paint(t,e){var n,i,r;null===(n=this.logic)||void 0===n||n.call(this,t,e),this.parentMatrix.reset();const s=[this];for(;s.length>0;){const n=s.shift();n.globalMatrix.from(n.parentMatrix).multiply(n.transfo.matrix),null===(i=n.logic)||void 0===i||i.call(n,t,e);for(const i of n.targets)i.transfo.matrix.from(n.globalMatrix),this.paintTheTargets&&(null===(r=i.paint)||void 0===r||r.call(i,t,e));for(const t of n.nodes)t.parentMatrix.from(n.globalMatrix),s.push(t)}}debug(t="TgdPainterNode"){console.log(t),We(this)}}function We(t,e="| "){var n,i;console.log(`${e}${t.name}  [${je(t.transfo.orientation)}] (${je(t.transfo.position)})`);const r=t.getTargets();if(r.length>0)if(1===r.length)console.log(`${e}  Target: ${null!==(n=r[0].name)&&void 0!==n?n:"..."}`);else{console.log(`${e}  Targets (${r.length})`);for(const t of r)console.log(`${e}    ${null!==(i=t.name)&&void 0!==i?i:"..."}`)}const s=t.getNodes();if(s.length>0){console.log(`${e}  Nodes (${s.length})`);for(const t of s)We(t,`${e}  | `)}}function je(t){return[...t].map((t=>t.toFixed(3))).join(", ")}class Ve extends st{constructor(t,e){var n;super(),this.context=t,this.z=1,this.matrix=new f,this.tmpMat=new f,this.z=null!==(n=e.z)&&void 0!==n?n:1,this.transfo=new Q(e.transfo),this.camera=e.camera,this.texture=new Be(t,e),this.program=new Ht(t.gl,{vert:"#version 300 es\n\nuniform float uniZoom;\nuniform float uniZ;\n\nin vec4 attPoint;\n\nout vec4 varPoint;\n\nvoid main() {\n    varPoint =  attPoint;\n    gl_Position = vec4(attPoint.xy, uniZ, 1.0);\n}",frag:"#version 300 es\n\nprecision highp float;\n\nuniform mat4 uniMatrix;\nuniform samplerCube uniTexture;\n\nin vec4 varPoint;\n\nout vec4 FragColor;\n\nvoid main() {\n    vec4 t = uniMatrix * varPoint;\n    FragColor = texture(uniTexture, normalize(t.xyz));\n}"});const i=new qt({attPoint:"vec2"});i.set("attPoint",new Float32Array([-1,1,1,1,-1,-1,1,-1])),this.vao=new ne(t.gl,this.program,[i])}delete(){const{vao:t}=this;t.delete()}paint(){const{context:t,vao:e,program:n,texture:i,z:r}=this,{gl:s}=t,{camera:o,matrix:a,tmpMat:h}=this;!function(t,e,n){const i=Nt(t);It(t,e);try{n()}finally{It(t,i)}}(s,St.off,(()=>{o.screenWidth=t.width,o.screenHeight=t.height,a.from(o.matrixProjection),h.fromMat3(this.transfo.matrix).multiply(o.matrixModelView),h.m03=0,h.m13=0,h.m23=0,a.multiply(h).invert(),n.use(),n.uniformMatrix4fv("uniMatrix",a),n.uniform1f("uniZ",r),i.activate(0,n,"uniTexture"),e.bind(),s.drawArrays(s.TRIANGLE_STRIP,0,4),e.unbind()}))}}class Xe extends ot{static do(t,e){const{onEnterActions:n,onExitActions:i}=He(t.gl,t);for(const t of n)t();e();for(const t of i)t()}constructor(t,e={}){var n;const{gl:i}=t,{onEnterActions:r,onExitActions:s}=He(i,e);super(e.children,{onEnter(t,n){var i;null===(i=e.onEnter)||void 0===i||i.call(e,t,n);for(const t of r)t()},onExit(t,n){var i;for(const t of s)t();null===(i=e.onExit)||void 0===i||i.call(e,t,n)}}),this.name=null!==(n=e.name)&&void 0!==n?n:`State/${this.name}`}}function He(t,e){const{color:n,blend:i,depth:r,cull:s,stencil:o}=e,a=[],h=[],c=function(t){return!0===t?[!0,!0,!0,!0]:!1===t?[!1,!1,!1,!1]:t}(n);if(Array.isArray(c)){let e;a.push((()=>{e=t.getParameter(t.COLOR_WRITEMASK),t.colorMask(...c)})),h.push((()=>{t.colorMask(...null!=e?e:[!0,!0,!0,!0])}))}if(i){let e;a.push((()=>{e=function(t){return{enabled:Boolean(t.getParameter(t.BLEND)),equationAlpha:t.getParameter(t.BLEND_EQUATION_ALPHA),equationColor:t.getParameter(t.BLEND_EQUATION_RGB),functionAlphaDst:t.getParameter(t.BLEND_DST_ALPHA),functionAlphaSrc:t.getParameter(t.BLEND_SRC_ALPHA),functionColorDst:t.getParameter(t.BLEND_DST_RGB),functionColorSrc:t.getParameter(t.BLEND_SRC_ALPHA)}}(t),Pt(t,i)})),h.push((()=>{e&&Pt(t,e)}))}if(r){let e;a.push((()=>{e=function(t){const[e,n]=t.getParameter(t.DEPTH_RANGE);return{enabled:Boolean(t.getParameter(t.DEPTH_TEST)),func:Number(t.getParameter(t.DEPTH_FUNC)),mask:Boolean(t.getParameter(t.DEPTH_WRITEMASK)),rangeMin:e,rangeMax:n}}(t),Ot(t,r)})),h.push((()=>{e&&Ot(t,e)}))}if(s){let e;a.push((()=>{e=Nt(t),It(t,s)})),h.push((()=>{e&&It(t,e)}))}if(o){let e;a.push((()=>{e=function(t){const e=Boolean(t.getParameter(t.STENCIL_TEST));return e?{enabled:e,maskBack:t.getParameter(t.STENCIL_BACK_WRITEMASK),maskFront:t.getParameter(t.STENCIL_WRITEMASK),functionFront:t.getParameter(t.STENCIL_FUNC),functionFrontMask:t.getParameter(t.STENCIL_VALUE_MASK),functionFrontRef:t.getParameter(t.STENCIL_REF),functionBack:t.getParameter(t.STENCIL_BACK_FUNC),functionBackMask:t.getParameter(t.STENCIL_BACK_VALUE_MASK),functionBackRef:t.getParameter(t.STENCIL_BACK_REF),operationFront1FailStencil:t.getParameter(t.STENCIL_FAIL),operationFront2FailDepth:t.getParameter(t.STENCIL_PASS_DEPTH_FAIL),operationFront3Pass:t.getParameter(t.STENCIL_PASS_DEPTH_PASS),operationBack1FailStencil:t.getParameter(t.STENCIL_BACK_FAIL),operationBack2FailDepth:t.getParameter(t.STENCIL_BACK_PASS_DEPTH_FAIL),operationBack3Pass:t.getParameter(t.STENCIL_BACK_PASS_DEPTH_PASS)}:Object.assign({},Ut.off)}(t),Ft(t,o)})),h.push((()=>{e&&Ft(t,e)}))}return{onEnterActions:a,onExitActions:h}}class Ye extends st{constructor(t){super(),this.context=t,this.texture=new Ie(t).loadBitmap(function(){const t=256,{canvas:e,ctx:n}=gt(768,512);return Ze(n,0,0,t,"X","#f00","#fff"),Ze(n,1,0,t,"Y","#0f0","#000"),Ze(n,2,0,t,"Z","#00f","#fff"),Ze(n,0,1,t,"","#f00","#500"),Ze(n,1,1,t,"","#0f0","#050"),Ze(n,2,1,t,"","#00f","#005"),e}()).setParams({minFilter:"LINEAR",magFilter:"LINEAR"}).generateMipmap();const e=new qt({attPos:"vec3",attUV:"vec2"});e.set("attPos",new Float32Array([1,0,0,0,1,0,0,0,1,-1,0,0,0,-1,0,0,0,-1]));const n=1/3;e.set("attUV",new Float32Array([0,0,n,0,2*n,0,0,.5,n,.5,2*n,.5]));const i=new Ht(t.gl,{vert:"#version 300 es\n\nprecision highp float;\n\nuniform mat4 uniModelViewMatrix;\nuniform mat4 uniProjectionMatrix;\nuniform float uniScreenHeight;\n\n/**\n * Position of the tip.\n */\nin vec4 attPos;\nin vec2 attUV;\n\nout vec2 varUV;\n\nvoid main() {\n    varUV = attUV;\n    vec4 point = uniModelViewMatrix * attPos;\n    gl_Position = uniProjectionMatrix * point;\n    point.y += 0.3;\n    point = uniProjectionMatrix * point;\n    gl_PointSize = uniScreenHeight * abs(gl_Position.y / gl_Position.w - point.y / point.w);\n}\n",frag:"#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uniTexture;\n\nin vec2 varUV;\nout vec4 FragColor;\n\n\nvoid main() {\n    vec2 uv = varUV + gl_PointCoord * vec2(0.333333333, 0.5);\n    FragColor = texture(uniTexture, uv);\n    if (FragColor.w < 1.0) {\n        discard;\n    }\n}\n"}),r=new ne(t.gl,i,[e]);this.prg=i,this.vao=r}delete(){this.vao.delete()}paint(){const{context:t,prg:e,vao:n}=this,{gl:i,camera:r}=t;e.use(),this.texture.activate(0),e.uniform1i("uniTexture",0),e.uniform1f("uniScreenHeight",t.height),e.uniformMatrix4fv("uniModelViewMatrix",r.matrixModelView),e.uniformMatrix4fv("uniProjectionMatrix",r.matrixProjection),n.bind(),i.drawArrays(i.POINTS,0,6)}}function Ze(t,e,n,i,r,s,o="#fff"){const a=(e+.5)*i,h=(n+.5)*i,c=.45*i;t.fillStyle=s,t.beginPath(),t.ellipse(a,h,c,c,0,0,2*Math.PI),t.fill(),r?(t.font=`bold ${.5*i}px sans-serif`,t.fillStyle=o,t.textAlign="center",t.textBaseline="middle",t.fillText(r,a,h)):(t.fillStyle=o,t.beginPath(),t.ellipse(a,h,.8*c,.8*c,0,0,2*Math.PI),t.fill())}class Ke{constructor(t={}){this.options=t,this.eventTipClick=new et,this._canvas=null,this.context=null,this.contextExternal=null,this.cameraInternal=new tt({fovy:Math.PI/3,near:.01,far:10,transfo:{distance:2.7}}),this.orbiter=null,this.tipsPainter=null,this.handleExternalPaint=()=>{var t;null===(t=this.context)||void 0===t||t.paint()},this.handleInternalToExternal=t=>{const{contextExternal:e}=this;(null==e?void 0:e.camera)&&(e.camera.transfo.orientation=t.transfo.orientation,e.paint())},this.handleTap=t=>{var e;const n=null===(e=this.context)||void 0===e?void 0:e.camera;if(!n)return;const{origin:i,direction:r}=n.castRay(t.x,t.y);let s=1,o=Qe[0];for(const t of Qe){const e=t.distanceToLineSquared(i,r);e<s&&(s=e,o=t)}if(s<1){const t=new u,e=new u,i=o;t.from(this.findAxisX()),t.isClose(i)?(e.from(this.findAxisY()),t.from(e).cross(i)):e.from(i).cross(t);const r=(new H).fromAxes(t,e,i);r.isEqual(n.transfo.orientation)&&r.rotateAroundY(Math.PI),this.eventTipClick.dispatch({from:n.transfo.orientation,to:r})}},t.canvas&&(this.canvas=t.canvas)}attachContext(t){this.detach(),this.contextExternal=t,this.attach()}detach(){this.contextExternal&&(this.contextExternal.eventPaint.removeListener(this.handleExternalPaint),this.contextExternal=null)}attach(){var t,e;null===(t=this.contextExternal)||void 0===t||t.eventPaint.addListener(this.handleExternalPaint),null===(e=this.context)||void 0===e||e.paint()}get canvas(){return this._canvas}set canvas(t){var e;if(t===this._canvas)return;if(this._canvas=t,this.context){this.context.inputs.pointer.eventTap.removeListener(this.handleTap),this.context.destroy(),this.context=null;const{orbiter:t}=this;t&&(t.detach(),t.eventChange.removeListener(this.handleInternalToExternal))}if(null===(e=this.tipsPainter)||void 0===e||e.delete(),!t)return;const n=new $t(t,Object.assign({alpha:!0,depth:!0,antialias:!0,name:"GizmoCanvas"},this.options));n.inputs.pointer.eventTap.addListener(this.handleTap),this.context=n,n.camera=this.cameraInternal,this.orbiter=new kt(n,{speedPanning:0,speedZoom:0}),this.orbiter.eventChange.addListener(this.handleInternalToExternal);const i=new Ye(n);this.tipsPainter=i,n.add(new ae((()=>{var t,e;const n=null===(t=this.contextExternal)||void 0===t?void 0:t.camera.transfo;if(!n)return;const i=null===(e=this.context)||void 0===e?void 0:e.camera.transfo;i&&(i.orientation=n.orientation)})),new ie(n,{color:[0,0,0,0],depth:1}),new re(n,{enabled:!0}),i),n.paint()}findAxisX(){let t=0,e=Qe[0];const n=new u,i=new I;i.fromQuat(this.cameraInternal.transfo.orientation).transpose();for(const r of Qe)n.from(r).applyMatrix(i),n.x>t&&(t=n.x,e=r);return e}findAxisY(){let t=0,e=Qe[0];const n=new u,i=new I;i.fromQuat(this.cameraInternal.transfo.orientation).transpose();for(const r of Qe)n.from(r).applyMatrix(i),n.y>t&&(t=n.y,e=r);return e}}const Qe=[new u(1,0,0),new u(0,1,0),new u(0,0,1),new u(-1,0,0),new u(0,-1,0),new u(0,0,-1)];function qe(t,e){const n={};t.translation&&(n.position=t.translation),t.rotation&&(n.orientation=t.rotation),t.scale&&(n.scale=t.scale);const{data:i}=e,r=function(t,e){var n,i;if(!vt(t))return[];const{data:r,context:s,overrideMaterial:o,excludeByMaterialName:a,includeOnlyMaterialNames:h}=e,c=r.getMesh(t),l=[];for(let e=0;e<c.primitives.length;e++){const u=r.getMeshPrimitive(t,e),d=vt(u.material)?r.getMaterial(u.material):null,m=null!==(n=null==d?void 0:d.name)&&void 0!==n?n:`#${u.material}`;if(a&&a.includes(m))continue;if(h&&!h.includes(m))continue;const f=null==o?void 0:o({data:r,mesh:c,primitive:u}),g=new $e(s,{name:`${c.name}/${null!==(i=null==d?void 0:d.name)&&void 0!==i?i:""}`,asset:r,meshIndex:t,primitiveIndex:e,materialFactory:f});l.push(g)}return l}(t.mesh,e);if(t.children)for(const n of t.children)r.push(qe(i.getNode(n),e));return new ze({name:`TgdPainterNode::${t.name}`,transfo:n,children:r})}Math.E,Math.PI,Math.PI,Math.PI,Math.PI,Math.PI,Math.PI,new q(1,0);class Je{constructor(t){this.chunkDetails=[],this.cacheImages=new Map,this.cacheImageURLs=new Map,this.cacheBufferViewDatas=new Map;try{const e=function(t){const e=new DataView(t);if(1179937895!==e.getUint32(0,!0))throw new Error("Invalid magic number for GLB file!");const n=e.getUint32(4,!0);if(2!==n)throw new Error(`We support only version 2, but this file is in version ${n}!`);const i=e.getUint32(8,!0);let r={};const s=[],o=[];let a=12;for(;a<i;){const n=e.getUint32(a,!0);a+=4;const i=e.getUint32(a,!0);a+=4;const h=t.slice(a,a+n);if(a+=n,1313821514===i){const t=(new TextDecoder).decode(h);try{const e=JSON.parse(t);bt(e),r=e,o.push({type:"JSON",size:h.byteLength})}catch(e){throw console.error("Unable to parse this JSON file:",t),console.error(e),new Error("Invalid JSON data in the chunk!")}}else{if(5130562!==i)throw new Error(`We got an invalid chunk type: 0x${i.toString(16).padStart(8,"0")}!`);s.push(h),o.push({type:"BIN",size:h.byteLength})}}return{gltf:r,chunks:s,chunkTypes:o}}(t);this.gltf=e.gltf,this.chunks=e.chunks,this.chunkDetails=e.chunkTypes}catch(t){const e=t instanceof Error?t.message:JSON.stringify(t);throw new Error(`[TgdParserGLTransfertFormatBinary] ${e}`)}}getChunkDetails(){return structuredClone(this.chunkDetails)}get fileSize(){return 12+this.chunks.reduce(((t,e)=>t+e.byteLength),0)}getScenes(){var t;return null!==(t=this.gltf.scenes)&&void 0!==t?t:[]}getScene(t){var e;const n=null===(e=this.gltf.scenes)||void 0===e?void 0:e[t];if(!n)throw new Error(`Asset has no scene with index #${t}!`);return n}getNode(t){var e;const n=null===(e=this.gltf.nodes)||void 0===e?void 0:e[t];if(!n)throw new Error(`Asset has no node with index #${t}!`);return n}getNodeByName(t){const e=this.gltf.nodes;if(e)for(const n of e)if(n.name===t)return n}getNodeByNameOrThrow(t){var e;const n=this.getNodeByName(t);if(n)return n;throw new Error(`Unknown node "${t}"!\nAvailable names:${(null!==(e=this.gltf.nodes)&&void 0!==e?e:[]).map(((t,e)=>`\n  - ${"string"==typeof t.name?JSON.stringify(t.name):`#${e}`}`)).join("")}`)}getAccessor(t=0){var e;const n=null===(e=this.gltf.accessors)||void 0===e?void 0:e[t];if(!n)throw new Error(`Asset has no accessor with index #${t}!`);return n}getMaterial(t){var e;const n=null===(e=this.gltf.materials)||void 0===e?void 0:e[t];if(!n)throw new Error(`Asset has no material with index #${t}!`);return n}getMesh(t=0){var e;const n=null===(e=this.gltf.meshes)||void 0===e?void 0:e[t];if(!n)throw new Error(`Asset has no mesh with index #${t}!`);return n}getMeshPrimitive(t=0,e=0){const n=this.getMesh(t).primitives[e];if(!n)throw new Error(`Asset has no primitive #${e} in mesh #${t}!`);return n}getMeshPrimitiveIndices(t=0,e=0){var n,i;const r=this.getMeshPrimitive(t,e),s=this.getAccessor(null!==(n=r.indices)&&void 0!==n?n:0),o=this.getBufferViewData(null!==(i=s.bufferView)&&void 0!==i?i:0,s.componentType);return function(t){if(!(t instanceof Uint8Array||t instanceof Uint16Array||t instanceof Uint32Array))throw new Error("Only Uint8Array, Uint16Array or Uint32Array are allowed for elements!")}(o),o}getAccessorByAttributeName(t,e){const{attributes:n}=t;if(!n||0===Object.keys(n).length)throw new Error("No attributes found!");const i=n[e];if("number"!=typeof i)throw new TypeError(`No attribute with name "${e}"!\nAvailable names are: ${Object.keys(n).map((t=>JSON.stringify(t))).join(", ")}.`);try{return this.getAccessor(i)}catch(t){const n=t instanceof Error?t.message:JSON.stringify(t);throw new Error(`Attribute "${e}" pointed to an inexisting accessor!\n${n}`)}}createTexture2D(t,e){var n,i,r,s,o;const a=null===(n=this.gltf.textures)||void 0===n?void 0:n[e];if(!a)throw new Error(`Asset has no texture with index #${e}!`);const h=null!==(o=null!==(i=a.source)&&void 0!==i?i:null===(s=null===(r=a.extensions)||void 0===r?void 0:r.EXT_texture_webp)||void 0===s?void 0:s.source)&&void 0!==o?o:0,c=this.getImageURL(h),l=new Ie(t);return c?function(t){return new Promise((e=>{const n=new Image;n.src=t,n.addEventListener("load",(()=>e(n))),n.addEventListener("error",(()=>e(null)))}))}(c).then((t=>{t?l.loadBitmap(t):console.error("Unable to load this file:",c)})).catch(console.error):console.error(`[GLTF] texture index #${e} is empty!`),l}loadImage(t){return(0,Pe.sH)(this,void 0,void 0,(function*(){const e=this.cacheImages.get(t);if(e)return e;const n=this.getImageURL(t);if(!n)return;const i=new Promise(((e,i)=>{const r=new Image;r.src=n,r.addEventListener("load",(()=>{e(r)})),r.addEventListener("error",(()=>{var e;console.error(`Unable to load image #${t}!`,null===(e=this.gltf.images)||void 0===e?void 0:e[t]),i()}))}));return this.cacheImages.set(t,i),i}))}getImageURL(t){var e;const n=this.cacheImageURLs.get(t);if(n)return n;const{gltf:i}=this,r=null===(e=i.images)||void 0===e?void 0:e[t];if(!r)return;if(r.uri)return r.uri;if("number"!=typeof r.bufferView)return;const s=this.getBufferViewData(r.bufferView,"Uint8");if(!s)return;const o=new Blob([s],{type:r.mimeType}),a=URL.createObjectURL(o);return this.cacheImageURLs.set(t,a),a}getBufferViewData(t,e="Float32"){var n,i,r,s,o;if("number"!=typeof t)return this.getBufferViewData(null!==(n=t.bufferView)&&void 0!==n?n:0,t.componentType);const a=t,h=this.cacheBufferViewDatas.get(a);if(h)return h;const{gltf:c}=this,l=null===(i=c.bufferViews)||void 0===i?void 0:i[a];if(!l)throw new Error(`No bufferView with index #${a}!`);const u=this.chunks[l.buffer],d=null!==(r=l.byteOffset)&&void 0!==r?r:0,m=function(t,e){switch(e){case 5120:return new Int8Array(t);case 5121:return new Uint8Array(t);case 5122:return new Int16Array(t);case 5123:return new Uint16Array(t);case 5125:return new Uint32Array(t);default:return new Float32Array(t)}}(u.slice(d,d+l.byteLength),function(t){if("number"==typeof t)return t;switch(t){case"Int8":return 5120;case"Uint8":return 5121;case"Int16":return 5122;case"Uint16":return 5123;case"Uint32":return 5125;default:return WebGL2RenderingContext.FLOAT}throw new Error("Function not implemented.")}(null!==(o=null!=e?e:null===(s=this.findAccessorForBufferView(a))||void 0===s?void 0:s.componentType)&&void 0!==o?o:"Float32"));return this.cacheBufferViewDatas.set(a,m),m}findAccessorForBufferView(t){var e;return(null!==(e=this.gltf.accessors)&&void 0!==e?e:[]).find((e=>e.bufferView===t))}setAttrib(t,e,n=0,i=0,r){var s,o,a,h,c;const{gltf:l}=this,u=null!==(o=null===(s=l.meshes)||void 0===s?void 0:s[n].primitives[i].attributes[null!=r?r:e])&&void 0!==o?o:-1,d=null===(a=l.accessors)||void 0===a?void 0:a[u];if(!d)throw new Error(`No attribute "${null!=r?r:e}" for primitive #${i} of mesh #${n}!`);const m=null!==(h=d.bufferView)&&void 0!==h?h:0,f=null===(c=l.bufferViews)||void 0===c?void 0:c[m];if(!f)throw new Error(`No bufferView with index #${m}!`);const g=this.getBufferViewData(m,d.componentType);t.set(e,g,{byteStride:f.byteStride,byteOffset:d.byteOffset,count:d.count})}makeGeometry({computeNormals:t,meshIndex:e=0,primitiveIndex:n=0,attPositionName:i="POSITION",attNormalName:r="NORMAL",attTextureCoordsName:s="TEXCOORD_0"}={}){const o=this.getMeshPrimitive(e,n);try{const{attributes:a}=o;if(!a)throw new Error("No attributes found!");const h=this.getMeshPrimitiveIndices(e,n),c={[i]:"vec3"};"string"==typeof a[r]&&(c[r]="vec3"),"string"==typeof a[s]&&(c[s]="vec2");const l=new qt(c);return l.set(i,tn(this.getBufferViewData(this.getAccessorByAttributeName(o,i)))),"string"==typeof a[r]&&l.set(r,tn(this.getBufferViewData(this.getAccessorByAttributeName(o,r)))),"string"==typeof a[s]&&l.set(s,tn(this.getBufferViewData(this.getAccessorByAttributeName(o,s)))),new he({computeNormalsIfMissing:t,dataset:l,elements:h,attPosition:i,attNormal:r,attUV:s})}catch(t){const i=t instanceof Error?t.message:JSON.stringify(t);throw new Error(`Error in primitive #${n} of mesh #${e}:\n${i}`)}}}function tn(t){if(t instanceof Float32Array)return t;throw new Error("We were expecting a Float32Array!")}var en=n(2197),nn=n(6907),rn=n(5072),sn=n.n(rn),on=n(7825),an=n.n(on),hn=n(7659),cn=n.n(hn),ln=n(5056),un=n.n(ln),dn=n(540),mn=n.n(dn),fn=n(1113),gn=n.n(fn),pn=n(6467),An={};An.styleTagTransform=gn(),An.setAttributes=un(),An.insert=cn().bind(null,"head"),An.domAPI=an(),An.insertStyleElement=mn(),sn()(pn.A,An);const vn=pn.A&&pn.A.locals?pn.A.locals:void 0;function xn(...t){return t.filter(en.Kg).join(" ")}var bn=function(t,e,n,i){return new(n||(n=Promise))((function(r,s){function o(t){try{h(i.next(t))}catch(t){s(t)}}function a(t){try{h(i.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}h((i=i.apply(t,e||[])).next())}))};function En({className:t,options:e,onReady:n,assets:s,children:o,gizmo:a=!1}){const[,h]=r.useState(!1),c=r.useRef(null),l=r.useRef(null),u=r.useRef(null),[d,m]=r.useState(!0);return r.useEffect((()=>{const t=l.current,e=c.current;if(!t||!e)return;const n=new ResizeObserver((()=>e.paint()));return n.observe(t),t.requestFullscreen||(t.requestFullscreen=t.webkitRequestFullscreen),h(Boolean(t.requestFullscreen)),()=>n.unobserve(t)}),[c.current,l.current]),(0,i.jsxs)("div",{className:[t,vn.Tgd].filter(en.Kg).join(" "),children:[(0,i.jsx)("canvas",{className:vn.scene,ref:t=>{if(!t)return;if(l.current)return;l.current=t;const i=new $t(t,e);c.current=i,i.inputs.keyboard.eventKeyPress.addListener((t=>{if("?"===t.key){const{camera:t}=i;t instanceof tt&&console.log(`new TgdCameraPerspective({\n  fovy: ${t.fovy},\n  near: ${t.near},\n  far: ${t.far},\n  zoom: ${t.zoom},\n  transfo: {\n    distance: ${t.transfo.distance},\n    position: ${JSON.stringify(Array.from(t.transfo.position))},\n    orientation: ${JSON.stringify(Array.from(t.transfo.orientation))},\n    scale: ${JSON.stringify(Array.from(t.transfo.scale))}\n  }\n})`),console.log("Camera:",i.camera.getCurrentState())}})),m(!0),function(){return bn(this,arguments,void 0,(function*({glb:t,data:e,image:n}={}){console.log("🚀 [Tgd] glb, data, image = ",t,e,n);const i={glb:{},data:{},image:{}},r=[];return n&&Object.keys(n).forEach((t=>{r.push((()=>bn(this,void 0,void 0,(function*(){const e=n[t];console.log("Loading image:",e);const r=yield Se(e);r&&(i.image[t]=r)}))))})),t&&Object.keys(t).forEach((e=>{r.push((()=>bn(this,void 0,void 0,(function*(){const n=t[e];console.log("Loading GLB:",n);const r=yield function(t){return(0,Pe.sH)(this,void 0,void 0,(function*(){try{if(t instanceof File){const e=yield t.arrayBuffer();return new Je(e)}const e=yield fetch(t);if(!e.ok)throw new Error(`Unable to load GLB from url "${t}"!\nError #${e.status}: ${e.statusText}`);const n=yield e.arrayBuffer();return new Je(n)}catch(t){return console.error(t),null}}))}(n);r&&(i.glb[e]=r)}))))})),e&&Object.keys(e).forEach((t=>{r.push((()=>bn(this,void 0,void 0,(function*(){const n=e[t],r=yield function(t){return(0,Pe.sH)(this,void 0,void 0,(function*(){if(t instanceof File)return yield t.arrayBuffer();try{const e=yield fetch(t);return yield e.arrayBuffer()}catch(t){return console.error(t),null}}))}(n);r&&(i.data[t]=r)}))))})),yield Promise.all(r.map((t=>t()))),i}))}(s).then((t=>{console.log("Ready!"),n(i,t),i.paint(),m(!1)})).catch((()=>m(!1)))}}),a&&(0,i.jsx)("canvas",{className:vn.gizmo,ref:t=>{const e=new Ke({canvas:t});u.current=e,e.eventTipClick.addListener((({to:t})=>{const e=c.current;console.log("🚀 [tgd] to, context =",t,e),e&&e.animSchedule({duration:.2,easingFunction:dt,action:ht(e.camera,{orientation:t})})}));const n=c.current;n&&e.attachContext(n)}}),(0,i.jsxs)("div",{className:xn(vn.spinner,!d&&vn.hide),children:[(0,i.jsx)(nn.A,{}),(0,i.jsx)("div",{children:"Loading in progress..."})]})]})}var yn=n(8616),wn=n(6637),_n={};_n.styleTagTransform=gn(),_n.setAttributes=un(),_n.insert=cn().bind(null,"head"),_n.domAPI=an(),_n.insertStyleElement=mn(),sn()(wn.A,_n);const Tn=wn.A&&wn.A.locals?wn.A.locals:void 0;function Cn({className:t,autoFocus:e,onClick:n,children:r}){return(0,i.jsx)("button",{type:"button",autoFocus:e,className:xn(t,Tn.button),onClick:n,children:r})}class Mn extends ze{constructor(t,e){var n;const i=e.getNodeByNameOrThrow("Moon"),r=null!==(n=i.mesh)&&void 0!==n?n:0,s=new $e(t,{asset:e,meshIndex:r}),o={};i.translation&&(o.position=new u(i.translation)),i.rotation&&(o.orientation=new H(i.rotation)),i.scale&&(o.scale=new u(i.scale)),super({children:[s],transfo:o})}}class Rn{constructor(t,e){this.context=t,this._x=0,this.angle=0,this.painterOpaque=function(t){const{data:e,node:n=0}=t,i=function(t,e){return vt(e)?t.getNode(e):At(e)?t.getNodeByNameOrThrow(e):e}(e,n);return{painter:qe(i,t)}}({data:e,context:t,node:"Saucer"}).painter,this.node=new ze({children:[new ze({children:[this.painterOpaque],logic(t){const{orientation:e}=this.transfo;e.reset(),this.transfo.orbitAroundX(.2*Math.sin(3.7*t)),this.transfo.orbitAroundY(t)}})],logic:(t,e)=>{const n=this.context.inputs.keyboard,i=this.context.inputs.pointer;let r=0;n.isDown("ArrowRight")||i.isTouching((({x:t})=>t>0))?(this.x+=3*e,r=90*-e):n.isDown("ArrowLeft")||i.isTouching((({x:t})=>t<0))?(this.x-=3*e,r=90*+e):this.angle*=.9,this.angle=h(this.angle+r,-60,60),this.node.transfo.setEulerRotation(0,0,this.angle)}}),this.node.transfo.setPosition(0,0,0)}get x(){return this._x}set x(t){const[e]=this.node.transfo.scale;this._x=h(t,-1,1),console.log("🚀 [saucer] this._x =",this._x);const n=4*this._x;this.node.transfo.setPosition(n/e,0,0);const[,i,r]=this.context.camera.transfo.position;this.context.camera.transfo.setPosition(1.2*n,i,r)}}const Ln=new se({uniforms:{uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4",uniMove:"float",uniLight:"float"},attributes:{attShift:"float",POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"},varying:{varNormal:"vec3",varLight:"float"},mainCode:["float SIZE = 100.0;","varNormal = mat3(uniModelViewMatrix) * NORMAL;","vec4 point = vec4(POSITION, 1.0);","point.z -= SIZE * attShift;","point.z += mod(uniMove, SIZE);","varLight = smoothstep(-200.0, 0.0, point.z) * uniLight;","gl_Position = uniProjectionMatrix * uniModelViewMatrix * point;"]}).code,Pn=new oe({uniforms:{uniHue:"float"},varying:{varNormal:"vec3",varLight:"float"},functions:Object.assign({},function({name:t="shiftHue"}={}){return{[t]:`vec3 ${t}(vec3 color, float hue) {\n    const vec3 k = vec3(0.5773502691896258);\n    float cosAngle = cos(hue);\n    return vec3(\n        color * cosAngle \n        + cross(k, color) * sin(hue) \n        + k * dot(k, color) * (1.0 - cosAngle)\n    );\n}\n`}}()),outputs:{FragColor:"vec4"},mainCode:["vec3 normal = normalize(varNormal);","vec3 color = shiftHue(vec3(0.5) + 0.5 * normal, uniHue);","color *= smoothstep(-1.0, 1.0, normal.z);","FragColor = vec4(color * varLight, 1.0);"]}).code;class Sn extends st{constructor(t,e){super(),this.context=t,this.light=0;const n=new Ht(t.gl,{vert:Ln,frag:Pn});this.prg=n;const i=new qt({attShift:"float"},{divisor:1});i.set("attShift",new Float32Array([0,1,2,3,4]));const r=new qt({POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"});e.setAttrib(r,"POSITION"),e.setAttrib(r,"NORMAL"),e.setAttrib(r,"TEXCOORD_0");const o=e.getMeshPrimitiveIndices();this.type=s(o),this.count=o.length;const a=new ne(t.gl,n,[i,r],o);this.vao=a}delete(){this.prg.delete(),this.vao.delete()}paint(t,e){const{context:n,prg:i,vao:r,count:s,type:o}=this,{gl:a}=n;i.use(),i.uniformMatrix4fv("uniModelViewMatrix",n.camera.matrixModelView),i.uniformMatrix4fv("uniProjectionMatrix",n.camera.matrixProjection),i.uniform1f("uniMove",100*t),i.uniform1f("uniLight",this.light),i.uniform1f("uniHue",t),r.bind(),a.drawElementsInstanced(a.TRIANGLES,s,o,0,4),r.unbind()}}const In=new d(.8,.6,.1,1);class Nn extends Re{constructor(t={}){var e;super(),this.light=1,this.uniforms={uniModelViewMatrix:"mat4",uniLight:"float"},this.specularExponent=10,this.specularIntensity=.2;const n=t.color instanceof Ie?t.color:new d(null!==(e=t.color)&&void 0!==e?e:In),i=!(n instanceof d);this.texture=i?n:null;const r=new u(0,0,-1);this.fragmentShaderCode=[`vec3 uniLightDir = vec3(${r.join(", ")});`,`float uniSpecularIntensity = ${this.specularIntensity.toFixed(2)};`,`float uniSpecularExponent = ${this.specularExponent.toFixed(2)};`,"vec3 normal = normalize(varNormal);","float light = 1.0 - dot(normal, uniLightDir);",i?"vec4 color = texture(texDiffuse, varUV);":`vec4 color = vec4(${n.join(", ")});`,"vec3 normal2 = mat3(uniModelViewMatrix) * normal;","float spec = max(0.0, reflect(uniLightDir, normal2).z);","spec = pow(spec, uniSpecularExponent) * uniSpecularIntensity;","color = vec4(","  color.rgb * vec3(light) + vec3(spec),","  1.0",");","float ghost = smoothstep(0.5, 0.0, normal.z) * .3;","color.rgb += vec3(1.0 + normal.x, 1.0 + normal.y, 0.0) * ghost;","return color * vec4(vec3(uniLight), 1.0);"],this.vertexShaderCode=["varNormal = mat3(uniTransfoMatrix) * NORMAL;"],this.varyings={varNormal:"vec3"},i&&(this.vertexShaderCode.push("varUV = TEXCOORD_0;"),this.varyings.varUV="vec2",this.uniforms.texDiffuse="sampler2D")}setUniforms(t){const{texture:e,light:n}=this;e&&e.activate(0,t,"texDiffuse"),t.uniform1f("uniLight",n)}}class Bn extends st{constructor(t,e){super(),this.x=0,this.y=0,this.z=0;const n=new $e(t,{asset:e,materialFactory:({color:t})=>new Nn({color:t})});n.transfo.setPosition(0,0,0),this.painter=n,this.reset()}reset(){this.x=2*(Math.random()-.5),this.z=-200-20*Math.random()}delete(){}paint(t,e){const{painter:n,x:i,y:r,z:s}=this,{transfo:o}=n,a=function(t,e,n){const i=h((n- -200)/200,0,1);return i*i*(3-2*i)}(0,0,s);n.material.light=a,o.setPosition(10*i,r,s),o.setEulerRotation(79*t,47*t,19*t),n.paint(t,e),this.z+=75*e,this.z>20&&this.reset()}}class On{constructor(){this.context=null,this.onIntroEnd=null,this.saucer=null,this.init=(t,e)=>{this.context=t;const n=new Rn(t,e.glb.saucer);var i;n.node.transfo.setPosition(0,180,0),this.saucer=n,t.camera.from(new tt({fovy:(i=40,i*l),near:.01,far:1e3,zoom:2.5421269851440123,transfo:{distance:0,position:[0,300,-300],orientation:[.341026246547699,-.19848087430000305,-.5130870938301086,.7622650861740112],scale:[2.5421268939971924,2.5421268939971924,2.5421268939971924]}}));const{width:r,height:s}=e.image.imageNegZ,o=function(t,e,n="#000"){const{canvas:i,ctx:r}=gt(t,e);return r.fillStyle=n,r.fillRect(0,0,t,e),i}(r,s),a=new Ve(t,{camera:t.camera,imagePosX:o,imagePosY:o,imagePosZ:o,imageNegX:o,imageNegY:o,imageNegZ:e.image.imageNegZ}),h=new Mn(t,e.glb.moon),c=new ie(t,{depth:1,color:[0,0,0,1]}),u=new Xe(t,{depth:Bt.lessOrEqual,cull:St.back,children:[h,n.node,a]});t.add(c,u),t.play(),this.onIntroEnd=()=>{u.remove(h,a);const i=new Sn(t,e.glb.tunnel),r=new Bn(t,e.glb.obstacle);u.add(i,r),t.animSchedule({duration:.2,action:at(n.node.transfo,{scale:n.node.transfo.scale.clone()},{scale:[.5,.5,.5]})}),t.animSchedule({delay:.2,duration:2,easingFunction:dt,action:t=>{i.light=t}})}},this.start=()=>{const{context:t,saucer:e}=this;t&&(e&&t.animSchedule(ft(e.node.transfo,[{duration:3,transfo:{position:[0,100,0]}},{duration:1,transfo:{position:[0,0,0]}}])),t.animSchedule(ft(t.camera.transfo,[{duration:3,easingFunction:ut,transfo:{distance:150,orientation:new H,position:new u(0,120,0)}},{duration:1,easingFunction:dt,transfo:{distance:0,position:new u(0,90,0),orientation:new H(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)}},{duration:1,easingFunction:dt,transfo:{distance:20,position:new u(0,0,0),orientation:new H(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)},onEnd:()=>{var t;null===(t=this.onIntroEnd)||void 0===t||t.call(this)}},{duration:.6,transfo:{distance:20,orientation:new H,position:[0,4,0],scale:[1,1,1]}}])),t.animSchedule({duration:2,easingFunction:lt,action(e){t.camera.zoom=c(3,1,e)}}))}}}const Un=n.p+"img/negZ.0605a456c61684cca92e.webp",Fn=n.p+"bin/moon.7bbc310fdf7a63bb0e9b.glb",Dn=n.p+"bin/saucer.965ed69fdaf54f62684a.glb",$n=n.p+"bin/tunnel.e91067c02b7240d699c0.glb",kn=n.p+"bin/obstacle-1.a54849a260c0179f5712.glb";var Gn=n(7217),zn={};zn.styleTagTransform=gn(),zn.setAttributes=un(),zn.insert=cn().bind(null,"head"),zn.domAPI=an(),zn.insertStyleElement=mn(),sn()(Gn.A,zn);const Wn=Gn.A&&Gn.A.locals?Gn.A.locals:void 0;function jn(){const t=(0,yn.m)(),[e,n]=r.useState(!1),s=function(){const t=r.useRef(null);return t.current||(t.current=new On),t.current}();return(0,i.jsxs)("div",{className:Wn.play,children:[(0,i.jsx)(En,{gizmo:!1,onReady:(t,e)=>{s.init(t,e)},assets:{image:{imageNegZ:Un},glb:{moon:Fn,saucer:Dn,tunnel:$n,obstacle:kn}}}),!e&&(0,i.jsx)("div",{className:Wn.startScreen,children:(0,i.jsx)(Cn,{className:Wn.startButton,onClick:()=>{s.start(),n(!0)},autoFocus:!0,children:t.start()})})]})}},150:(t,e,n)=>{n.d(e,{A:()=>i});const i={intro1:"Tu es le meilleur Anselm!\n\nLa soucoupe est maintenant pleine de carburant et on va pouvoir aller sur la Lune chercher un vaisseau plus puissant pour sortir du système solaire.",intro2:"Pour rester discrēts, on l'a caché dans un cratère.\n    \n    Il va falloir faire preuve d'un peu d'adresse pour naviguer là-dedans.",start:"C'est parti !"}},6467:(t,e,n)=>{n.d(e,{A:()=>a});var i=n(1354),r=n.n(i),s=n(6314),o=n.n(s)()(r());o.push([t.id,".src-components-Tgd-tgd-module_Tgd_OOp4wr {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.src-components-Tgd-tgd-module_scene_Y7GvnV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.src-components-Tgd-tgd-module_gizmo_xdmsjj {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO.src-components-Tgd-tgd-module_hide_c5quHT {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > svg {\n    animation-name: src-components-Tgd-tgd-module_anim__5xUBz;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes src-components-Tgd-tgd-module_anim__5xUBz {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}","",{version:3,sources:["webpack://./src/components/Tgd/tgd.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,4BAA4B;IAC5B,UAAU;IACV,SAAS;IACT,0CAA0C;IAC1C,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,yDAAoB;IACpB,sBAAsB;IACtB,mCAAmC;IACnC,8BAA8B;AAClC;;AAEA;IACI,KAAK,YAAY,EAAE,oBAAoB,CAAC;IACxC,OAAO,UAAU,EAAE,mBAAmB;AAC1C",sourcesContent:[".Tgd {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.scene {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.gizmo {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.spinner {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.spinner.hide {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.spinner > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.spinner > svg {\n    animation-name: anim;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes anim {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}"],sourceRoot:""}]),o.locals={Tgd:"src-components-Tgd-tgd-module_Tgd_OOp4wr",scene:"src-components-Tgd-tgd-module_scene_Y7GvnV",gizmo:"src-components-Tgd-tgd-module_gizmo_xdmsjj",spinner:"src-components-Tgd-tgd-module_spinner_xcGEuO",hide:"src-components-Tgd-tgd-module_hide_c5quHT",anim:"src-components-Tgd-tgd-module_anim__5xUBz"};const a=o},6637:(t,e,n)=>{n.d(e,{A:()=>a});var i=n(1354),r=n.n(i),s=n(6314),o=n.n(s)()(r());o.push([t.id,'.src-components-Button-Button-module_button_AisLsJ {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.src-components-Button-Button-module_button_AisLsJ::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.src-components-Button-Button-module_button_AisLsJ:focus,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-visible,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n',"",{version:3,sources:["webpack://./src/components/Button/Button.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,wBAAwB;IACxB,mEAAmE;IACnE,WAAW;IACX,cAAc;IACd,oBAAoB;IACpB,gBAAgB;IAChB,0BAA0B;IAC1B,0BAA0B;IAC1B,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,oBAAoB;IACpB,0BAA0B;IAC1B,2BAA2B;AAC/B;;AAEA;;;IAGI,aAAa;IACb,iDAAiD;IACjD,6BAA6B;AACjC",sourcesContent:['.button {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.button::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.button:focus,\nbutton.button:focus-visible,\nbutton.button:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n'],sourceRoot:""}]),o.locals={button:"src-components-Button-Button-module_button_AisLsJ"};const a=o},7217:(t,e,n)=>{n.d(e,{A:()=>a});var i=n(1354),r=n.n(i),s=n(6314),o=n.n(s)()(r());o.push([t.id,".src-app-03-play-page-module_play__1TKhV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.src-app-03-play-page-module_startScreen_o4kZW0 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.src-app-03-play-page-module_startButton_PzpJRF {\n    font-size: 6vw;\n}\n","",{version:3,sources:["webpack://./src/app/03/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".play {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.startScreen {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.startButton {\n    font-size: 6vw;\n}\n"],sourceRoot:""}]),o.locals={play:"src-app-03-play-page-module_play__1TKhV",startScreen:"src-app-03-play-page-module_startScreen_o4kZW0",startButton:"src-app-03-play-page-module_startButton_PzpJRF"};const a=o},8616:(t,e,n)=>{n.d(e,{m:()=>s});var i=n(3708),r=n(150);function s(){return(0,i.L5)(r.A,{en:()=>n.e(325).then(n.bind(n,9325)),alien:()=>n.e(747).then(n.bind(n,747))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,