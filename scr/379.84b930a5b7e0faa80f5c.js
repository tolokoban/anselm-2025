"use strict";(self.webpackChunkansy_2025=self.webpackChunkansy_2025||[]).push([[379],{108:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(8519),i=t.n(o),s=t(3645),r=t.n(s)()(i());r.push([n.id,".src-components-Tgd-tgd-module_Tgd_OOp4wr {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.src-components-Tgd-tgd-module_scene_Y7GvnV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.src-components-Tgd-tgd-module_gizmo_xdmsjj {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO.src-components-Tgd-tgd-module_hide_c5quHT {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > svg {\n    animation-name: src-components-Tgd-tgd-module_anim__5xUBz;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes src-components-Tgd-tgd-module_anim__5xUBz {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}","",{version:3,sources:["webpack://./src/components/Tgd/tgd.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,4BAA4B;IAC5B,UAAU;IACV,SAAS;IACT,0CAA0C;IAC1C,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,yDAAoB;IACpB,sBAAsB;IACtB,mCAAmC;IACnC,8BAA8B;AAClC;;AAEA;IACI,KAAK,YAAY,EAAE,oBAAoB,CAAC;IACxC,OAAO,UAAU,EAAE,mBAAmB;AAC1C",sourcesContent:[".Tgd {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.scene {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.gizmo {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.spinner {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.spinner.hide {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.spinner > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.spinner > svg {\n    animation-name: anim;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes anim {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}"],sourceRoot:""}]),r.locals={Tgd:"src-components-Tgd-tgd-module_Tgd_OOp4wr",scene:"src-components-Tgd-tgd-module_scene_Y7GvnV",gizmo:"src-components-Tgd-tgd-module_gizmo_xdmsjj",spinner:"src-components-Tgd-tgd-module_spinner_xcGEuO",hide:"src-components-Tgd-tgd-module_hide_c5quHT",anim:"src-components-Tgd-tgd-module_anim__5xUBz"};const a=r},246:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(8519),i=t.n(o),s=t(3645),r=t.n(s)()(i());r.push([n.id,".src-components-ViewBook-ViewBook-module_viewBook_KUzI2B {\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 1em;\n    gap: 1em;\n    margin: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n.src-components-ViewBook-ViewBook-module_viewBook_KUzI2B > footer {\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1em;\n}\n\n.src-components-ViewBook-ViewBook-module_viewBook_KUzI2B > footer > button {\n    all: unset;\n    cursor: pointer;\n    border-radius: 50%;\n    background-color: var(--color-primary);\n    color: #000a;\n    width: 2em;\n    height: 2em;\n    display: grid;\n    place-items: center;\n    place-self: end;\n    transition: all 0.5s;\n    transform: scale(1);\n}\n\n.src-components-ViewBook-ViewBook-module_viewBook_KUzI2B > footer > button[disabled] {\n    transform: scale(0);\n}\n\n.src-components-ViewBook-ViewBook-module_viewBook_KUzI2B > footer > button > * {\n    width: 1.5em;\n    height: 1.5em;\n}","",{version:3,sources:["webpack://./src/components/ViewBook/ViewBook.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,4BAA4B;IAC5B,YAAY;IACZ,QAAQ;IACR,SAAS;IACT,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,UAAU;IACV,eAAe;IACf,kBAAkB;IAClB,sCAAsC;IACtC,YAAY;IACZ,UAAU;IACV,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB",sourcesContent:[".viewBook {\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 1em;\n    gap: 1em;\n    margin: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n.viewBook > footer {\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1em;\n}\n\n.viewBook > footer > button {\n    all: unset;\n    cursor: pointer;\n    border-radius: 50%;\n    background-color: var(--color-primary);\n    color: #000a;\n    width: 2em;\n    height: 2em;\n    display: grid;\n    place-items: center;\n    place-self: end;\n    transition: all 0.5s;\n    transform: scale(1);\n}\n\n.viewBook > footer > button[disabled] {\n    transform: scale(0);\n}\n\n.viewBook > footer > button > * {\n    width: 1.5em;\n    height: 1.5em;\n}"],sourceRoot:""}]),r.locals={viewBook:"src-components-ViewBook-ViewBook-module_viewBook_KUzI2B"};const a=r},534:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(8519),i=t.n(o),s=t(3645),r=t.n(s)()(i());r.push([n.id,".src-components-ViewText-ViewText-module_viewText_vqZsDv {\n    display: grid;\n    place-items: center;\n}\n\n.src-components-ViewText-ViewText-module_viewText_vqZsDv > div {\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.src-components-ViewText-ViewText-module_viewText_vqZsDv > div > span {\n    display: inline-block;\n    transition: all 1s;\n    opacity: 0;\n    transform: translateY(100%) scale(0);\n}\n\n.src-components-ViewText-ViewText-module_viewText_vqZsDv > div > span.src-components-ViewText-ViewText-module_show_HhaPML {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n}\n","",{version:3,sources:["webpack://./src/components/ViewText/ViewText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,UAAU;IACV,oCAAoC;AACxC;;AAEA;IACI,UAAU;IACV,iCAAiC;AACrC",sourcesContent:[".viewText {\n    display: grid;\n    place-items: center;\n}\n\n.viewText > div {\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.viewText > div > span {\n    display: inline-block;\n    transition: all 1s;\n    opacity: 0;\n    transform: translateY(100%) scale(0);\n}\n\n.viewText > div > span.show {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n}\n"],sourceRoot:""}]),r.locals={viewText:"src-components-ViewText-ViewText-module_viewText_vqZsDv",show:"src-components-ViewText-ViewText-module_show_HhaPML"};const a=r},642:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(8519),i=t.n(o),s=t(3645),r=t.n(s)()(i());r.push([n.id,".src-app-03-play-page-module_play__1TKhV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.src-app-03-play-page-module_startScreen_o4kZW0 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.src-app-03-play-page-module_startButton_PzpJRF {\n    font-size: 6vw;\n}\n\ndiv.src-app-03-play-page-module_victory_bKBGfN {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #000;\n    opacity: 0;\n    pointer-events: none;\n    transition: all 1s;\n}\n\ndiv.src-app-03-play-page-module_victory_bKBGfN.src-app-03-play-page-module_show_Ry1vME {\n    opacity: 1;\n    pointer-events: all;\n}\n","",{version:3,sources:["webpack://./src/app/03/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,UAAU;IACV,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB",sourcesContent:[".play {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.startScreen {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.startButton {\n    font-size: 6vw;\n}\n\ndiv.victory {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #000;\n    opacity: 0;\n    pointer-events: none;\n    transition: all 1s;\n}\n\ndiv.victory.show {\n    opacity: 1;\n    pointer-events: all;\n}\n"],sourceRoot:""}]),r.locals={play:"src-app-03-play-page-module_play__1TKhV",startScreen:"src-app-03-play-page-module_startScreen_o4kZW0",startButton:"src-app-03-play-page-module_startButton_PzpJRF",victory:"src-app-03-play-page-module_victory_bKBGfN",show:"src-app-03-play-page-module_show_Ry1vME"};const a=r},3211:(n,e,t)=>{t.d(e,{A:()=>x});var o=t(6070),i=t(3095);const s=t.p+"img/en.b770486017d5f1f66633.png",r=t.p+"img/fr.e8048bd0a86ed0ffc41b.png",a=t.p+"img/alien.5805fb3aca154dd6b137.png";var c=t(43),l=t.n(c),A=t(5920),u=t.n(A),d=t(3004),m=t.n(d),p=t(7419),h=t.n(p),g=t(1663),f=t.n(g),v=t(1612),b=t.n(v),B=t(9231),C={};C.styleTagTransform=b(),C.setAttributes=h(),C.insert=m().bind(null,"head"),C.domAPI=u(),C.insertStyleElement=f(),l()(B.A,C);const w=B.A&&B.A.locals?B.A.locals:void 0,I={fr:r,en:s,alien:a};function x({className:n}){const[e,t]=(0,i.uU)();return(0,o.jsx)("div",{className:y(n,w.languageselector),children:["fr","en","alien"].map((n=>(0,o.jsx)("button",{className:y(e.startsWith(n)&&w.current),type:"button",onClick:()=>t(n),children:(0,o.jsx)("img",{src:I[n]})},n)))})}function y(...n){return n.filter((n=>"string"==typeof n)).join(" ")}},3622:(n,e,t)=>{t.r(e),t.d(e,{default:()=>sn});var o=t(6070),i=t(758),s=t(8443),r=t(3713),a=t(6203),c=t(43),l=t.n(c),A=t(5920),u=t.n(A),d=t(3004),m=t.n(d),p=t(7419),h=t.n(p),g=t(1663),f=t.n(g),v=t(1612),b=t.n(v),B=t(108),C={};C.styleTagTransform=b(),C.setAttributes=h(),C.insert=m().bind(null,"head"),C.domAPI=u(),C.insertStyleElement=f(),l()(B.A,C);const w=B.A&&B.A.locals?B.A.locals:void 0;function I(...n){return n.filter(r.Kg).join(" ")}var x=function(n,e,t,o){return new(t||(t=Promise))((function(i,s){function r(n){try{c(o.next(n))}catch(n){s(n)}}function a(n){try{c(o.throw(n))}catch(n){s(n)}}function c(n){var e;n.done?i(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(r,a)}c((o=o.apply(n,e||[])).next())}))};function y({className:n,options:e,onReady:t,assets:c,children:l,gizmo:A=!1}){const[,u]=i.useState(!1),d=i.useRef(null),m=i.useRef(null),p=i.useRef(null),[h,g]=i.useState(!0);return i.useEffect((()=>{const n=m.current,e=d.current;if(!n||!e)return;const t=new ResizeObserver((()=>e.paint()));return t.observe(n),n.requestFullscreen||(n.requestFullscreen=n.webkitRequestFullscreen),u(Boolean(n.requestFullscreen)),()=>t.unobserve(n)}),[d.current,m.current]),(0,o.jsxs)("div",{className:[n,w.Tgd].filter(r.Kg).join(" "),children:[(0,o.jsx)("canvas",{className:w.scene,ref:n=>{if(!n)return;if(m.current)return;m.current=n;const o=new s.tfp(n,e);d.current=o,o.inputs.keyboard.eventKeyPress.addListener((n=>{if("?"===n.key){const{camera:n}=o;n instanceof s.xNY&&console.log(`new TgdCameraPerspective({\n  fovy: ${n.fovy},\n  near: ${n.near},\n  far: ${n.far},\n  zoom: ${n.zoom},\n  transfo: {\n    distance: ${n.transfo.distance},\n    position: ${JSON.stringify(Array.from(n.transfo.position))},\n    orientation: ${JSON.stringify(Array.from(n.transfo.orientation))},\n    scale: ${JSON.stringify(Array.from(n.transfo.scale))}\n  }\n})`),console.log("Camera:",o.camera.getCurrentState())}})),g(!0),function(){return x(this,arguments,void 0,(function*({glb:n,data:e,image:t}={}){const o={glb:{},data:{},image:{}},i=[];return t&&Object.keys(t).forEach((n=>{i.push((()=>x(this,void 0,void 0,(function*(){const e=t[n];try{const t=yield(0,s.V_9)(e);t&&(o.image[n]=t)}catch(e){throw console.error(`Unable to load Image "${n}"!`),console.error(e),e}}))))})),n&&Object.keys(n).forEach((e=>{i.push((()=>x(this,void 0,void 0,(function*(){const t=n[e];try{const n=yield(0,s.TCe)(t);n&&(o.glb[e]=n)}catch(n){throw console.error(`Unable to load GLB "${e}"!`),console.error(n),n}}))))})),e&&Object.keys(e).forEach((n=>{i.push((()=>x(this,void 0,void 0,(function*(){const t=e[n],i=yield(0,s.vSU)(t);i&&(o.data[n]=i)}))))})),yield Promise.all(i.map((n=>n()))),o}))}(c).then((n=>{console.log("Ready!"),t(o,n),o.paint(),g(!1)})).catch((()=>g(!1)))}}),A&&(0,o.jsx)("canvas",{className:w.gizmo,ref:n=>{const e=new s.GbF({canvas:n});p.current=e,e.eventTipClick.addListener((({to:n})=>{const e=d.current;console.log("🚀 [tgd] to, context =",n,e),e&&e.animSchedule({duration:.2,easingFunction:s.Wcc,action:(0,s.vRM)(e.camera,{orientation:n})})}));const t=d.current;t&&e.attachContext(t)}}),(0,o.jsxs)("div",{className:I(w.spinner,!h&&w.hide),children:[(0,o.jsx)(a.A,{}),(0,o.jsx)("div",{children:"Loading in progress..."})]})]})}var _=t(9715),k=t(7138),T={};T.styleTagTransform=b(),T.setAttributes=h(),T.insert=m().bind(null,"head"),T.domAPI=u(),T.insertStyleElement=f(),l()(k.A,T);const E=k.A&&k.A.locals?k.A.locals:void 0;function V({className:n,autoFocus:e,onClick:t,children:i}){return(0,o.jsx)("button",{type:"button",autoFocus:e,className:I(n,E.button),onClick:t,children:i})}class M extends s.tbm{constructor(n,e){super(),this.context=n,this.woobling=0,this._x=0,this.angle=0,this.speed=0,this.moveRadius=8,this.logicInteractive=(n,e)=>{const t=this.context.inputs.keyboard,o=this.context.inputs.pointer;let i=0;t.isDown("ArrowRight")||o.isTouching((({x:n})=>n>0))?(console.log("RIGHT"),this.speed+=e,i=90*-e):t.isDown("ArrowLeft")||o.isTouching((({x:n})=>n<0))?(this.speed-=e,i=90*+e):(this.angle*=.9,this.speed*=0),this.angle=(0,s.O6b)(this.angle+i,-60,60),this.x+=2.5*this.speed*e*this.moveRadius,(this.x===-this.moveRadius&&this.speed<0||this.x===+this.moveRadius&&this.speed>0)&&(this.speed=-this.speed),this.node.transfo.setEulerRotation(0,0,this.angle)},this.name="Saucer",this.painterOpaque=(0,s.TB8)({data:e,context:n,node:"Saucer"}).painter;const t=this;this.node=new s.buV({children:[new s.buV({children:[this.painterOpaque],logic(n){const{orientation:e}=this.transfo;e.reset(),this.transfo.orbitAroundX((.2+t.woobling)*Math.sin(3.7*n)),this.transfo.orbitAroundZ(t.woobling*Math.sin(1.37*n)),this.transfo.orbitAroundY(n)}})]}),this.node.transfo.setPosition(0,0,0),this.mode="still",this.active=!1}set mode(n){const{node:e}=this;e.logic="interactive"===n?this.logicInteractive:void 0}delete(){this.node.delete()}paint(n,e){this.node.paint(n,e)}get x(){return this._x}set x(n){const e=(0,s.O6b)(n,-this.moveRadius,+this.moveRadius);this._x=e,this.node.transfo.setPosition(e,0,0);const[,t,o]=this.context.camera.transfo.position;this.context.camera.transfo.setPosition(5*e/this.moveRadius,t,o)}get y(){return this.context.camera.transfo.position.y}get z(){return this.context.camera.transfo.position.z}}const S=new s.dLJ({uniforms:{uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4",uniMove:"float",uniLight:"float"},attributes:{attShift:"float",POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"},varying:{varNormal:"vec3",varLight:"float"},mainCode:["float SIZE = 100.0;","varNormal = mat3(uniModelViewMatrix) * NORMAL;","vec4 point = vec4(POSITION, 1.0);","point.z -= SIZE * attShift;","point.z += mod(uniMove, SIZE);","varLight = smoothstep(-200.0, 0.0, point.z) * uniLight;","gl_Position = uniProjectionMatrix * uniModelViewMatrix * point;"]}).code,j=new s.NI6({uniforms:{uniHue:"float"},varying:{varNormal:"vec3",varLight:"float"},functions:Object.assign({},(0,s.EPI)()),outputs:{FragColor:"vec4"},mainCode:["vec3 normal = normalize(varNormal);","vec3 color = shiftHue(vec3(0.5) + 0.5 * normal, uniHue);","color *= smoothstep(-1.0, 1.0, normal.z);","FragColor = vec4(color * varLight, 1.0);"]}).code;class N extends s.tbm{constructor(n,e){super(),this.context=n,this.light=0,this.move=0,this.name="Tunnel";const t=new s.a6X(n.gl,{vert:S,frag:j});this.prg=t;const o=new s.I9j({attShift:"float"},{divisor:1});o.set("attShift",new Float32Array([0,1,2,3,4]));const i=new s.I9j({POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"});e.setAttrib(i,"POSITION"),e.setAttrib(i,"NORMAL"),e.setAttrib(i,"TEXCOORD_0");const r=e.getMeshPrimitiveIndices();this.type=(0,s.Lmp)(r),this.count=r.length;const a=new s.ZV_(n.gl,t,[o,i],r);this.vao=a}delete(){this.prg.delete(),this.vao.delete()}paint(n,e){const{context:t,prg:o,vao:i,count:s,type:r,move:a}=this,{gl:c}=t;o.use(),o.uniformMatrix4fv("uniModelViewMatrix",t.camera.matrixModelView),o.uniformMatrix4fv("uniProjectionMatrix",t.camera.matrixProjection),o.uniform1f("uniMove",a),o.uniform1f("uniLight",this.light),o.uniform1f("uniHue",n),i.bind(),c.drawElementsInstanced(c.TRIANGLES,s,r,0,4),i.unbind()}}const O=new s.oao(.8,.6,.1,1);class U extends s.rBx{constructor(n={}){var e;super(),this.light=1,this.uniforms={uniModelViewMatrix:"mat4",uniLight:"float"},this.specularExponent=10,this.specularIntensity=.2;const t=n.color instanceof s.HTX?n.color:new s.oao(null!==(e=n.color)&&void 0!==e?e:O),o=!(t instanceof s.oao);this.texture=o?t:null;const i=new s.hNi(0,0,-1);this.fragmentShaderCode=[`vec3 uniLightDir = vec3(${i.join(", ")});`,`float uniSpecularIntensity = ${this.specularIntensity.toFixed(2)};`,`float uniSpecularExponent = ${this.specularExponent.toFixed(2)};`,"vec3 normal = normalize(varNormal);","float light = 1.0 - dot(normal, uniLightDir);",o?"vec4 color = texture(texDiffuse, varUV);":`vec4 color = vec4(${t.join(", ")});`,"vec3 normal2 = mat3(uniModelViewMatrix) * normal;","float spec = max(0.0, reflect(uniLightDir, normal2).z);","spec = pow(spec, uniSpecularExponent) * uniSpecularIntensity;","color = vec4(","  color.rgb * vec3(light) + vec3(spec),","  1.0",");","float ghost = smoothstep(0.5, 0.0, normal.z) * .3;","color.rgb += vec3(1.0 + normal.x, 1.0 + normal.y, 0.0) * ghost;","return color * vec4(vec3(uniLight), 1.0);"],this.vertexShaderCode=["varNormal = mat3(uniTransfoMatrix) * NORMAL;"],this.varyings={varNormal:"vec3"},o&&(this.vertexShaderCode.push("varUV = TEXCOORD_0;"),this.varyings.varUV="vec2",this.uniforms.texDiffuse="sampler2D")}setUniforms(n){const{texture:e,light:t}=this;e&&e.activate(0,n,"texDiffuse"),n.uniform1f("uniLight",t)}}class L extends s.tbm{constructor(n,e,t=0){super(),this.speed=100,this.time0=0,this.loop=!0,this._x=0,this.y=0,this._z=0,this.rotX=0,this.rotY=0,this.rotZ=0;const o=new s.dRj(n,{asset:e,material:({color:n})=>new U({color:n})});o.transfo.setPosition(0,0,0),this.painter=o,this.reset(t)}hitTest({x:n,z:e}){return!(Math.abs(e-this._z)>2)&&Math.abs(n-this._x)<2}get x(){return this._x}set x(n){this._x=n}get z(){return this._z}set z(n){this._z=n}reset(n=0){this._x=(0,s.Qc2)(-8,8),this.y=(1-Math.abs(this._x)/8)*(0,s.Qc2)(-3,3),this._z=-200*(1+n),this.rotX=(0,s.Qc2)(-240,240),this.rotY=(0,s.Qc2)(-240,240),this.rotZ=(0,s.Qc2)(-240,240),this.painter.transfo.setScale((0,s.Qc2)(.7,1.1),(0,s.Qc2)(.7,1.1),(0,s.Qc2)(.7,1.1))}delete(){}paint(n,e){const{painter:t,_x:o,y:i,_z:r,rotX:a,rotY:c,rotZ:l,speed:A}=this,{transfo:u}=t,d=(0,s.BAd)(-200,0,r);t.material.light=d,u.setPosition(o,i,r),u.setEulerRotation(a*n,c*n,l*n),t.paint(n,e),this._z+=e*A,this._z>20&&this.loop&&this.reset()}}class z extends s.EWU{constructor(n,e){super(),this.name="Obstacles",this.obtacles=[new L(n,e),new L(n,e,.5),new L(n,e,.25),new L(n,e,.75)],this.add(...this.obtacles)}set loop(n){for(const e of this.obtacles)e.loop=n}set speed(n){for(const e of this.obtacles)e.speed=n}set time0(n){for(const e of this.obtacles)e.time0=n}hitTest({x:n,y:e,z:t}){for(const o of this.obtacles)if(o.hitTest({x:n,y:e,z:t}))return!0;return!1}}class P extends s.buV{constructor(n,e){var t;const o=e.getNodeByNameOrThrow("Moon"),i=null!==(t=o.mesh)&&void 0!==t?t:0,r=new s.dRj(n,{asset:e,meshIndex:i}),a={};o.translation&&(a.position=new s.hNi(o.translation)),o.rotation&&(a.orientation=new s.HIE(o.rotation)),o.scale&&(a.scale=new s.hNi(o.scale)),super({children:[r],transfo:a,name:"Moon"})}}const R=new s.dLJ({attributes:{attUV:"vec2"},varying:{varUV:"vec2"},mainCode:["varUV = attUV;","vec2 pos = varUV * vec2(.1, 2.0);","float x = pos.x;","float y = pos.y;","gl_Position = vec4(",["x - 1.0,","1.0 - y,","0.0,","1.0"],");"]}).code,Y=new s.NI6({uniforms:{uniPercent:"float",uniTextureBack:"sampler2D",uniTextureFront:"sampler2D"},varying:{varUV:"vec2"},mainCode:["vec4 front = texture(uniTextureFront, varUV);","vec4 back1 = texture(uniTextureBack, varUV);","vec4 back0 = vec4(",["vec3((back1.r + back1.g + back1.b) / 16.0),","back1.a"],");","vec4 back = mix(",["back1,","back0,","smoothstep(uniPercent, uniPercent + .1, varUV.y)"],");","FragColor = mix(back, front, front.a);"],outputs:{FragColor:"vec4"}}).code;class W extends s.tbm{constructor(n,e){super(),this.context=n,this._percent=0,this.texBack=new s.HTX(n).loadBitmap(e.imageMiniatureBack),this.texFront=new s.HTX(n).loadBitmap(e.imageMiniatureFront),this.name="Miniature";const t=new s.a6X(n.gl,{vert:R,frag:Y});this.prg=t;const o=new s.I9j({attUV:"vec2"});o.set("attUV",new Float32Array([0,0,0,1,1,0,1,1]));const i=new s.ZV_(n.gl,t,[o]);this.vao=i}get percent(){return this._percent}set percent(n){this._percent=(0,s.O6b)(n,0,1)}delete(){this.prg.delete(),this.vao.delete(),this.texBack.delete(),this.texFront.delete()}paint(n,e){const{context:t,prg:o,vao:i,texFront:r,texBack:a,percent:c}=this,{gl:l}=t;o.use(),a.activate(0,o,"uniTextureBack"),r.activate(1,o,"uniTextureFront"),o.uniform1f("uniPercent",c),i.bind(),s.Ipk.do({gl:t.gl,cull:s.TfJ.off,depth:s.Eg5.off,blend:s.aMr.alpha},(()=>l.drawArrays(l.TRIANGLE_STRIP,0,4))),i.unbind()}}class F{constructor(n,e){this.moon=new P(n,e.glb.moon),this.saucer=new M(n,e.glb.saucer),this.tunnel=new N(n,e.glb.tunnel),this.obstacles=new z(n,e.glb.obstacle),this.miniature=new W(n,{imageMiniatureBack:e.image.imageMiniatureBack,imageMiniatureFront:e.image.imageMiniatureFront});const{width:t,height:o}=e.image.imageNegZ,i=(0,s.lu8)(t,o),r=new s.$ff(n,{camera:n.camera,imagePosX:i,imagePosY:i,imagePosZ:i,imageNegX:i,imageNegY:i,imageNegZ:e.image.imageNegZ});this.groupInterior=new s.EWU([this.tunnel,this.obstacles],{name:"Interior"}),this.groupInterior.active=!1,this.groupExterior=new s.EWU([this.moon,r],{name:"Exterior"}),this.groupExterior.active=!1;const a=new s.o57(n,{depth:1,color:[0,0,0,1]}),c=new s.Ipk(n,{depth:s.Eg5.lessOrEqual,cull:s.TfJ.back,children:[this.groupInterior,this.groupExterior,this.saucer]});n.add(a,c,this.miniature),this.step="exterior"}set step(n){this.groupExterior.active="exterior"===n,this.groupInterior.active="interior"===n}}const Z=t.p+"img/boom.86b5afa8a23885b87b38.mp3";class q{constructor(){this.actors=null,this.context=null,this.time0=-1,this.time1=-1,this.savedTunnelMove=-1,this.sounds=new s.DCi,this.setVictory=n=>{},this.init=(n,e,t)=>{this.setVictory=t;const o=new F(n,e);this.actors=o,this.context=n,this.reset(),n.play()},this.stepTransitionFromExteriorToInterior=()=>{const{context:n,actors:e}=this;if(!n||!e)return;const{saucer:t,tunnel:o,miniature:i}=e;t.mode="interactive",e.step="interior",n.animSchedule({duration:.2,action:(0,s.$4L)(t.node.transfo,{scale:t.node.transfo.scale.clone()},{scale:[.5,.5,.5]})}),n.animSchedule({delay:.2,duration:2,easingFunction:s.Wcc,action:n=>{o.light=n}}),this.time0=-1,e.obstacles.time0=this.time0,n.logicClear(),n.logicAdd(this.logicTunnelRun),i.active=!0,i.percent=0},this.reset=()=>{const{context:n,actors:e}=this;if(!n||!e)return;this.setVictory(!1);const{saucer:t,miniature:o,obstacles:i}=e;i.loop=!0,o.active=!1,e.step="exterior",t.active=!0,t.node.transfo.setPosition(0,180,0),n.camera.from(new s.xNY({fovy:(0,s.HPH)(40),near:.01,far:1e3,zoom:2.5421269851440123,transfo:{distance:0,position:[0,300,-300],orientation:[.341026246547699,-.19848087430000305,-.5130870938301086,.7622650861740112],scale:[2.5421268939971924,2.5421268939971924,2.5421268939971924]}}))},this.start=()=>{const{context:n,actors:e}=this;if(!n||!e)return;const{saucer:t}=e;n.animSchedule((0,s.emj)(t.node.transfo,[{duration:3,transfo:{position:[0,100,0]}},{duration:1,transfo:{position:[0,0,0]}}])),n.animSchedule((0,s.emj)(n.camera.transfo,[{duration:3,easingFunction:s.LcY,transfo:{distance:150,orientation:new s.HIE,position:new s.hNi(0,120,0)}},{duration:1,easingFunction:s.Wcc,transfo:{distance:0,position:new s.hNi(0,90,0),orientation:new s.HIE(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)}},{duration:1,easingFunction:s.Wcc,transfo:{distance:20,position:new s.hNi(0,0,0),orientation:new s.HIE(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)},onEnd:this.stepTransitionFromExteriorToInterior},{duration:.6,transfo:{distance:20,orientation:new s.HIE,position:[0,4,0],scale:[1,1,1]}}])),n.animSchedule({duration:2,easingFunction:s.ygX,action(e){n.camera.zoom=(0,s.fTR)(3,1,e)}})},this.logicTunnelRun=(n,e)=>{const{actors:t,context:o}=this;if(!t||!o)return;this.time0<0&&(this.time0=n),n-=this.time0,t.miniature.percent+=e/120,1===t.miniature.percent&&(t.obstacles.loop=!1,window.setTimeout((()=>this.setVictory(!0)),2e3));const i=70+n;t.tunnel.move=n*i,t.obstacles.speed=i,t.obstacles.hitTest(t.saucer)&&(this.sounds.play("boom"),o.logicClear(),o.logicAdd(this.logicBoom),this.time1=-1,this.savedTunnelMove=t.tunnel.move)},this.logicBoom=(n,e)=>{const{actors:t,context:o}=this;if(!t||!o)return;this.time1<0&&(this.time1=n),n-=this.time1,t.miniature.percent-=10*e/120,t.saucer.woobling=4*Math.cos(n/2);const i=-70*Math.sin(n);t.tunnel.move=this.savedTunnelMove+i*(1+.5*t.saucer.woobling),t.obstacles.speed=i>0?0:2*i,n>=Math.PI&&(o.logicClear(),o.logicAdd(this.logicTunnelRun),this.time0=-1)},this.sounds.add("boom",Z)}}const X=t.p+"img/negZ.0605a456c61684cca92e.webp",D=t.p+"img/miniature-1.d505f7b84bbd50962a83.webp",H=t.p+"img/miniature-2.2155d6f6d1ad028d10fd.webp",$=t.p+"bin/moon.7bbc310fdf7a63bb0e9b.glb",J=t.p+"bin/saucer.972f959b0b5793f88921.glb",G=t.p+"bin/tunnel.e91067c02b7240d699c0.glb",K=t.p+"bin/obstacle-1.a54849a260c0179f5712.glb";var Q=t(642),nn={};nn.styleTagTransform=b(),nn.setAttributes=h(),nn.insert=m().bind(null,"head"),nn.domAPI=u(),nn.insertStyleElement=f(),l()(Q.A,nn);const en=Q.A&&Q.A.locals?Q.A.locals:void 0;var tn=t(6615),on=t(2198);function sn(){const[n,e]=i.useState(!1),t=(0,_.m)(),[s,r]=i.useState(!1),a=function(){const n=i.useRef(null);return n.current||(n.current=new q),n.current}();return(0,o.jsxs)("div",{className:en.play,children:[(0,o.jsx)(y,{gizmo:!1,options:{alpha:!1},onReady:(n,t)=>{a.init(n,t,e)},assets:{image:{imageNegZ:X,imageMiniatureBack:D,imageMiniatureFront:H},glb:{moon:$,saucer:J,tunnel:G,obstacle:K}}}),!s&&(0,o.jsx)("div",{className:en.startScreen,children:(0,o.jsx)(V,{className:en.startButton,onClick:()=>{a.start(),r(!0)},autoFocus:!0,children:t.start()})}),(0,o.jsx)("div",{className:[en.victory,n&&en.show].join(" "),children:n&&(0,o.jsx)(tn.A,{pages:[t.win()],onDone:(0,on.ig)("/04")})})]})}},4335:(n,e,t)=>{t.d(e,{A:()=>o});const o={intro1:"Tu es le meilleur Anselm!\n\nLa soucoupe est maintenant pleine de carburant et on va pouvoir aller sur la Lune chercher un vaisseau plus puissant pour sortir du système solaire.",intro2:"Pour rester discrēts, on l'a caché dans un cratère.\n    \n    Il va falloir faire preuve d'un peu d'adresse pour naviguer là-dedans.",start:"C'est parti !",win:"Super ! Te voilà arrivé dans la base sous-lunaire.\n    \nRepose-toi bien : demain, on part avec le gros vaisseau !"}},6615:(n,e,t)=>{t.d(e,{A:()=>T});var o=t(6070),i=t(758),s=t(43),r=t.n(s),a=t(5920),c=t.n(a),l=t(3004),A=t.n(l),u=t(7419),d=t.n(u),m=t(1663),p=t.n(m),h=t(1612),g=t.n(h),f=t(246),v={};v.styleTagTransform=g(),v.setAttributes=d(),v.insert=A().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=p(),r()(f.A,v);const b=f.A&&f.A.locals?f.A.locals:void 0;var B=t(534),C={};C.styleTagTransform=g(),C.setAttributes=d(),C.insert=A().bind(null,"head"),C.domAPI=c(),C.insertStyleElement=p(),r()(B.A,C);const w=B.A&&B.A.locals?B.A.locals:void 0;function I({className:n,children:e,onDone:t}){const s=i.useRef(0),r=i.useRef(0),[a,c]=i.useState([]),[l,A]=i.useState(0);return i.useEffect((()=>(s.current=0,A(0),c([]),window.setTimeout((()=>{c(e.split(""))})),window.clearTimeout(r.current),r.current=window.setInterval((()=>{if(s.current++,s.current>e.length)return window.clearTimeout(r.current),r.current=0,void(null==t||t());A(s.current)}),20),()=>window.clearTimeout(r.current))),[e]),(0,o.jsx)("div",{className:x(n,w.viewText),children:(0,o.jsx)("div",{onClick:()=>{s.current=e.length,A(s.current),null==t||t()},children:a.map(((n,t)=>"\n"===n?(0,o.jsx)("br",{}):(0,o.jsx)("span",{className:x(t<l&&w.show),children:n},`${n}$#${t}/${e.length}`)))})})}function x(...n){return n.filter((n=>"string"==typeof n)).join(" ")}var y=t(8637),_=t(4007),k=t(3211);function T({className:n,pages:e,onDone:t}){const[s,r]=i.useState(!0),[a,c]=i.useState(0),l=(0,y.U)(e[a]),A=a>=e.length-1;return(0,o.jsx)(_.A,{children:(0,o.jsxs)("div",{className:E(n,b.viewBook),children:[(0,o.jsx)(I,{onDone:()=>r(!1),children:null!=l?l:"..."}),(0,o.jsxs)("footer",{children:[(0,o.jsx)(k.A,{}),(0,o.jsx)("button",{type:"button",disabled:s,onClick:()=>{const n=a+1;n>=e.length?t():(r(!0),c(n),document.body.requestFullscreen())},children:A?(0,o.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",children:[(0,o.jsx)("title",{children:"controller"}),(0,o.jsx)("path",{d:"M7.97,16L5,19C4.67,19.3 4.23,19.5 3.75,19.5A1.75,1.75 0 0,1 2,17.75V17.5L3,10.12C3.21,7.81 5.14,6 7.5,6H16.5C18.86,6 20.79,7.81 21,10.12L22,17.5V17.75A1.75,1.75 0 0,1 20.25,19.5C19.77,19.5 19.33,19.3 19,19L16.03,16H7.97M7,8V10H5V11H7V13H8V11H10V10H8V8H7M16.5,8A0.75,0.75 0 0,0 15.75,8.75A0.75,0.75 0 0,0 16.5,9.5A0.75,0.75 0 0,0 17.25,8.75A0.75,0.75 0 0,0 16.5,8M14.75,9.75A0.75,0.75 0 0,0 14,10.5A0.75,0.75 0 0,0 14.75,11.25A0.75,0.75 0 0,0 15.5,10.5A0.75,0.75 0 0,0 14.75,9.75M18.25,9.75A0.75,0.75 0 0,0 17.5,10.5A0.75,0.75 0 0,0 18.25,11.25A0.75,0.75 0 0,0 19,10.5A0.75,0.75 0 0,0 18.25,9.75M16.5,11.5A0.75,0.75 0 0,0 15.75,12.25A0.75,0.75 0 0,0 16.5,13A0.75,0.75 0 0,0 17.25,12.25A0.75,0.75 0 0,0 16.5,11.5Z"})]}):(0,o.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",children:[(0,o.jsx)("title",{children:"dots-horizontal"}),(0,o.jsx)("path",{d:"M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z"})]})})]})]})})}function E(...n){return n.filter((n=>"string"==typeof n)).join(" ")}},7138:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(8519),i=t.n(o),s=t(3645),r=t.n(s)()(i());r.push([n.id,'.src-components-Button-Button-module_button_AisLsJ {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.src-components-Button-Button-module_button_AisLsJ::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.src-components-Button-Button-module_button_AisLsJ:focus,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-visible,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n',"",{version:3,sources:["webpack://./src/components/Button/Button.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,wBAAwB;IACxB,mEAAmE;IACnE,WAAW;IACX,cAAc;IACd,oBAAoB;IACpB,gBAAgB;IAChB,0BAA0B;IAC1B,0BAA0B;IAC1B,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,oBAAoB;IACpB,0BAA0B;IAC1B,2BAA2B;AAC/B;;AAEA;;;IAGI,aAAa;IACb,iDAAiD;IACjD,6BAA6B;AACjC",sourcesContent:['.button {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.button::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.button:focus,\nbutton.button:focus-visible,\nbutton.button:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n'],sourceRoot:""}]),r.locals={button:"src-components-Button-Button-module_button_AisLsJ"};const a=r},8637:(n,e,t)=>{function o(n){return Array.isArray(n)?n[Math.floor(Math.random()*n.length)]:n}t.d(e,{U:()=>o})},9231:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(8519),i=t.n(o),s=t(3645),r=t.n(s)()(i());r.push([n.id,'.src-components-LanguageSelector-LanguageSelector-module_languageselector_qy7Eqa {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  gap: 0.5em;\n  align-items: center;\n}\n\n.src-components-LanguageSelector-LanguageSelector-module_languageselector_qy7Eqa > button {\n    position: relative;\n  border: inherit;\n  font: inherit;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n  width: 2em;\n  height: 2em;\n  cursor: pointer;\n}\n\n.src-components-LanguageSelector-LanguageSelector-module_languageselector_qy7Eqa > button::after {\n    content: "";\n    transition: all 0.2s;\n    opacity: 0;\n    position: absolute;\n    left: 0;\n    bottom: -.5em;\n    width: 100%;\n    height: .2em;\n    border-radius: 99vmax;\n    background-color: #fff;\n    box-shadow: 0 0 .2em #000;\n }\n\n  .src-components-LanguageSelector-LanguageSelector-module_languageselector_qy7Eqa > button.src-components-LanguageSelector-LanguageSelector-module_current_m0PJ6q::after {\n    opacity: 1;\n  }\n    \n.src-components-LanguageSelector-LanguageSelector-module_languageselector_qy7Eqa > button > img {\n  width: 2em;\n  height: 2em;\n  margin: 0;\n}\n',"",{version:3,sources:["webpack://./src/components/LanguageSelector/LanguageSelector.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,2BAA2B;EAC3B,UAAU;EACV,mBAAmB;AACrB;;AAEA;IACI,kBAAkB;EACpB,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,eAAe;EACf,UAAU;EACV,SAAS;EACT,UAAU;EACV,WAAW;EACX,eAAe;AACjB;;AAEA;IACI,WAAW;IACX,oBAAoB;IACpB,UAAU;IACV,kBAAkB;IAClB,OAAO;IACP,aAAa;IACb,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;IACtB,yBAAyB;CAC5B;;EAEC;IACE,UAAU;EACZ;;AAEF;EACE,UAAU;EACV,WAAW;EACX,SAAS;AACX",sourcesContent:['.languageselector {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  gap: 0.5em;\n  align-items: center;\n}\n\n.languageselector > button {\n    position: relative;\n  border: inherit;\n  font: inherit;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n  width: 2em;\n  height: 2em;\n  cursor: pointer;\n}\n\n.languageselector > button::after {\n    content: "";\n    transition: all 0.2s;\n    opacity: 0;\n    position: absolute;\n    left: 0;\n    bottom: -.5em;\n    width: 100%;\n    height: .2em;\n    border-radius: 99vmax;\n    background-color: #fff;\n    box-shadow: 0 0 .2em #000;\n }\n\n  .languageselector > button.current::after {\n    opacity: 1;\n  }\n    \n.languageselector > button > img {\n  width: 2em;\n  height: 2em;\n  margin: 0;\n}\n'],sourceRoot:""}]),r.locals={languageselector:"src-components-LanguageSelector-LanguageSelector-module_languageselector_qy7Eqa",current:"src-components-LanguageSelector-LanguageSelector-module_current_m0PJ6q"};const a=r},9715:(n,e,t)=>{t.d(e,{m:()=>s});var o=t(3095),i=t(4335);function s(){return(0,o.L5)(i.A,{en:()=>t.e(36).then(t.bind(t,3036)),alien:()=>t.e(588).then(t.bind(t,6588))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,