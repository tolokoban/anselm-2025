(()=>{"use strict";var n,t,e,o={209:(n,t,e)=>{e.d(t,{A:()=>i});var o=e(354),r=e.n(o),a=e(314),s=e.n(a)()(r());s.push([n.id,".src-app-layout-module_Layoutbackground_NCtEei,\n.src-app-layout-module_Layoutbackground_NCtEei > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n","",{version:3,sources:["webpack://./src/app/layout.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:[".Layoutbackground,\n.Layoutbackground > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n"],sourceRoot:""}]),s.locals={Layoutbackground:"src-app-layout-module_Layoutbackground_NCtEei"};const i=s},165:(n,t,e)=>{e.d(t,{A:()=>h});var o=e(354),r=e.n(o),a=e(314),s=e.n(a),i=e(417),l=e.n(i),c=new URL(e(473),e.b),u=new URL(e(855),e.b),d=s()(r()),f=l()(c),A=l()(u);d.push([n.id,`/* latin-ext */\n@font-face {\n    font-family: 'Audiowide';\n    font-style: normal;\n    font-weight: 400;\n    font-display: swap;\n    src: url(${f}) format('woff2');\n    unicode-range: U+0100-02BA, U+02BD-02C5, U+02C7-02CC, U+02CE-02D7, U+02DD-02FF, U+0304, U+0308, U+0329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;\n  }\n  /* latin */\n  @font-face {\n    font-family: 'Audiowide';\n    font-style: normal;\n    font-weight: 400;\n    font-display: swap;\n    src: url(${A}) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n  }\n  \n\nhtml,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: "Audiowide", sans-serif;\n    font-weight: 400;\n    font-style: normal;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n`,"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA,cAAc;AACd;IACI,wBAAwB;IACxB,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,4DAAwD;IACxD,iNAAiN;EACnN;EACA,UAAU;EACV;IACE,wBAAwB;IACxB,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,4DAAoD;IACpD,yLAAyL;EAC3L;;;AAGF;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,oCAAoC;IACpC,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B",sourcesContent:["/* latin-ext */\n@font-face {\n    font-family: 'Audiowide';\n    font-style: normal;\n    font-weight: 400;\n    font-display: swap;\n    src: url(./gfx/font/audiowide-ext.woff2) format('woff2');\n    unicode-range: U+0100-02BA, U+02BD-02C5, U+02C7-02CC, U+02CE-02D7, U+02DD-02FF, U+0304, U+0308, U+0329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;\n  }\n  /* latin */\n  @font-face {\n    font-family: 'Audiowide';\n    font-style: normal;\n    font-weight: 400;\n    font-display: swap;\n    src: url(./gfx/font/audiowide.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n  }\n  \n\nhtml,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: \"Audiowide\", sans-serif;\n    font-weight: 400;\n    font-style: normal;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n"],sourceRoot:""}]);const h=d},829:(n,t,e)=>{e.d(t,{Di:()=>i,bw:()=>r,gQ:()=>a,s9:()=>u});var o=e(540);const r={"/":["/"],"/dead":["/dead"],"/play":["/play"]};function a(n,...t){var e;const o=function(n,t){const e=r[n];let o=0;return e.map((n=>"["===n.charAt(0)?t[o++]:n)).join("/")}(n,t);return o!==(null==(e=A().value)?void 0:e.path)&&(window.location.hash=o,!0)}function s(n){let t=null;for(const e of Object.values(r)){const o=i(n,e);if(o){if(0===o.distance)return o;(!t||o.distance<t.distance)&&(t=o)}}return t}function i(n,t){if(!t)return null;let e=n;const o={};for(let n=0;n<t.length;n++){if(e.length<1)return null;const r=t[n];if(r.startsWith("[")){const n=r.substring(1,r.length-1),[t,a]=l(e);o[n]=t,e=a}else{if(!e.startsWith(r))return null;e=e.substring(r.length+1)}}return{path:n,route:t.join("/"),params:o,distance:e.length}}function l(n){const t=n.indexOf("/");return t<0?[n,""]:[n.substring(0,t),n.substring(t+1)]}class c{constructor(n){this.security=n,this.listeners=new Set,this._value=null,this.handleHashChange=n=>{const t=this.extractHash(n.oldURL),e=this.extractHash(n.newURL),o=this.ensureAbsoluteHash(e,t);o!==e&&history.replaceState({},"",`#${o}`),this.setHash(o)},this.nonEmpty=n=>"string"==typeof n&&n.trim().length>0;const t=this.extractHash(window.location.href);this.setHash(t).then((()=>window.addEventListener("hashchange",this.handleHashChange))).catch((n=>{console.error(`Unable to set hash to "${t}":`,n)}))}addListener(n){this.listeners.add(n)}removeListener(n){this.listeners.delete(n)}get value(){return this._value}setHash(n){return t=this,e=function*(){var t;let e=s(n);if(e)for(const[t,o]of this.security){if(!e.route.startsWith(t))continue;const r=yield o(e.route,n);if(r&&r!==e.route){if(e=s(r),!e)break;return this._value=null,void a(e.path)}}(null==(t=this._value)?void 0:t.route)!==(null==e?void 0:e.route)&&(this._value=e,this.listeners.forEach((n=>n(e))))},new Promise(((n,o)=>{var r=n=>{try{s(e.next(n))}catch(n){o(n)}},a=n=>{try{s(e.throw(n))}catch(n){o(n)}},s=t=>t.done?n(t.value):Promise.resolve(t.value).then(r,a);s((e=e.apply(t,null)).next())}));var t,e}extractHash(n){const t=new URL(n).hash;return t?t.startsWith("#")?t.substring(1):t:"/"}ensureAbsoluteHash(n,t){if(n.startsWith("/"))return n;let e=n;for(;e.startsWith("./");)e=e.substring(2);const o=t.split("/").filter(this.nonEmpty);for(const t of n.split("/"))".."===t?o.length>0&&o.pop():o.push(t);return`/${o.filter(this.nonEmpty).join("/")}`}}function u(){const[n,t]=o.useState(A().value);return o.useEffect((()=>{const n=n=>{t(n)};return A().addListener(n),()=>A().removeListener(n)}),[]),n}const d=[];let f=null;function A(){return f||(f=new c(d)),f}},419:(n,t,e)=>{var o=e(848),r=e(540),a=e(338),s=e(829),i=e(72),l=e.n(i),c=e(825),u=e.n(c),d=e(659),f=e.n(d),A=e(56),h=e.n(A),p=e(159),g=e.n(p),m=e(113),C=e.n(m),y=e(209),U={};U.styleTagTransform=C(),U.setAttributes=h(),U.insert=f().bind(null,"head"),U.domAPI=u(),U.insertStyleElement=g(),l()(y.A,U);const b=y.A&&y.A.locals?y.A.locals:void 0;function w({children:n}){return(0,o.jsx)("div",{className:b.Layoutbackground,children:n})}const v=r.lazy((()=>e.e(900).then(e.bind(e,900)))),B=r.lazy((()=>e.e(656).then(e.bind(e,656)))),k=r.lazy((()=>e.e(267).then(e.bind(e,822))));function I({lang:n}){const t=(0,s.s9)(),e=(0,o.jsx)("div",{children:"Loading..."}),r=w,a=v,i=B,l=k;return(0,o.jsxs)(x,{path:"/",Page:a,Layout:r,fallback:e,context:t,children:[(0,o.jsx)(x,{path:"/dead",Page:i,fallback:e,context:t}),(0,o.jsx)(x,{path:"/play",Page:l,fallback:e,context:t})]})}function x({path:n,fallback:t,children:e,Page:a,Layout:i,Template:l,context:c}){const u=c&&(0,s.Di)(c.path,s.bw[n]);if(!u)return null;if(0===u.distance){if(!a)return null;const n=l?(0,o.jsx)(l,{params:u.params,children:(0,o.jsx)(a,{params:u.params})}):(0,o.jsx)(a,{params:u.params});return i?(0,o.jsx)(i,{params:u.params,children:(0,o.jsx)(r.Suspense,{fallback:t,children:n})}):(0,o.jsx)(r.Suspense,{fallback:t,children:n})}return i?(0,o.jsx)(i,{params:u.params,children:e}):(0,o.jsx)(o.Fragment,{children:e})}var E=e(165),F={};F.styleTagTransform=C(),F.setAttributes=h(),F.insert=f().bind(null,"head"),F.domAPI=u(),F.insertStyleElement=g(),l()(E.A,F),E.A&&E.A.locals&&E.A.locals;var j,L=e(347),D=e(197);const S=null!=(j=localStorage.getItem("Language"))?j:navigator.language,O=new L.A(S,{storage:{id:"Language",guard:D.Kg}});function P(){const[,n]=O.useState();return r.useEffect((()=>{const t=new URLSearchParams(window.location.search).get("lang");"string"==typeof t&&t.length>1&&n(t),function(){const n=document.getElementById("splash");n&&(n.classList.add("vanish"),window.setTimeout((()=>{const t=n.parentNode;t&&t.removeChild(n)}),900))}()}),[n]),(0,o.jsx)(r.StrictMode,{children:(0,o.jsx)(I,{})})}!function(){const n=document.getElementById("app");(0,a.H)(n).render((0,o.jsx)(P,{}))}()},473:(n,t,e)=>{n.exports=e.p+"fnt/audiowide-ext.e63d1d204b80a3c8a2aa.woff2"},855:(n,t,e)=>{n.exports=e.p+"fnt/audiowide.e2f182ff1cd812954a41.woff2"}},r={};function a(n){var t=r[n];if(void 0!==t)return t.exports;var e=r[n]={id:n,exports:{}};return o[n](e,e.exports,a),e.exports}a.m=o,n=[],a.O=(t,e,o,r)=>{if(!e){var s=1/0;for(u=0;u<n.length;u++){for(var[e,o,r]=n[u],i=!0,l=0;l<e.length;l++)(!1&r||s>=r)&&Object.keys(a.O).every((n=>a.O[n](e[l])))?e.splice(l--,1):(i=!1,r<s&&(s=r));if(i){n.splice(u--,1);var c=o();void 0!==c&&(t=c)}}return t}r=r||0;for(var u=n.length;u>0&&n[u-1][2]>r;u--)n[u]=n[u-1];n[u]=[e,o,r]},a.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return a.d(t,{a:t}),t},a.d=(n,t)=>{for(var e in t)a.o(t,e)&&!a.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},a.f={},a.e=n=>Promise.all(Object.keys(a.f).reduce(((t,e)=>(a.f[e](n,t),t)),[])),a.u=n=>"scr/"+n+"."+{267:"5d2579939a21d6afb656",656:"223ccfc6f024ef9d9a91",900:"b4ccb020762aef8be80d"}[n]+".js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),a.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),t={},e="...:",a.l=(n,o,r,s)=>{if(t[n])t[n].push(o);else{var i,l;if(void 0!==r)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==e+r){i=d;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.setAttribute("data-webpack",e+r),i.src=n),t[n]=[o];var f=(e,o)=>{i.onerror=i.onload=null,clearTimeout(A);var r=t[n];if(delete t[n],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((n=>n(o))),e)return e(o)},A=setTimeout(f.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=f.bind(null,i.onerror),i.onload=f.bind(null,i.onload),l&&document.head.appendChild(i)}},a.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;a.g.importScripts&&(n=a.g.location+"");var t=a.g.document;if(!n&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");if(e.length)for(var o=e.length-1;o>-1&&(!n||!/^http(s?):/.test(n));)n=e[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=n+"../"})(),(()=>{a.b=document.baseURI||self.location.href;var n={524:0};a.f.j=(t,e)=>{var o=a.o(n,t)?n[t]:void 0;if(0!==o)if(o)e.push(o[2]);else{var r=new Promise(((e,r)=>o=n[t]=[e,r]));e.push(o[2]=r);var s=a.p+a.u(t),i=new Error;a.l(s,(e=>{if(a.o(n,t)&&(0!==(o=n[t])&&(n[t]=void 0),o)){var r=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",i.name="ChunkLoadError",i.type=r,i.request=s,o[1](i)}}),"chunk-"+t,t)}},a.O.j=t=>0===n[t];var t=(t,e)=>{var o,r,[s,i,l]=e,c=0;if(s.some((t=>0!==n[t]))){for(o in i)a.o(i,o)&&(a.m[o]=i[o]);if(l)var u=l(a)}for(t&&t(e);c<s.length;c++)r=s[c],a.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return a.O(u)},e=self.webpackChunk_=self.webpackChunk_||[];e.forEach(t.bind(null,0)),e.push=t.bind(null,e.push.bind(e))})(),a.nc=void 0;var s=a.O(void 0,[458],(()=>a(419)));s=a.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,