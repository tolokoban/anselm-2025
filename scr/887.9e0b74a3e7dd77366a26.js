"use strict";(self.webpackChunkansy_2025=self.webpackChunkansy_2025||[]).push([[887],{108:(t,n,e)=>{e.d(n,{A:()=>a});var o=e(8519),i=e.n(o),s=e(3645),r=e.n(s)()(i());r.push([t.id,".src-components-Tgd-tgd-module_Tgd_OOp4wr {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.src-components-Tgd-tgd-module_scene_Y7GvnV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.src-components-Tgd-tgd-module_gizmo_xdmsjj {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO.src-components-Tgd-tgd-module_hide_c5quHT {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.src-components-Tgd-tgd-module_spinner_xcGEuO > svg {\n    animation-name: src-components-Tgd-tgd-module_anim__5xUBz;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes src-components-Tgd-tgd-module_anim__5xUBz {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}","",{version:3,sources:["webpack://./src/components/Tgd/tgd.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,4BAA4B;IAC5B,UAAU;IACV,SAAS;IACT,0CAA0C;IAC1C,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,yDAAoB;IACpB,sBAAsB;IACtB,mCAAmC;IACnC,8BAA8B;AAClC;;AAEA;IACI,KAAK,YAAY,EAAE,oBAAoB,CAAC;IACxC,OAAO,UAAU,EAAE,mBAAmB;AAC1C",sourcesContent:[".Tgd {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\ncanvas.scene {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas.gizmo {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n}\n\n.spinner {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 0;\n    margin: 0;\n    background: color-mix(in srgb, #05d, #000);\n    place-items: center;\n    z-index: 999999;\n    transition: opacity .6s;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.spinner.hide {\n    opacity: 0;\n    pointer-events: none;\n}\n\n.spinner > div {\n    color: #f90;\n    font-size: 6vw;\n    line-height: 3;\n}\n\n.spinner > svg {\n    animation-name: anim;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n}\n\n@keyframes anim {\n    0% { opacity: 0.5; transform: scale(.8);}\n    100% { opacity: 1; transform: scale(1)}\n}"],sourceRoot:""}]),r.locals={Tgd:"src-components-Tgd-tgd-module_Tgd_OOp4wr",scene:"src-components-Tgd-tgd-module_scene_Y7GvnV",gizmo:"src-components-Tgd-tgd-module_gizmo_xdmsjj",spinner:"src-components-Tgd-tgd-module_spinner_xcGEuO",hide:"src-components-Tgd-tgd-module_hide_c5quHT",anim:"src-components-Tgd-tgd-module_anim__5xUBz"};const a=r},642:(t,n,e)=>{e.d(n,{A:()=>a});var o=e(8519),i=e.n(o),s=e(3645),r=e.n(s)()(i());r.push([t.id,".src-app-03-play-page-module_play__1TKhV {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.src-app-03-play-page-module_startScreen_o4kZW0 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.src-app-03-play-page-module_startButton_PzpJRF {\n    font-size: 6vw;\n}\n","",{version:3,sources:["webpack://./src/app/03/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".play {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv.startScreen {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\nbutton.startButton {\n    font-size: 6vw;\n}\n"],sourceRoot:""}]),r.locals={play:"src-app-03-play-page-module_play__1TKhV",startScreen:"src-app-03-play-page-module_startScreen_o4kZW0",startButton:"src-app-03-play-page-module_startButton_PzpJRF"};const a=r},4335:(t,n,e)=>{e.d(n,{A:()=>o});const o={intro1:"Tu es le meilleur Anselm!\n\nLa soucoupe est maintenant pleine de carburant et on va pouvoir aller sur la Lune chercher un vaisseau plus puissant pour sortir du systÃ¨me solaire.",intro2:"Pour rester discrÄ“ts, on l'a cachÃ© dans un cratÃ¨re.\n    \n    Il va falloir faire preuve d'un peu d'adresse pour naviguer lÃ -dedans.",start:"C'est parti !"}},4805:(t,n,e)=>{e.r(n),e.d(n,{default:()=>Q});var o=e(6070),i=e(758),s=e(8443),r=e(3713),a=e(6203),c=e(43),l=e.n(c),u=e(5920),A=e.n(u),d=e(3004),h=e.n(d),m=e(7419),p=e.n(m),g=e(1663),f=e.n(g),v=e(1612),b=e.n(v),I=e(108),C={};C.styleTagTransform=b(),C.setAttributes=p(),C.insert=h().bind(null,"head"),C.domAPI=A(),C.insertStyleElement=f(),l()(I.A,C);const x=I.A&&I.A.locals?I.A.locals:void 0;function B(...t){return t.filter(r.Kg).join(" ")}var w=function(t,n,e,o){return new(e||(e=Promise))((function(i,s){function r(t){try{c(o.next(t))}catch(t){s(t)}}function a(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(r,a)}c((o=o.apply(t,n||[])).next())}))};function y({className:t,options:n,onReady:e,assets:c,children:l,gizmo:u=!1}){const[,A]=i.useState(!1),d=i.useRef(null),h=i.useRef(null),m=i.useRef(null),[p,g]=i.useState(!0);return i.useEffect((()=>{const t=h.current,n=d.current;if(!t||!n)return;const e=new ResizeObserver((()=>n.paint()));return e.observe(t),t.requestFullscreen||(t.requestFullscreen=t.webkitRequestFullscreen),A(Boolean(t.requestFullscreen)),()=>e.unobserve(t)}),[d.current,h.current]),(0,o.jsxs)("div",{className:[t,x.Tgd].filter(r.Kg).join(" "),children:[(0,o.jsx)("canvas",{className:x.scene,ref:t=>{if(!t)return;if(h.current)return;h.current=t;const o=new s.tfp(t,n);d.current=o,o.inputs.keyboard.eventKeyPress.addListener((t=>{if("?"===t.key){const{camera:t}=o;t instanceof s.xNY&&console.log(`new TgdCameraPerspective({\n  fovy: ${t.fovy},\n  near: ${t.near},\n  far: ${t.far},\n  zoom: ${t.zoom},\n  transfo: {\n    distance: ${t.transfo.distance},\n    position: ${JSON.stringify(Array.from(t.transfo.position))},\n    orientation: ${JSON.stringify(Array.from(t.transfo.orientation))},\n    scale: ${JSON.stringify(Array.from(t.transfo.scale))}\n  }\n})`),console.log("Camera:",o.camera.getCurrentState())}})),g(!0),function(){return w(this,arguments,void 0,(function*({glb:t,data:n,image:e}={}){const o={glb:{},data:{},image:{}},i=[];return e&&Object.keys(e).forEach((t=>{i.push((()=>w(this,void 0,void 0,(function*(){const n=e[t];try{const e=yield(0,s.V_9)(n);e&&(o.image[t]=e)}catch(n){throw console.error(`Unable to load Image "${t}"!`),console.error(n),n}}))))})),t&&Object.keys(t).forEach((n=>{i.push((()=>w(this,void 0,void 0,(function*(){const e=t[n];try{const t=yield(0,s.TCe)(e);t&&(o.glb[n]=t)}catch(t){throw console.error(`Unable to load GLB "${n}"!`),console.error(t),t}}))))})),n&&Object.keys(n).forEach((t=>{i.push((()=>w(this,void 0,void 0,(function*(){const e=n[t],i=yield(0,s.vSU)(e);i&&(o.data[t]=i)}))))})),yield Promise.all(i.map((t=>t()))),o}))}(c).then((t=>{console.log("Ready!"),e(o,t),o.paint(),g(!1)})).catch((()=>g(!1)))}}),u&&(0,o.jsx)("canvas",{className:x.gizmo,ref:t=>{const n=new s.GbF({canvas:t});m.current=n,n.eventTipClick.addListener((({to:t})=>{const n=d.current;console.log("ðŸš€ [tgd] to, context =",t,n),n&&n.animSchedule({duration:.2,easingFunction:s.Wcc,action:(0,s.vRM)(n.camera,{orientation:t})})}));const e=d.current;e&&n.attachContext(e)}}),(0,o.jsxs)("div",{className:B(x.spinner,!p&&x.hide),children:[(0,o.jsx)(a.A,{}),(0,o.jsx)("div",{children:"Loading in progress..."})]})]})}var _=e(9715),T=e(7138),E={};E.styleTagTransform=b(),E.setAttributes=p(),E.insert=h().bind(null,"head"),E.domAPI=A(),E.insertStyleElement=f(),l()(T.A,E);const O=T.A&&T.A.locals?T.A.locals:void 0;function M({className:t,autoFocus:n,onClick:e,children:i}){return(0,o.jsx)("button",{type:"button",autoFocus:n,className:B(t,O.button),onClick:e,children:i})}class N extends s.tbm{constructor(t,n){super(),this.context=t,this.woobling=0,this._x=0,this.angle=0,this.speed=0,this.moveRadius=8,this.logicInteractive=(t,n)=>{const e=this.context.inputs.keyboard,o=this.context.inputs.pointer;n*=1e3;let i=0;e.isDown("ArrowRight")||o.isTouching((({x:t})=>t>0))?(console.log("RIGHT"),this.speed+=n,i=90*-n):e.isDown("ArrowLeft")||o.isTouching((({x:t})=>t<0))?(this.speed-=n,i=90*+n):(this.angle*=.9,this.speed*=0),this.angle=(0,s.O6b)(this.angle+i,-60,60),this.x+=2.5*this.speed*n*this.moveRadius,(this.x===-this.moveRadius&&this.speed<0||this.x===+this.moveRadius&&this.speed>0)&&(this.speed=-this.speed),this.node.transfo.setEulerRotation(0,0,this.angle)},this.name="Saucer",this.painterOpaque=(0,s.TB8)({data:n,context:t,node:"Saucer"}).painter;const e=this;this.node=new s.buV({children:[new s.buV({children:[this.painterOpaque],logic(t){const{orientation:n}=this.transfo;n.reset(),this.transfo.orbitAroundX((.2+e.woobling)*Math.sin(3.7*t)),this.transfo.orbitAroundZ(e.woobling*Math.sin(1.37*t)),this.transfo.orbitAroundY(t)}})]}),this.node.transfo.setPosition(0,0,0),this.mode="still",this.active=!1}set mode(t){const{node:n}=this;n.logic="interactive"===t?this.logicInteractive:void 0}delete(){this.node.delete()}paint(t,n){this.node.paint(t,n)}get x(){return this._x}set x(t){const n=(0,s.O6b)(t,-this.moveRadius,+this.moveRadius);this._x=n,this.node.transfo.setPosition(n,0,0);const[,e,o]=this.context.camera.transfo.position;this.context.camera.transfo.setPosition(5*n/this.moveRadius,e,o)}get y(){return this.context.camera.transfo.position.y}get z(){return this.context.camera.transfo.position.z}}const k=new s.dLJ({uniforms:{uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4",uniMove:"float",uniLight:"float"},attributes:{attShift:"float",POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"},varying:{varNormal:"vec3",varLight:"float"},mainCode:["float SIZE = 100.0;","varNormal = mat3(uniModelViewMatrix) * NORMAL;","vec4 point = vec4(POSITION, 1.0);","point.z -= SIZE * attShift;","point.z += mod(uniMove, SIZE);","varLight = smoothstep(-200.0, 0.0, point.z) * uniLight;","gl_Position = uniProjectionMatrix * uniModelViewMatrix * point;"]}).code,z=new s.NI6({uniforms:{uniHue:"float"},varying:{varNormal:"vec3",varLight:"float"},functions:Object.assign({},(0,s.EPI)()),outputs:{FragColor:"vec4"},mainCode:["vec3 normal = normalize(varNormal);","vec3 color = shiftHue(vec3(0.5) + 0.5 * normal, uniHue);","color *= smoothstep(-1.0, 1.0, normal.z);","FragColor = vec4(color * varLight, 1.0);"]}).code;class S extends s.tbm{constructor(t,n){super(),this.context=t,this.light=0,this.move=0,this.name="Tunnel";const e=new s.a6X(t.gl,{vert:k,frag:z});this.prg=e;const o=new s.I9j({attShift:"float"},{divisor:1});o.set("attShift",new Float32Array([0,1,2,3,4]));const i=new s.I9j({POSITION:"vec3",NORMAL:"vec3",TEXCOORD_0:"vec2"});n.setAttrib(i,"POSITION"),n.setAttrib(i,"NORMAL"),n.setAttrib(i,"TEXCOORD_0");const r=n.getMeshPrimitiveIndices();this.type=(0,s.Lmp)(r),this.count=r.length;const a=new s.ZV_(t.gl,e,[o,i],r);this.vao=a}delete(){this.prg.delete(),this.vao.delete()}paint(t,n){const{context:e,prg:o,vao:i,count:s,type:r,move:a}=this,{gl:c}=e;o.use(),o.uniformMatrix4fv("uniModelViewMatrix",e.camera.matrixModelView),o.uniformMatrix4fv("uniProjectionMatrix",e.camera.matrixProjection),o.uniform1f("uniMove",a),o.uniform1f("uniLight",this.light),o.uniform1f("uniHue",t),i.bind(),c.drawElementsInstanced(c.TRIANGLES,s,r,0,4),i.unbind()}}const R=new s.oao(.8,.6,.1,1);class P extends s.rBx{constructor(t={}){var n;super(),this.light=1,this.uniforms={uniModelViewMatrix:"mat4",uniLight:"float"},this.specularExponent=10,this.specularIntensity=.2;const e=t.color instanceof s.HTX?t.color:new s.oao(null!==(n=t.color)&&void 0!==n?n:R),o=!(e instanceof s.oao);this.texture=o?e:null;const i=new s.hNi(0,0,-1);this.fragmentShaderCode=[`vec3 uniLightDir = vec3(${i.join(", ")});`,`float uniSpecularIntensity = ${this.specularIntensity.toFixed(2)};`,`float uniSpecularExponent = ${this.specularExponent.toFixed(2)};`,"vec3 normal = normalize(varNormal);","float light = 1.0 - dot(normal, uniLightDir);",o?"vec4 color = texture(texDiffuse, varUV);":`vec4 color = vec4(${e.join(", ")});`,"vec3 normal2 = mat3(uniModelViewMatrix) * normal;","float spec = max(0.0, reflect(uniLightDir, normal2).z);","spec = pow(spec, uniSpecularExponent) * uniSpecularIntensity;","color = vec4(","  color.rgb * vec3(light) + vec3(spec),","  1.0",");","float ghost = smoothstep(0.5, 0.0, normal.z) * .3;","color.rgb += vec3(1.0 + normal.x, 1.0 + normal.y, 0.0) * ghost;","return color * vec4(vec3(uniLight), 1.0);"],this.vertexShaderCode=["varNormal = mat3(uniTransfoMatrix) * NORMAL;"],this.varyings={varNormal:"vec3"},o&&(this.vertexShaderCode.push("varUV = TEXCOORD_0;"),this.varyings.varUV="vec2",this.uniforms.texDiffuse="sampler2D")}setUniforms(t){const{texture:n,light:e}=this;n&&n.activate(0,t,"texDiffuse"),t.uniform1f("uniLight",e)}}class j extends s.tbm{constructor(t,n,e=0){super(),this.speed=100,this.time0=0,this._x=0,this.y=0,this._z=0,this.rotX=0,this.rotY=0,this.rotZ=0;const o=new s.dRj(t,{asset:n,material:({color:t})=>new P({color:t})});o.transfo.setPosition(0,0,0),this.painter=o,this.reset(e)}hitTest({x:t,z:n}){return!(Math.abs(n-this._z)>2)&&Math.abs(t-this._x)<2}get x(){return this._x}set x(t){this._x=t}get z(){return this._z}set z(t){this._z=t}reset(t=0){this._x=(0,s.Qc2)(-8,8),this.y=(1-Math.abs(this._x)/8)*(0,s.Qc2)(-3,3),this._z=-200*(1+t),this.rotX=(0,s.Qc2)(-240,240),this.rotY=(0,s.Qc2)(-240,240),this.rotZ=(0,s.Qc2)(-240,240),this.painter.transfo.setScale((0,s.Qc2)(.7,1.1),(0,s.Qc2)(.7,1.1),(0,s.Qc2)(.7,1.1))}delete(){}paint(t,n){const{painter:e,_x:o,y:i,_z:r,rotX:a,rotY:c,rotZ:l,speed:u}=this,{transfo:A}=e,d=(0,s.BAd)(-200,0,r);e.material.light=d,A.setPosition(o,i,r),A.setEulerRotation(a*t,c*t,l*t),e.paint(t,n),this._z+=n*u*1e3,this._z>20&&this.reset()}}class L extends s.EWU{constructor(t,n){super(),this.name="Obstacles",this.obtacles=[new j(t,n),new j(t,n,.5),new j(t,n,.25),new j(t,n,.75)],this.add(...this.obtacles)}set speed(t){for(const n of this.obtacles)n.speed=t}set time0(t){for(const n of this.obtacles)n.time0=t}hitTest({x:t,y:n,z:e}){for(const o of this.obtacles)if(o.hitTest({x:t,y:n,z:e}))return!0;return!1}}class Y extends s.buV{constructor(t,n){var e;const o=n.getNodeByNameOrThrow("Moon"),i=null!==(e=o.mesh)&&void 0!==e?e:0,r=new s.dRj(t,{asset:n,meshIndex:i}),a={};o.translation&&(a.position=new s.hNi(o.translation)),o.rotation&&(a.orientation=new s.HIE(o.rotation)),o.scale&&(a.scale=new s.hNi(o.scale)),super({children:[r],transfo:a,name:"Moon"})}}class W{constructor(t,n){this.moon=new Y(t,n.glb.moon),this.saucer=new N(t,n.glb.saucer),this.tunnel=new S(t,n.glb.tunnel),this.obstacles=new L(t,n.glb.obstacle);const{width:e,height:o}=n.image.imageNegZ,i=(0,s.lu8)(e,o),r=new s.$ff(t,{camera:t.camera,imagePosX:i,imagePosY:i,imagePosZ:i,imageNegX:i,imageNegY:i,imageNegZ:n.image.imageNegZ});this.groupInterior=new s.EWU([this.tunnel,this.obstacles],{name:"Interior"}),this.groupInterior.active=!1,this.groupExterior=new s.EWU([this.moon,r],{name:"Exterior"}),this.groupExterior.active=!1;const a=new s.o57(t,{depth:1,color:[0,0,0,1]}),c=new s.Ipk(t,{depth:s.Eg5.lessOrEqual,cull:s.TfJ.back,children:[this.groupInterior,this.groupExterior,this.saucer]});t.add(a,c),this.step="exterior"}set step(t){this.groupExterior.active="exterior"===t,this.groupInterior.active="interior"===t}}const F=e.p+"img/boom.86b5afa8a23885b87b38.mp3";class V{constructor(){this.actors=null,this.context=null,this.time0=-1,this.time1=-1,this.savedTunnelMove=-1,this.sounds=new s.DCi,this.init=(t,n)=>{const e=new W(t,n);this.actors=e,this.context=t,this.reset(),t.play()},this.stepTransitionFromExteriorToInterior=()=>{const{context:t,actors:n}=this;if(!t||!n)return;const{saucer:e,tunnel:o}=n;e.mode="interactive",n.step="interior",t.animSchedule({duration:.2,action:(0,s.$4L)(e.node.transfo,{scale:e.node.transfo.scale.clone()},{scale:[.5,.5,.5]})}),t.animSchedule({delay:.2,duration:2,easingFunction:s.Wcc,action:t=>{o.light=t}}),this.time0=-1,n.obstacles.time0=this.time0,t.logicClear(),t.logicAdd(this.logicTunnelRun)},this.reset=()=>{const{context:t,actors:n}=this;if(!t||!n)return;const{saucer:e}=n;n.step="exterior",e.active=!0,e.node.transfo.setPosition(0,180,0),t.camera.from(new s.xNY({fovy:(0,s.HPH)(40),near:.01,far:1e3,zoom:2.5421269851440123,transfo:{distance:0,position:[0,300,-300],orientation:[.341026246547699,-.19848087430000305,-.5130870938301086,.7622650861740112],scale:[2.5421268939971924,2.5421268939971924,2.5421268939971924]}}))},this.start=()=>{const{context:t,actors:n}=this;if(!t||!n)return;const{saucer:e}=n;t.animSchedule((0,s.emj)(e.node.transfo,[{duration:3,transfo:{position:[0,100,0]}},{duration:1,transfo:{position:[0,0,0]}}])),t.animSchedule((0,s.emj)(t.camera.transfo,[{duration:3,easingFunction:s.LcY,transfo:{distance:150,orientation:new s.HIE,position:new s.hNi(0,120,0)}},{duration:1,easingFunction:s.Wcc,transfo:{distance:0,position:new s.hNi(0,90,0),orientation:new s.HIE(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)}},{duration:1,easingFunction:s.Wcc,transfo:{distance:20,position:new s.hNi(0,0,0),orientation:new s.HIE(-.5914373993873596,.287754625082016,.3368068337440491,.6737657189369202)},onEnd:this.stepTransitionFromExteriorToInterior},{duration:.6,transfo:{distance:20,orientation:new s.HIE,position:[0,4,0],scale:[1,1,1]}}])),t.animSchedule({duration:2,easingFunction:s.ygX,action(n){t.camera.zoom=(0,s.fTR)(3,1,n)}})},this.logicTunnelRun=(t,n)=>{const{actors:e,context:o}=this;if(!e||!o)return;this.time0<0&&(this.time0=t);const i=70+(t-=this.time0);e.tunnel.move=t*i,e.obstacles.speed=i,0===t&&console.log("ðŸš€ [game] actors.tunnel.move =",e.tunnel.move),e.obstacles.hitTest(e.saucer)&&(this.sounds.play("boom"),o.logicClear(),o.logicAdd(this.logicBoom),this.time1=-1,this.savedTunnelMove=e.tunnel.move)},this.logicBoom=(t,n)=>{const{actors:e,context:o}=this;if(!e||!o)return;this.time1<0&&(this.time1=t),t-=this.time1,e.saucer.woobling=4*Math.cos(t/2);const i=-70*Math.sin(t);e.tunnel.move=this.savedTunnelMove+i*(1+.5*e.saucer.woobling),e.obstacles.speed=i>0?0:2*i,t>=Math.PI&&(o.logicClear(),o.logicAdd(this.logicTunnelRun),this.time0=-1)},this.sounds.add("boom",F)}}const X=e.p+"img/negZ.0605a456c61684cca92e.webp",Z=e.p+"bin/moon.7bbc310fdf7a63bb0e9b.glb",U=e.p+"bin/saucer.972f959b0b5793f88921.glb",D=e.p+"bin/tunnel.e91067c02b7240d699c0.glb",$=e.p+"bin/obstacle-1.a54849a260c0179f5712.glb";var H=e(642),J={};J.styleTagTransform=b(),J.setAttributes=p(),J.insert=h().bind(null,"head"),J.domAPI=A(),J.insertStyleElement=f(),l()(H.A,J);const G=H.A&&H.A.locals?H.A.locals:void 0;function Q(){const t=(0,_.m)(),[n,e]=i.useState(!1),s=function(){const t=i.useRef(null);return t.current||(t.current=new V),t.current}();return(0,o.jsxs)("div",{className:G.play,children:[(0,o.jsx)(y,{gizmo:!1,onReady:(t,n)=>{s.init(t,n)},assets:{image:{imageNegZ:X},glb:{moon:Z,saucer:U,tunnel:D,obstacle:$}}}),!n&&(0,o.jsx)("div",{className:G.startScreen,children:(0,o.jsx)(M,{className:G.startButton,onClick:()=>{s.start(),e(!0)},autoFocus:!0,children:t.start()})})]})}},7138:(t,n,e)=>{e.d(n,{A:()=>a});var o=e(8519),i=e.n(o),s=e(3645),r=e.n(s)()(i());r.push([t.id,'.src-components-Button-Button-module_button_AisLsJ {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.src-components-Button-Button-module_button_AisLsJ::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.src-components-Button-Button-module_button_AisLsJ:focus,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-visible,\nbutton.src-components-Button-Button-module_button_AisLsJ:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n',"",{version:3,sources:["webpack://./src/components/Button/Button.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,wBAAwB;IACxB,mEAAmE;IACnE,WAAW;IACX,cAAc;IACd,oBAAoB;IACpB,gBAAgB;IAChB,0BAA0B;IAC1B,0BAA0B;IAC1B,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,oBAAoB;IACpB,0BAA0B;IAC1B,2BAA2B;AAC/B;;AAEA;;;IAGI,aAAa;IACb,iDAAiD;IACjD,6BAA6B;AACjC",sourcesContent:['.button {\n    position: relative;\n    color: #000e;\n    font: inherit;\n    font-variant: small-caps;\n    background: linear-gradient(to top, #fc0, #f90 20%, #f90 40%, #530);\n    height: 3em;\n    padding: 0 1em;\n    border-radius: 0.5em;\n    overflow: hidden;\n    border: 0.125em solid #000;\n    box-shadow: 0 0 0.5em #ff0;\n    cursor: pointer;\n}\n\n.button::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: "";\n    background: #fff8;\n    pointer-events: none;\n    border-radius: 0 0 50% 50%;\n    transform: translateY(-40%);\n}\n\nbutton.button:focus,\nbutton.button:focus-visible,\nbutton.button:focus-within {\n    outline: none;\n    text-decoration: underline dotted 0.06125em #0008;\n    text-underline-offset: 0.25em;\n}\n'],sourceRoot:""}]),r.locals={button:"src-components-Button-Button-module_button_AisLsJ"};const a=r},9715:(t,n,e)=>{e.d(n,{m:()=>s});var o=e(3095),i=e(4335);function s(){return(0,o.L5)(i.A,{en:()=>e.e(36).then(e.bind(e,3036)),alien:()=>e.e(588).then(e.bind(e,6588))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,