"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[26],{527:(e,t,n)=>{n.d(t,{A:()=>A});var s=n(354),i=n.n(s),o=n(314),r=n.n(o),a=n(417),c=n.n(a),h=new URL(n(191),n.b),l=r()(i()),d=c()(h);l.push([e.id,`.src-app-play-page-module_page_lw93_W {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: transparent\n}\n\n.src-app-play-page-module_hill_Pjw_B3 {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(${d});\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear src-app-play-page-module_anim_REo86w;\n}\n\n@keyframes src-app-play-page-module_anim_REo86w {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: -1920px;\n    }\n}\n\ndiv#sprite-spaceship {\n    position: absolute;\n    z-index: 85;\n}\n\ndiv#sprite-spaceship-main {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv#sprite-spaceship-laser {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\ndiv#score {\n    font-size: 10vh;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n`,"",{version:3,sources:["webpack://./src/app/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB;AACJ;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,SAAS;IACT,WAAW;IACX,cAAc;IACd,yDAA2C;IAC3C,2BAA2B;IAC3B,sBAAsB;IACtB,8BAA8B;IAC9B,kEAAkC;AACtC;;AAEA;IACI;QACI,sBAAsB;IAC1B;IACA;QACI,4BAA4B;IAChC;AACJ;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,UAAU;IACV,YAAY;IACZ,uBAAuB;IACvB,sEAAsE;IACtE,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,YAAY;AAChB",sourcesContent:['.page {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: transparent\n}\n\n.hill {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(../../gfx/hills.webp);\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear anim;\n}\n\n@keyframes anim {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: -1920px;\n    }\n}\n\n:global(div#sprite-spaceship) {\n    position: absolute;\n    z-index: 85;\n}\n\n:global(div#sprite-spaceship-main) {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n:global(div#sprite-spaceship-laser) {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\n:global(div#score) {\n    font-size: 10vh;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n'],sourceRoot:""}]),l.locals={page:"src-app-play-page-module_page_lw93_W",hill:"src-app-play-page-module_hill_Pjw_B3",anim:"src-app-play-page-module_anim_REo86w"};const A=l},263:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(354),i=n.n(s),o=n(314),r=n.n(o)()(i());r.push([e.id,".src-components-LandscapeView-LandscapeView-module_parent_vK28h0,\n.src-components-LandscapeView-LandscapeView-module_child_wetol2 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.src-components-LandscapeView-LandscapeView-module_parent_vK28h0 {\n    transform-origin: top left;\n}\n","",{version:3,sources:["webpack://./src/components/LandscapeView/LandscapeView.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:[".parent,\n.child {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.parent {\n    transform-origin: top left;\n}\n"],sourceRoot:""}]),r.locals={parent:"src-components-LandscapeView-LandscapeView-module_parent_vK28h0",child:"src-components-LandscapeView-LandscapeView-module_child_wetol2"};const a=r},315:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(354),i=n.n(s),o=n(314),r=n.n(o)()(i());r.push([e.id,'.src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt,\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt {\n    width: 100%;\n    border: 1vh solid #0137;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n',"",{version:3,sources:["webpack://./src/components/ViewEnergyBar/ViewEnergyBar.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,oBAAoB;IACpB,kBAAkB;IAClB,qBAAqB;IACrB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;;IAEI,WAAW;IACX,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,SAAS;IACT,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,UAAU;IACV,qDAAqD;IACrD,kCAAkC;AACtC",sourcesContent:['.viewEnergyBar {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.border,\n.level {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.border {\n    width: 100%;\n    border: 1vh solid #0137;\n}\n\n.level {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n'],sourceRoot:""}]),r.locals={viewEnergyBar:"src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu",border:"src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt",level:"src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6"};const a=r},13:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(354),i=n.n(s),o=n(314),r=n.n(o)()(i());r.push([e.id,'.src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4 {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n',"",{version:3,sources:["webpack://./src/components/ViewSprite/ViewSprite.module.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,kBAAkB;IAClB,mCAAmC;IACnC,0BAA0B;IAC1B,oBAAoB;IACpB,8BAA8B;AAClC",sourcesContent:['.sprite {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n'],sourceRoot:""}]),r.locals={sprite:"src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4"};const a=r},343:(e,t,n)=>{n.r(t),n.d(t,{default:()=>ee});var s=n(848),i=n(540);class o{constructor(){this.intentRight=0,this.intentLeft=0,this.intentSubduction=0,this.handlePointerDown=e=>{e.preventDefault(),e.stopPropagation(),this.intentSubduction=1},this.handlePointerUp=()=>{this.intentSubduction=0},this.handleContextMenu=e=>{e.preventDefault(),e.stopPropagation()},this.handleKeyDown=e=>{const t=Date.now();switch(e.key){case" ":this.intentSubduction=t;break;case"ArrowRight":this.intentRight=t;break;case"ArrowLeft":this.intentLeft=t}},this.handleKeyUp=e=>{switch(e.key){case" ":this.intentSubduction=0;break;case"ArrowRight":this.intentRight=0;break;case"ArrowLeft":this.intentLeft=0}}}attach(){document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),document.body.addEventListener("pointerdown",this.handlePointerDown),document.body.addEventListener("pointerup",this.handlePointerUp),document.body.addEventListener("contextmenu",this.handleContextMenu)}detach(){document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),document.body.removeEventListener("pointerdown",this.handlePointerDown),document.body.removeEventListener("pointerup",this.handlePointerUp),document.body.removeEventListener("contextmenu",this.handleContextMenu)}wantsToGoRight(){return!1}wantsToGoLeft(){return!1}wantsToSubdue(){return this.intentSubduction>0}}class r{constructor(e=1920,t=1080){this.logicalWidth=e,this.logicalHeight=t,this.element=null,this.transform={x:0,y:0,scale:1},this.handleResize=()=>{const{element:e}=this;if(!e)return;const t=e.getBoundingClientRect(),n=Math.max(t.width,t.height),s=Math.min(t.width,t.height),i=n/this.logicalWidth,o=s/this.logicalHeight,r=Math.min(i,o);this.transform.x=(n-this.logicalWidth*r)/2,this.transform.y=(s-this.logicalHeight*r)/2,this.transform.scale=r},this.observer=new ResizeObserver(this.handleResize)}x(e){const{scale:t,x:n}=this.transform;return e*t+n}y(e){const{scale:t,y:n}=this.transform;return e*t+n}width(e){return e*this.transform.scale}hight(e){return e*this.transform.scale}attach(e){this.detach(),this.element=e,this.observer.observe(e),this.handleResize()}detach(){this.element&&(this.observer.unobserve(this.element),this.element=null)}}var a=Object.defineProperty,c=Object.getOwnPropertySymbols,h=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,A=(e,t)=>{for(var n in t||(t={}))h.call(t,n)&&d(e,n,t[n]);if(c)for(var n of c(t))l.call(t,n)&&d(e,n,t[n]);return e};class u{constructor(e,t){this.coords=e,this.elementId=t,this.status={x:0,y:0,width:128,height:128,rotation:0,scaleX:1,scaleY:1}}get x(){return this.status.x}get y(){return this.status.y}get width(){return this.status.width}get height(){return this.status.height}get rotation(){return this.status.rotation}update(e){this.status=A(A({},this.status),e);const{element:t,coords:n,status:s}=this;if(!t)return!1;const i=n.x(s.x),o=n.y(s.y),r=n.width(s.width)*s.scaleX,a=n.width(s.height)*s.scaleY;return t.style.left=i-r/2+"px",t.style.top=o-a/2+"px",t.style.width=`${r}px`,t.style.height=`${a}px`,t.style.transform=`rotate(${s.rotation}deg)`,!0}get element(){const e=document.getElementById(this.elementId);return e||console.error("No element with this id:",this.elementId),e}}function p(e,t,n){return e<t?t:e>n?n:e}const m=1e4;class g{constructor(){this._value=m}get value(){return this._value}set value(e){const t=p(e,0,m);if(t===this._value)return;this._value=t;const n=document.getElementById("energy-level");if(!n)return;const s=100*t/m;n.style.width=`${s}%`}reset(){this._value=0,this.value=m}add(e){this.value+=e}sub(e){this.value-=e}}var b=n(829);class w{constructor(e){this.time0=0;const t=new u(e,"sprite-cow");this.sprite=t,t.update({x:960,y:720,width:256,height:128})}get x(){return this.sprite.x}get y(){return this.sprite.y}reset(e){this.time0=e,this.sprite.update({scaleX:1,scaleY:1})}update(e,t){e-=this.time0;const{sprite:n}=this,s=e%4e3/4e3*3840-960,i=.005*e,o=720-2*(n.height*Math.abs(Math.sin(i))-n.height),r=30*Math.cos(2*i);n.update({x:s,y:o,rotation:r})}subdue(e,t,n,s){const i=1-.9*n;this.sprite.update({x:e,y:t,rotation:this.sprite.rotation+.5*s,scaleX:i,scaleY:i})}hit(e,t,n){const{sprite:s}=this,i=s.x,o=s.y,r=n*Math.PI/180,a=-Math.sin(r),c=Math.cos(r),h=i-e,l=o-t;return Math.abs(h*c-l*a)<.2*s.height}}var f=n(992),v=n(470);class y{constructor(){this.intention=new o,this.mode="run",this.pauseAccumulator=0,this.energy=new g,this.time=0,this.laser=0,this.dieTime=0,this.dieY=0,this.eatX0=0,this.eatY0=0,this.eatX1=0,this.eatY1=0,this.eatTime=0,this.animationFrame=0,this._score=0,this.attach=e=>{console.log("ATTACH"),this.intention.attach(),this.coords.attach(e),this.scheduleNextFrame(),this.energy.reset(),this.score=0},this.nextFrame=e=>{this.scheduleNextFrame();let t=0;switch(this.time>0&&(t=e-this.time),this.time=e,e-=this.pauseAccumulator,this.mode){case"run":this.doRun(e,t);break;case"die":this.doDie(e,t);break;case"eat":this.doEat(e,t)}};const e=new r;this.cow=new w(e),this.coords=e,this.spaceship=new u(e,"sprite-spaceship"),this.spaceship.update({x:960,y:360,width:512,height:256})}static use(){const e=i.useRef(null);return e.current||(e.current=new y),i.useEffect((()=>{const t=e.current;if(t)return console.log("MOUNT"),()=>{console.log("UNMOUNT"),t.detach(),e.current=null}}),[]),e.current}get score(){return this._score}set score(e){this._score=e;const t=document.getElementById("score"),n=e>1?"s":"";t&&(t.textContent=`${(0,f.U)(v.W)}${n} ${(0,f.U)(v.l)}${n} : ${e}`)}detach(){console.log("DETACH"),this.intention.detach(),this.coords.detach(),window.cancelAnimationFrame(this.animationFrame),this.animationFrame=0}setLaserOpacity(e){if(e===this.laser)return;this.laser=e;const t=document.getElementById("sprite-spaceship-laser");t&&(t.style.opacity=`${e}`)}scheduleNextFrame(){window.cancelAnimationFrame(this.animationFrame),this.animationFrame=window.requestAnimationFrame(this.nextFrame)}doRun(e,t){const n=40*Math.sin(.002*e),{intention:s,spaceship:i,cow:o}=this;let r=i.x;s.wantsToGoRight()&&(r+=3*t),s.wantsToGoLeft()&&(r-=3*t),r=960+250*(Math.cos(e*(.001633+2e-9*e))+Math.sin(.002904*e)),this.setLaserOpacity(s.wantsToSubdue()?1:0),i.update({x:p(r,300,1620),rotation:n});let a=.4*t;if((s.wantsToGoLeft()||s.wantsToGoRight())&&(a*=2),s.wantsToSubdue()&&(a*=10,o.hit(i.x,i.y,i.rotation)))return this.mode="eat",this.eatX0=o.x,this.eatY0=o.y,this.eatX1=i.x,this.eatY1=i.y,this.eatTime=e,void this.score++;this.energy.sub(a),this.energy.value<=0&&(this.mode="die",this.dieTime=e,this.dieY=i.y,this.setLaserOpacity(0)),o.update(e,t)}doDie(e,t){const{spaceship:n}=this,s=n.rotation+.5*t,i=e-this.dieTime-200,o=this.dieY+200*(i*i-4e4)/4e4;n.update({rotation:s,y:o}),e-this.dieTime>1e3&&(window.sessionStorage.setItem("score",`${this.score}`),(0,b.gQ)("/dead"),this.detach()),this.cow.update(e,t)}doEat(e,t){const n=Math.min(1,(e-this.eatTime)/1e3),s=(this.eatX1-this.eatX0)*n+this.eatX0,i=(this.eatY1-this.eatY0)*n+this.eatY0;this.cow.subdue(s,i,n,t),1===n&&(this.mode="run",this.pauseAccumulator+=e-this.eatTime,this.cow.reset(e),this.energy.add(2e3))}}var B=n(72),C=n.n(B),I=n(825),x=n.n(I),k=n(659),E=n.n(k),_=n(56),V=n.n(_),L=n(159),T=n.n(L),M=n(113),R=n.n(M),Y=n(263),S={};S.styleTagTransform=R(),S.setAttributes=V(),S.insert=E().bind(null,"head"),S.domAPI=x(),S.insertStyleElement=T(),C()(Y.A,S);const z=Y.A&&Y.A.locals?Y.A.locals:void 0;function W({className:e,onMount:t,children:n}){const o=i.useRef(null),r=i.useRef(null);return function(e,t){const n=i.useRef(null);n.current||(n.current=new ResizeObserver((n=>{const s=e.current,i=t.current;if(s&&i)for(const e of n){const t=e.target,{width:n,height:i}=t.getBoundingClientRect();i>n?(console.log("PORTRAIT"),s.style.width=`${i}px`,s.style.height=`${n}px`,s.style.transform=`translateX(${n}px) rotate(90deg)`):(console.log("LANDSCAPE"),s.style.width=`${n}px`,s.style.height=`${i}px`,s.style.transform="none"),console.log("🚀 [LandscapeView] width, height = ",n,i,[...s.classList])}}))),i.useEffect((()=>{const t=e.current;if(!t)return;const s=n.current;if(!s)return;const i=t.parentElement;return i?(s.observe(i),()=>s.unobserve(i)):void 0}),[e.current])}(o,r),i.useEffect((()=>{const e=o.current;e&&t(e)}),[o.current]),(0,s.jsx)("div",{className:U(e,z.parent),ref:o,children:(0,s.jsx)("div",{className:z.child,ref:r,children:n})})}function U(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var j=n(13),P={};P.styleTagTransform=R(),P.setAttributes=V(),P.insert=E().bind(null,"head"),P.domAPI=x(),P.insertStyleElement=T(),C()(j.A,P);const N=j.A&&j.A.locals?j.A.locals:void 0;function O({className:e,id:t,url:n,zIndex:i}){return(0,s.jsx)("div",{className:X(e,N.sprite),id:t,style:{"--custom-url":`url(${n})`,"--custom-z-index":i}})}function X(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var $=n(315),D={};D.styleTagTransform=R(),D.setAttributes=V(),D.insert=E().bind(null,"head"),D.domAPI=x(),D.insertStyleElement=T(),C()($.A,D);const F=$.A&&$.A.locals?$.A.locals:void 0;function K({className:e}){return(0,s.jsxs)("div",{className:q(e,F.viewEnergyBar),children:[(0,s.jsx)("div",{className:F.level,id:"energy-level"}),(0,s.jsx)("div",{className:F.border})]})}function q(...e){return e.filter((e=>"string"==typeof e)).join(" ")}const G=n.p+"img/spaceship.28cb4d79552de7d691e1.webp",Z=n.p+"img/cow.70ddbae0f000fc938d00.webp";var H=n(527),Q={};Q.styleTagTransform=R(),Q.setAttributes=V(),Q.insert=E().bind(null,"head"),Q.domAPI=x(),Q.insertStyleElement=T(),C()(H.A,Q);const J=H.A&&H.A.locals?H.A.locals:void 0;function ee(){i.useRef(null);const e=y.use();return(0,s.jsx)(W,{onMount:e.attach,children:(0,s.jsxs)("div",{className:J.page,children:[[0,1,2,3].map((e=>(0,s.jsx)("div",{className:J.hill,style:{bottom:10*Math.sqrt(e)+"vmin",zIndex:""+10*(9-e),transform:`scale(${1-.2*e})`,animationDuration:3+5*e+"s",filter:`brightness(${.3*e+.1})`}}))),(0,s.jsxs)("div",{id:"sprite-spaceship",children:[(0,s.jsx)("div",{id:"sprite-spaceship-laser"}),(0,s.jsx)(O,{id:"sprite-spaceship-main",url:G,zIndex:81})]}),(0,s.jsx)(O,{id:"sprite-cow",url:Z,zIndex:80}),(0,s.jsx)(K,{}),(0,s.jsx)("div",{id:"score"})]})})}},470:(e,t,n)=>{n.d(t,{W:()=>s,l:()=>i});const s=["vache","vache","vache","vache","bestiole","laitière","meuh-meuh"],i=["absorbée","attrapée","avalée","capturée","dépecée","désintégrée","digérée","emprisonnée","engloutie","liquidée","mangée","pulvérisée"]},992:(e,t,n)=>{function s(e){return Array.isArray(e)?e[Math.floor(Math.random()*e.length)]:e}n.d(t,{U:()=>s})},191:(e,t,n)=>{e.exports=n.p+"img/hills.4f7d1cb3881dc5a9404a.webp"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,