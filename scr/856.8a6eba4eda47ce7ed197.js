"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[856],{7987:(e,t,n)=>{n.d(t,{A:()=>A});var s=n(1354),i=n.n(s),o=n(6314),r=n.n(o),a=n(4417),c=n.n(a),h=new URL(n(5191),n.b),l=r()(i()),d=c()(h);l.push([e.id,`.src-app-01-play-page-module_page_dkZp9d {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: transparent;\n}\n\n.src-app-01-play-page-module_hill_wIVKEM {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(${d});\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear src-app-01-play-page-module_anim_dAYel7;\n}\n\n@keyframes src-app-01-play-page-module_anim_dAYel7 {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: 1920px;\n    }\n}\n\ndiv#sprite-spaceship {\n    position: absolute;\n    z-index: 85;\n}\n\ndiv#sprite-spaceship-main {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\ndiv#sprite-spaceship-laser {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\ndiv#score {\n    font-size: 10vmin;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n`,"",{version:3,sources:["webpack://./src/app/01/play/page.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,6BAA6B;AACjC;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,SAAS;IACT,WAAW;IACX,cAAc;IACd,yDAAuC;IACvC,2BAA2B;IAC3B,sBAAsB;IACtB,8BAA8B;IAC9B,qEAAkC;AACtC;;AAEA;IACI;QACI,sBAAsB;IAC1B;IACA;QACI,2BAA2B;IAC/B;AACJ;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,UAAU;IACV,YAAY;IACZ,uBAAuB;IACvB,sEAAsE;IACtE,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,cAAc;IACd,YAAY;AAChB",sourcesContent:['.page {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: transparent;\n}\n\n.hill {\n    position: absolute;\n    left: -1920px;\n    right: -1920px;\n    bottom: 0;\n    width: auto;\n    height: 30vmin;\n    background-image: url(@/gfx/hills.webp);\n    background-repeat: repeat-x;\n    background-position: 0;\n    background-size: 1920px 30vmin;\n    animation: 3s infinite linear anim;\n}\n\n@keyframes anim {\n    from {\n        background-position: 0;\n    }\n    to {\n        background-position: 1920px;\n    }\n}\n\n:global(div#sprite-spaceship) {\n    position: absolute;\n    z-index: 85;\n}\n\n:global(div#sprite-spaceship-main) {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n:global(div#sprite-spaceship-laser) {\n    content: "";\n    position: absolute;\n    left: 35%;\n    top: 50%;\n    width: 30%;\n    height: 500%;\n    background-color: #fe93;\n    background-image: linear-gradient(to left, #fe90, #fe93, #fe93, #fe90);\n    transition: opaity 0.2s;\n    opacity: 0;\n}\n\n:global(div#score) {\n    font-size: 10vmin;\n    z-index: 101;\n    position: absolute;\n    right: 0.5em;\n    bottom: 0.25em;\n    color: #fe9b;\n}\n'],sourceRoot:""}]),l.locals={page:"src-app-01-play-page-module_page_dkZp9d",hill:"src-app-01-play-page-module_hill_wIVKEM",anim:"src-app-01-play-page-module_anim_dAYel7"};const A=l},4263:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(1354),i=n.n(s),o=n(6314),r=n.n(o)()(i());r.push([e.id,".src-components-LandscapeView-LandscapeView-module_parent_vK28h0,\n.src-components-LandscapeView-LandscapeView-module_child_wetol2 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.src-components-LandscapeView-LandscapeView-module_parent_vK28h0 {\n    transform-origin: top left;\n}\n","",{version:3,sources:["webpack://./src/components/LandscapeView/LandscapeView.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:[".parent,\n.child {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.parent {\n    transform-origin: top left;\n}\n"],sourceRoot:""}]),r.locals={parent:"src-components-LandscapeView-LandscapeView-module_parent_vK28h0",child:"src-components-LandscapeView-LandscapeView-module_child_wetol2"};const a=r},315:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(1354),i=n.n(s),o=n(6314),r=n.n(o)()(i());r.push([e.id,'.src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt,\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt {\n    width: 100%;\n    border: 1vmin solid #0137;\n}\n\n.src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6 {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n',"",{version:3,sources:["webpack://./src/components/ViewEnergyBar/ViewEnergyBar.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,oBAAoB;IACpB,kBAAkB;IAClB,qBAAqB;IACrB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;;IAEI,WAAW;IACX,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,SAAS;IACT,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,UAAU;IACV,qDAAqD;IACrD,kCAAkC;AACtC",sourcesContent:['.viewEnergyBar {\n    --margin: 5vh;\n    position: absolute;\n    left: var(--margin);\n    right: var(--margin);\n    top: var(--margin);\n    height: var(--margin);\n    border-radius: 99vmax;\n    background: #0005;\n}\n\n.border,\n.level {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    border-radius: 99vmax;\n    box-sizing: border-box;\n}\n\n.border {\n    width: 100%;\n    border: 1vmin solid #0137;\n}\n\n.level {\n    width: 30%;\n    background: linear-gradient(to top, #f90, #fff, #f90);\n    box-shadow: 0 0 var(--margin) #f90;\n}\n'],sourceRoot:""}]),r.locals={viewEnergyBar:"src-components-ViewEnergyBar-ViewEnergyBar-module_viewEnergyBar_MUsliu",border:"src-components-ViewEnergyBar-ViewEnergyBar-module_border_z2pcbt",level:"src-components-ViewEnergyBar-ViewEnergyBar-module_level_Kop0m6"};const a=r},7013:(e,t,n)=>{n.d(t,{A:()=>a});var s=n(1354),i=n.n(s),o=n(6314),r=n.n(o)()(i());r.push([e.id,'.src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4 {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n',"",{version:3,sources:["webpack://./src/components/ViewSprite/ViewSprite.module.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,kBAAkB;IAClB,mCAAmC;IACnC,0BAA0B;IAC1B,oBAAoB;IACpB,8BAA8B;AAClC",sourcesContent:['.sprite {\n    content: "";\n    position: absolute;\n    background-image: var(--custom-url);\n    background-size: 100% 100%;\n    pointer-events: none;\n    z-index: var(--custom-z-index);\n}\n'],sourceRoot:""}]),r.locals={sprite:"src-components-ViewSprite-ViewSprite-module_sprite_UYlWa4"};const a=r},475:(e,t,n)=>{n.r(t),n.d(t,{default:()=>ie});var s=n(4848),i=n(6540);class o{constructor(){this.intentRight=0,this.intentLeft=0,this.intentSubduction=0,this.handlePointerDown=e=>{e.preventDefault(),e.stopPropagation(),this.intentSubduction=1},this.handlePointerUp=()=>{this.intentSubduction=0},this.handleContextMenu=e=>{e.preventDefault(),e.stopPropagation()},this.handleKeyDown=e=>{const t=Date.now();switch(e.key){case" ":this.intentSubduction=t;break;case"ArrowRight":this.intentRight=t;break;case"ArrowLeft":this.intentLeft=t}},this.handleKeyUp=e=>{switch(e.key){case" ":this.intentSubduction=0;break;case"ArrowRight":this.intentRight=0;break;case"ArrowLeft":this.intentLeft=0}}}attach(){document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),document.body.addEventListener("pointerdown",this.handlePointerDown),document.body.addEventListener("pointerup",this.handlePointerUp),document.body.addEventListener("contextmenu",this.handleContextMenu)}detach(){document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),document.body.removeEventListener("pointerdown",this.handlePointerDown),document.body.removeEventListener("pointerup",this.handlePointerUp),document.body.removeEventListener("contextmenu",this.handleContextMenu)}wantsToGoRight(){return!1}wantsToGoLeft(){return!1}wantsToSubdue(){return this.intentSubduction>0}}class r{constructor(e=1920,t=1080){this.logicalWidth=e,this.logicalHeight=t,this.element=null,this.transform={x:0,y:0,scale:1},this.handleResize=()=>{const{element:e}=this;if(!e)return;const t=e.getBoundingClientRect(),n=Math.max(t.width,t.height),s=Math.min(t.width,t.height),i=n/this.logicalWidth,o=s/this.logicalHeight,r=Math.min(i,o);this.transform.x=(n-this.logicalWidth*r)/2,this.transform.y=(s-this.logicalHeight*r)/2,this.transform.scale=r},this.observer=new ResizeObserver(this.handleResize)}x(e){const{scale:t,x:n}=this.transform;return e*t+n}y(e){const{scale:t,y:n}=this.transform;return e*t+n}width(e){return e*this.transform.scale}hight(e){return e*this.transform.scale}attach(e){this.detach(),this.element=e,this.observer.observe(e),this.handleResize()}detach(){this.element&&(this.observer.unobserve(this.element),this.element=null)}}class a{constructor(e,t){this.coords=e,this.elementId=t,this.status={x:0,y:0,width:128,height:128,rotation:0,scaleX:1,scaleY:1}}get x(){return this.status.x}get y(){return this.status.y}get width(){return this.status.width}get height(){return this.status.height}get rotation(){return this.status.rotation}update(e){this.status=Object.assign(Object.assign({},this.status),e);const{element:t,coords:n,status:s}=this;if(!t)return!1;const i=n.x(s.x),o=n.y(s.y),r=n.width(s.width)*s.scaleX,a=n.width(s.height)*s.scaleY;return t.style.left=i-r/2+"px",t.style.top=o-a/2+"px",t.style.width=`${r}px`,t.style.height=`${a}px`,t.style.transform=`rotate(${s.rotation}deg)`,!0}get element(){const e=document.getElementById(this.elementId);return e||console.error("No element with this id:",this.elementId),e}}function c(e,t,n){return e<t?t:e>n?n:e}const h=1e4;class l{constructor(){this._value=h}get value(){return this._value}set value(e){const t=c(e,0,h);if(t===this._value)return;this._value=t;const n=document.getElementById("energy-level");if(!n)return;const s=100*t/h;n.style.width=`${s}%`}reset(){this._value=0,this.value=h}add(e){this.value+=e}sub(e){this.value-=e}}var d=n(9419);class A{constructor(e){this.time0=0;const t=new a(e,"sprite-cow");this.sprite=t,t.update({x:-960,y:720,width:256,height:128})}get x(){return this.sprite.x}get y(){return this.sprite.y}reset(e){this.time0=e,this.sprite.update({scaleX:1,scaleY:1})}process(e,t){e-=this.time0;const{sprite:n}=this,s=e%4e3/4e3*3840-1920,i=.005*e,o=720-2*(n.height*Math.abs(Math.sin(i))-n.height),r=30*Math.cos(2*i);n.update({x:s,y:o,rotation:r})}subdue(e,t,n,s){const i=1-.9*n;this.sprite.update({x:e,y:t,rotation:this.sprite.rotation+.5*s,scaleX:i,scaleY:i})}hit(e,t,n){const{sprite:s}=this,i=s.x,o=s.y,r=n*Math.PI/180,a=-Math.sin(r),c=Math.cos(r),h=i-e,l=o-t;return Math.abs(h*c-l*a)<.2*s.height}}var u=n(866),p=n(2640);const m=n.p+"img/spaceship-fall.aaad7588504a9d2f8557.mp3",g=n.p+"img/cow-1.a3679cb45c6904b9f0fc.mp3",w=n.p+"img/cow-2.ec72ce85a03164101f51.mp3",b=n.p+"img/cow-3.50a04254a4fd3bc5db54.mp3",f=n.p+"img/cow-4.3a304a06d2bf4a7079f0.mp3",v=n.p+"img/cow-5.848fe76f5244d0c002c8.mp3",y=n.p+"img/cow-6.9c48651c9f478b7afc69.mp3",B=n.p+"img/cow-7.139c9688c86137c608a5.mp3",C=n.p+"img/cow-8.0a8f063cde2eaca75620.mp3",I=n.p+"img/ray.3270b1fe94b22d0577fa.mp3";class x{constructor(){this.spaceshipFall=k(m),this.ray=k(I),this.cows=[k(g),k(w),k(b),k(f),k(v),k(y),k(B),k(C)]}get cow(){return(0,u.U)(this.cows)}}function k(e){return new E(e)}class E{constructor(e){this.audio=new Audio(e)}get currentTime(){return this.audio.currentTime}set currentTime(e){this.audio.currentTime=e}play(){try{this.audio.play()}catch(e){}}pause(){try{this.audio.pause()}catch(e){}}}class _{constructor(e,t){this.intention=e,this.sound=t,this.rayActive=!1}process(){const{ray:e}=this.sound,t=this.intention.wantsToSubdue();t&&!this.rayActive?(this.rayActive=!0,e.currentTime=0,e.play()):!t&&this.rayActive&&(this.rayActive=!1,e.pause())}stop(){this.sound.ray.pause()}}class V{static use(){const e=i.useRef(null);return e.current||(e.current=new V),i.useEffect((()=>{const t=e.current;if(t)return console.log("MOUNT"),()=>{console.log("UNMOUNT"),t.detach(),e.current=null}}),[]),e.current}constructor(){this.sound=new x,this.intention=new o,this.mode="run",this.pauseAccumulator=0,this.energy=new l,this.time=0,this.laser=0,this.dieTime=0,this.dieY=0,this.eatX0=0,this.eatY0=0,this.eatX1=0,this.eatY1=0,this.eatTime=0,this.animationFrame=0,this._score=0,this.attach=e=>{console.log("ATTACH"),this.intention.attach(),this.coords.attach(e),this.scheduleNextFrame(),this.energy.reset(),this.score=0},this.nextFrame=e=>{this.scheduleNextFrame();let t=0;switch(this.time>0&&(t=e-this.time),this.time=e,e-=this.pauseAccumulator,this.mode){case"run":this.doRun(e,t);break;case"die":this.doDie(e,t);break;case"eat":this.doEat(e,t)}};const e=new r;this.cow=new A(e),this.coords=e,this.spaceship=new a(e,"sprite-spaceship"),this.spaceship.update({x:960,y:360,width:512,height:256}),this.ray=new _(this.intention,this.sound)}get score(){return this._score}set score(e){this._score=e;const t=document.getElementById("score"),n=e>1?"s":"";t&&(t.textContent=`${(0,u.U)(p.W)}${n} ${(0,u.U)(p.l)}${n} : ${e}`)}detach(){console.log("DETACH"),this.intention.detach(),this.coords.detach(),window.cancelAnimationFrame(this.animationFrame),this.animationFrame=0}setLaserOpacity(e){if(e===this.laser)return;this.laser=e;const t=document.getElementById("sprite-spaceship-laser");t&&(t.style.opacity=`${e}`)}scheduleNextFrame(){window.cancelAnimationFrame(this.animationFrame),this.animationFrame=window.requestAnimationFrame(this.nextFrame)}doRun(e,t){const{intention:n,spaceship:s,cow:i}=this;i.process(e,t),this.ray.process();const o=40*Math.sin(.002*e);let r=s.x;n.wantsToGoRight()&&(r+=3*t),n.wantsToGoLeft()&&(r-=3*t),r=960+250*(Math.cos(e*(.001633+2e-9*e))+Math.sin(.002904*e)),this.setLaserOpacity(n.wantsToSubdue()?1:0),s.update({x:c(r,300,1620),rotation:o});let a=.4*t;if((n.wantsToGoLeft()||n.wantsToGoRight())&&(a*=2),n.wantsToSubdue()&&(a*=10,i.hit(s.x,s.y,s.rotation)))return this.sound.cow.play(),this.mode="eat",this.eatX0=i.x,this.eatY0=i.y,this.eatX1=s.x,this.eatY1=s.y,this.eatTime=e,void this.score++;this.energy.sub(a),this.energy.value<=0&&(this.sound.spaceshipFall.play(),this.mode="die",this.dieTime=e,this.dieY=s.y,this.setLaserOpacity(0),this.ray.stop())}doDie(e,t){const{spaceship:n}=this,s=n.rotation+.5*t,i=e-this.dieTime-200,o=this.dieY+200*(i*i-4e4)/4e4;n.update({rotation:s,y:o}),e-this.dieTime>1e3&&(window.sessionStorage.setItem("score",`${this.score}`),(0,d.gQ)("/01/dead"),this.detach()),this.cow.process(e,t)}doEat(e,t){const n=Math.min(1,(e-this.eatTime)/1e3),s=(this.eatX1-this.eatX0)*n+this.eatX0,i=(this.eatY1-this.eatY0)*n+this.eatY0;this.cow.subdue(s,i,n,t),1===n&&(this.mode="run",this.pauseAccumulator+=e-this.eatTime,this.cow.reset(e),this.energy.add(2e3))}}var T=n(7067),M=n(5072),Y=n.n(M),L=n(7825),z=n.n(L),S=n(7659),R=n.n(S),U=n(5056),W=n.n(U),j=n(540),N=n.n(j),X=n(1113),$=n.n(X),D=n(7013),O={};O.styleTagTransform=$(),O.setAttributes=W(),O.insert=R().bind(null,"head"),O.domAPI=z(),O.insertStyleElement=N(),Y()(D.A,O);const P=D.A&&D.A.locals?D.A.locals:void 0;function F({className:e,id:t,url:n,zIndex:i}){return(0,s.jsx)("div",{className:K(e,P.sprite),id:t,style:{"--custom-url":`url(${n})`,"--custom-z-index":i}})}function K(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var q=n(315),Z={};Z.styleTagTransform=$(),Z.setAttributes=W(),Z.insert=R().bind(null,"head"),Z.domAPI=z(),Z.insertStyleElement=N(),Y()(q.A,Z);const G=q.A&&q.A.locals?q.A.locals:void 0;function H({className:e}){return(0,s.jsxs)("div",{className:Q(e,G.viewEnergyBar),children:[(0,s.jsx)("div",{className:G.level,id:"energy-level"}),(0,s.jsx)("div",{className:G.border})]})}function Q(...e){return e.filter((e=>"string"==typeof e)).join(" ")}const J=n.p+"img/spaceship.f2c56650c24a3b6bad9c.webp",ee=n.p+"img/cow.889b9efd47b809848618.webp";var te=n(7987),ne={};ne.styleTagTransform=$(),ne.setAttributes=W(),ne.insert=R().bind(null,"head"),ne.domAPI=z(),ne.insertStyleElement=N(),Y()(te.A,ne);const se=te.A&&te.A.locals?te.A.locals:void 0;function ie(){const e=V.use();return(0,s.jsx)(T.A,{onMount:e.attach,children:(0,s.jsxs)("div",{className:se.page,children:[[0,1,2,3].map((e=>{const t=1-.2*e;return(0,s.jsx)("div",{className:se.hill,style:{bottom:10*Math.sqrt(e)+"vmin",zIndex:""+10*(9-e),transform:`scale(${t})`,animationDuration:3+5*e+"s",filter:`brightness(${.3*e+.2})`}})})),(0,s.jsxs)("div",{id:"sprite-spaceship",children:[(0,s.jsx)("div",{id:"sprite-spaceship-laser"}),(0,s.jsx)(F,{id:"sprite-spaceship-main",url:J,zIndex:81})]}),(0,s.jsx)(F,{id:"sprite-cow",url:ee,zIndex:80}),(0,s.jsx)(H,{}),(0,s.jsx)("div",{id:"score"})]})})}},7067:(e,t,n)=>{n.d(t,{A:()=>v});var s=n(4848),i=n(6540),o=n(5072),r=n.n(o),a=n(7825),c=n.n(a),h=n(7659),l=n.n(h),d=n(5056),A=n.n(d),u=n(540),p=n.n(u),m=n(1113),g=n.n(m),w=n(4263),b={};b.styleTagTransform=g(),b.setAttributes=A(),b.insert=l().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=p(),r()(w.A,b);const f=w.A&&w.A.locals?w.A.locals:void 0;function v({className:e,onMount:t,children:n}){const o=i.useRef(null),r=i.useRef(null);return function(e,t){const n=i.useRef(null);n.current||(n.current=new ResizeObserver((n=>{const s=e.current,i=t.current;if(s&&i)for(const e of n){const t=e.target,{width:n,height:i}=t.getBoundingClientRect();i>n?(s.style.width=`${i}px`,s.style.height=`${n}px`,s.style.transform=`translateX(${n}px) rotate(90deg)`):(s.style.width=`${n}px`,s.style.height=`${i}px`,s.style.transform="none")}}))),i.useEffect((()=>{const t=e.current;if(!t)return;const s=n.current;if(!s)return;const i=t.parentElement;return i?(s.observe(i),()=>s.unobserve(i)):void 0}),[e.current])}(o,r),i.useEffect((()=>{const e=o.current;e&&(null==t||t(e))}),[o.current]),(0,s.jsx)("div",{className:y(e,f.parent),ref:o,children:(0,s.jsx)("div",{className:f.child,ref:r,children:n})})}function y(...e){return e.filter((e=>"string"==typeof e)).join(" ")}},2640:(e,t,n)=>{n.d(t,{W:()=>s,l:()=>i});const s=["vache","vache","vache","vache","bestiole","laitière","meuh-meuh"],i=["absorbée","attrapée","avalée","capturée","dépecée","désintégrée","digérée","emprisonnée","engloutie","liquidée","mangée","pulvérisée"]},866:(e,t,n)=>{function s(e){return Array.isArray(e)?e[Math.floor(Math.random()*e.length)]:e}n.d(t,{U:()=>s})},5191:(e,t,n)=>{e.exports=n.p+"img/hills.e5f756691ba70707d003.webp"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,