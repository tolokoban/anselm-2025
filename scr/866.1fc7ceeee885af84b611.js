"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[866],{4263:(e,n,t)=>{t.d(n,{A:()=>a});var o=t(1354),s=t.n(o),r=t(6314),i=t.n(r)()(s());i.push([e.id,".src-components-LandscapeView-LandscapeView-module_parent_vK28h0,\n.src-components-LandscapeView-LandscapeView-module_child_wetol2 {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.src-components-LandscapeView-LandscapeView-module_parent_vK28h0 {\n    transform-origin: top left;\n}\n","",{version:3,sources:["webpack://./src/components/LandscapeView/LandscapeView.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:[".parent,\n.child {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.parent {\n    transform-origin: top left;\n}\n"],sourceRoot:""}]),i.locals={parent:"src-components-LandscapeView-LandscapeView-module_parent_vK28h0",child:"src-components-LandscapeView-LandscapeView-module_child_wetol2"};const a=i},5005:(e,n,t)=>{t.d(n,{A:()=>a});var o=t(1354),s=t.n(o),r=t(6314),i=t.n(r)()(s());i.push([e.id,".src-components-ViewBook-ViewBook-module_viewBook_KUzI2B {\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 1em;\n    gap: 1em;\n    margin: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n.src-components-ViewBook-ViewBook-module_viewBook_KUzI2B > button {\n    place-self: end;\n    transition: all 0.5s;\n    transform: scale(1);\n}\n\n.src-components-ViewBook-ViewBook-module_viewBook_KUzI2B > button[disabled] {\n    transform: scale(0);\n}\n","",{version:3,sources:["webpack://./src/components/ViewBook/ViewBook.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,4BAA4B;IAC5B,YAAY;IACZ,QAAQ;IACR,SAAS;IACT,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB",sourcesContent:[".viewBook {\n    display: grid;\n    grid-template-rows: 1fr auto;\n    padding: 1em;\n    gap: 1em;\n    margin: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n.viewBook > button {\n    place-self: end;\n    transition: all 0.5s;\n    transform: scale(1);\n}\n\n.viewBook > button[disabled] {\n    transform: scale(0);\n}\n"],sourceRoot:""}]),i.locals={viewBook:"src-components-ViewBook-ViewBook-module_viewBook_KUzI2B"};const a=i},4333:(e,n,t)=>{t.d(n,{A:()=>a});var o=t(1354),s=t.n(o),r=t(6314),i=t.n(r)()(s());i.push([e.id,".src-components-ViewText-ViewText-module_viewText_vqZsDv {\n    display: grid;\n    place-items: center;\n}\n\n.src-components-ViewText-ViewText-module_viewText_vqZsDv > div {\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.src-components-ViewText-ViewText-module_viewText_vqZsDv > div > span {\n    transition: opacity 1.5s;\n    opacity: 0;\n}\n\n.src-components-ViewText-ViewText-module_viewText_vqZsDv > div > span.src-components-ViewText-ViewText-module_show_HhaPML {\n    opacity: 1;\n}\n","",{version:3,sources:["webpack://./src/components/ViewText/ViewText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,wBAAwB;IACxB,UAAU;AACd;;AAEA;IACI,UAAU;AACd",sourcesContent:[".viewText {\n    display: grid;\n    place-items: center;\n}\n\n.viewText > div {\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.viewText > div > span {\n    transition: opacity 1.5s;\n    opacity: 0;\n}\n\n.viewText > div > span.show {\n    opacity: 1;\n}\n"],sourceRoot:""}]),i.locals={viewText:"src-components-ViewText-ViewText-module_viewText_vqZsDv",show:"src-components-ViewText-ViewText-module_show_HhaPML"};const a=i},2866:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});var o=t(4848),s=t(9075),r=t(9419),i=t(5006);function a(){const e=(0,s.n)();return(0,o.jsx)(i.A,{pages:["Cher Anselm,\nTu viens d'avoir 9 ans et tu es à mi-chemin de la majorité.\n          \nDu moins... d'après les critères Terrestres.","Mais tu dois t'en douter maintenant :\ntu ne viens pas vraiment de la Terre...\n\nEt il est grand temps que tu rentres chez toi.","On t'a laissé une soucoupe, mais elle n'a pas encore assez d'énergie pour faire le voyage à travers la galaxie.","Pour faire le plein, clique sur l'écran ou appuie sur la barre d'espace.\nUne centaine de bovins devrait faire l'affaire.\n\n"+(e>0?`Record à battre : ${e}`:"À très bientôt ANSELM !!!")],onDone:()=>{(0,r.gQ)("/01/play"),document.body.requestFullscreen()}})}},7067:(e,n,t)=>{t.d(n,{A:()=>B});var o=t(4848),s=t(6540),r=t(5072),i=t.n(r),a=t(7825),c=t.n(a),l=t(7659),A=t.n(l),d=t(5056),u=t.n(d),p=t(540),m=t.n(p),w=t(1113),h=t.n(w),v=t(4263),f={};f.styleTagTransform=h(),f.setAttributes=u(),f.insert=A().bind(null,"head"),f.domAPI=c(),f.insertStyleElement=m(),i()(v.A,f);const g=v.A&&v.A.locals?v.A.locals:void 0;function B({className:e,onMount:n,children:t}){const r=s.useRef(null),i=s.useRef(null);return function(e,n){const t=s.useRef(null);t.current||(t.current=new ResizeObserver((t=>{const o=e.current,s=n.current;if(o&&s)for(const e of t){const n=e.target,{width:t,height:s}=n.getBoundingClientRect();s>t?(o.style.width=`${s}px`,o.style.height=`${t}px`,o.style.transform=`translateX(${t}px) rotate(90deg)`):(o.style.width=`${t}px`,o.style.height=`${s}px`,o.style.transform="none")}}))),s.useEffect((()=>{const n=e.current;if(!n)return;const o=t.current;if(!o)return;const s=n.parentElement;return s?(o.observe(s),()=>o.unobserve(s)):void 0}),[e.current])}(r,i),s.useEffect((()=>{const e=r.current;e&&(null==n||n(e))}),[r.current]),(0,o.jsx)("div",{className:x(e,g.parent),ref:r,children:(0,o.jsx)("div",{className:g.child,ref:i,children:t})})}function x(...e){return e.filter((e=>"string"==typeof e)).join(" ")}},5006:(e,n,t)=>{t.d(n,{A:()=>_});var o=t(4848),s=t(6540),r=t(5072),i=t.n(r),a=t(7825),c=t.n(a),l=t(7659),A=t.n(l),d=t(5056),u=t.n(d),p=t(540),m=t.n(p),w=t(1113),h=t.n(w),v=t(5005),f={};f.styleTagTransform=h(),f.setAttributes=u(),f.insert=A().bind(null,"head"),f.domAPI=c(),f.insertStyleElement=m(),i()(v.A,f);const g=v.A&&v.A.locals?v.A.locals:void 0;var B=t(4333),x={};x.styleTagTransform=h(),x.setAttributes=u(),x.insert=A().bind(null,"head"),x.domAPI=c(),x.insertStyleElement=m(),i()(B.A,x);const C=B.A&&B.A.locals?B.A.locals:void 0;function I({className:e,children:n,onDone:t}){const r=s.useRef(0),i=s.useRef(0),[a,c]=s.useState([]),[l,A]=s.useState(0);return s.useEffect((()=>(r.current=0,A(0),c([]),window.setTimeout((()=>{c(n.split(""))})),window.clearTimeout(i.current),i.current=window.setInterval((()=>{if(r.current++,r.current>n.length)return window.clearTimeout(i.current),i.current=0,void t();A(r.current)}),40),()=>window.clearTimeout(i.current))),[n]),(0,o.jsx)("div",{className:V(e,C.viewText),children:(0,o.jsx)("div",{onClick:()=>{r.current=n.length,A(r.current),t()},children:a.map(((e,t)=>(0,o.jsx)("span",{className:V(t<l&&C.show),children:e},`${e}$#${t}/${n.length}`)))})})}function V(...e){return e.filter((e=>"string"==typeof e)).join(" ")}var b=t(866),T=t(7067);function _({className:e,pages:n,onDone:t}){const[r,i]=s.useState(!0),[a,c]=s.useState(0),l=(0,b.U)(n[a]),A=a>=n.length-1;return(0,o.jsx)(T.A,{children:(0,o.jsxs)("div",{className:k(e,g.viewBook),children:[(0,o.jsx)(I,{onDone:()=>i(!1),children:null!=l?l:"..."}),(0,o.jsx)("button",{type:"button",disabled:r,onClick:()=>{const e=a+1;e>=n.length?t():(i(!0),c(e),document.body.requestFullscreen())},children:A?(0,o.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",children:[(0,o.jsx)("title",{children:"controller"}),(0,o.jsx)("path",{d:"M7.97,16L5,19C4.67,19.3 4.23,19.5 3.75,19.5A1.75,1.75 0 0,1 2,17.75V17.5L3,10.12C3.21,7.81 5.14,6 7.5,6H16.5C18.86,6 20.79,7.81 21,10.12L22,17.5V17.75A1.75,1.75 0 0,1 20.25,19.5C19.77,19.5 19.33,19.3 19,19L16.03,16H7.97M7,8V10H5V11H7V13H8V11H10V10H8V8H7M16.5,8A0.75,0.75 0 0,0 15.75,8.75A0.75,0.75 0 0,0 16.5,9.5A0.75,0.75 0 0,0 17.25,8.75A0.75,0.75 0 0,0 16.5,8M14.75,9.75A0.75,0.75 0 0,0 14,10.5A0.75,0.75 0 0,0 14.75,11.25A0.75,0.75 0 0,0 15.5,10.5A0.75,0.75 0 0,0 14.75,9.75M18.25,9.75A0.75,0.75 0 0,0 17.5,10.5A0.75,0.75 0 0,0 18.25,11.25A0.75,0.75 0 0,0 19,10.5A0.75,0.75 0 0,0 18.25,9.75M16.5,11.5A0.75,0.75 0 0,0 15.75,12.25A0.75,0.75 0 0,0 16.5,13A0.75,0.75 0 0,0 17.25,12.25A0.75,0.75 0 0,0 16.5,11.5Z"})]}):(0,o.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",children:[(0,o.jsx)("title",{children:"dots-horizontal"}),(0,o.jsx)("path",{d:"M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z"})]})})]})})}function k(...e){return e.filter((e=>"string"==typeof e)).join(" ")}},9075:(e,n,t)=>{t.d(n,{T:()=>r,n:()=>s});const o="anselm-2025/highscore";function s(){const e=window.localStorage.getItem(o),n=Number(e);return Number.isNaN(n)?0:Math.max(0,n)}function r(e){window.localStorage.setItem(o,`${Math.max(s(),e)}`)}},866:(e,n,t)=>{function o(e){return Array.isArray(e)?e[Math.floor(Math.random()*e.length)]:e}t.d(n,{U:()=>o})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,