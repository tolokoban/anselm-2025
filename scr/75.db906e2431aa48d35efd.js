"use strict";(self.webpackChunkansy_2025=self.webpackChunkansy_2025||[]).push([[75],{1556:(t,e,r)=>{function n(t,e,r){if(r=r||t.byteLength,t.byteLength<r||e.byteLength<r)return!1;const n=new Uint8Array(t),s=new Uint8Array(e);for(let t=0;t<n.length;++t)if(n[t]!==s[t])return!1;return!0}function s(...t){return function(t){const e=t.map(t=>t instanceof ArrayBuffer?new Uint8Array(t):t),r=e.reduce((t,e)=>t+e.byteLength,0),n=new Uint8Array(r);let s=0;for(const t of e)n.set(t,s),s+=t.byteLength;return n.buffer}(t)}function o(t,e,r){const n=void 0!==r?new Uint8Array(t).subarray(e,e+r):new Uint8Array(t).subarray(e);return new Uint8Array(n).buffer}r.d(e,{AQ:()=>s,YV:()=>n,_m:()=>o})},1609:(t,e,r)=>{r.d(e,{B:()=>Sr});var n={};r.r(n),r.d(n,{createExtMeshFeatures:()=>Kt,decode:()=>vt,encode:()=>xt,name:()=>Lt});var s={};r.r(s),r.d(s,{createExtStructuralMetadata:()=>te,decode:()=>Qt,encode:()=>Pt,name:()=>_t});var o={};r.r(o),r.d(o,{decode:()=>le,name:()=>Be});var i={};r.r(i),r.d(i,{name:()=>me,preprocess:()=>be});var a={};r.r(a),r.d(a,{name:()=>pe,preprocess:()=>Ee});var c={};r.r(c),r.d(c,{decode:()=>we,encode:()=>Je,name:()=>Me,preprocess:()=>De});var u={};r.r(u),r.d(u,{decode:()=>or,name:()=>er});var A={};r.r(A),r.d(A,{decode:()=>fr,encode:()=>Br,name:()=>Ar});var f={};r.r(f),r.d(f,{decode:()=>dr,encode:()=>Cr,name:()=>hr});var B={};r.r(B),r.d(B,{decode:()=>br,encode:()=>yr,name:()=>mr});var l={};function h(t,e,r){if(t.byteLength<=e+r)return"";const n=new DataView(t);let s="";for(let t=0;t<r;t++)s+=String.fromCharCode(n.getUint8(e+t));return s}r.r(l),r.d(l,{decode:()=>Gr,name:()=>Fr});var d=r(1556);async function C(t,e,r,n){return n._parse(t,e,r,n)}var g=r(4020),m=r(7976);const b=globalThis.loaders?.parseImageNode,y="undefined"!=typeof Image,p="undefined"!=typeof ImageBitmap,E=Boolean(b),F=!!m.Bd||E;function G(t){const e=function(t){return"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?"imagebitmap":"undefined"!=typeof Image&&t instanceof Image?"image":t&&"object"==typeof t&&t.data&&t.width&&t.height?"data":null}(t);if(!e)throw new Error("Not an image");return e}function I(t){switch(G(t)){case"data":return t;case"image":case"imagebitmap":const e=document.createElement("canvas"),r=e.getContext("2d");if(!r)throw new Error("getImageData");return e.width=t.width,e.height=t.height,r.drawImage(t,0,0),r.getImageData(0,0,t.width,t.height);default:throw new Error("getImageData")}}const M=/^data:image\/svg\+xml/,D=/\.svg((\?|#).*)?$/;function w(t){return t&&(M.test(t)||D.test(t))}function J(t,e){if(w(e))throw new Error("SVG cannot be parsed directly to imagebitmap");return new Blob([new Uint8Array(t)])}async function T(t,e,r){const n=function(t,e){if(w(e)){let e=(new TextDecoder).decode(t);try{"function"==typeof unescape&&"function"==typeof encodeURIComponent&&(e=unescape(encodeURIComponent(e)))}catch(t){throw new Error(t.message)}return`data:image/svg+xml;base64,${btoa(e)}`}return J(t,e)}(t,r),s=self.URL||self.webkitURL,o="string"!=typeof n&&s.createObjectURL(n);try{return await async function(t,e){const r=new Image;return r.src=t,e.image&&e.image.decode&&r.decode?(await r.decode(),r):await new Promise((t,e)=>{try{r.onload=()=>t(r),r.onerror=t=>{const r=t instanceof Error?t.message:"error";e(new Error(r))}}catch(t){e(t)}})}(o||n,e)}finally{o&&s.revokeObjectURL(o)}}const O={};let R=!0;const H=!1,U=!0;function L(t){const e=v(t);return function(t){const e=v(t);return e.byteLength>=24&&2303741511===e.getUint32(0,H)?{mimeType:"image/png",width:e.getUint32(16,H),height:e.getUint32(20,H)}:null}(e)||function(t){const e=v(t);if(!(e.byteLength>=3&&65496===e.getUint16(0,H)&&255===e.getUint8(2)))return null;const{tableMarkers:r,sofMarkers:n}=function(){const t=new Set([65499,65476,65484,65501,65534]);for(let e=65504;e<65520;++e)t.add(e);return{tableMarkers:t,sofMarkers:new Set([65472,65473,65474,65475,65477,65478,65479,65481,65482,65483,65485,65486,65487,65502])}}();let s=2;for(;s+9<e.byteLength;){const t=e.getUint16(s,H);if(n.has(t))return{mimeType:"image/jpeg",height:e.getUint16(s+5,H),width:e.getUint16(s+7,H)};if(!r.has(t))return null;s+=2,s+=e.getUint16(s,H)}return null}(e)||function(t){const e=v(t);return e.byteLength>=10&&1195984440===e.getUint32(0,H)?{mimeType:"image/gif",width:e.getUint16(6,U),height:e.getUint16(8,U)}:null}(e)||function(t){const e=v(t);return e.byteLength>=14&&16973===e.getUint16(0,H)&&e.getUint32(2,U)===e.byteLength?{mimeType:"image/bmp",width:e.getUint32(18,U),height:e.getUint32(22,U)}:null}(e)||function(t){const e=function(t){return function(t,e,r=0){const n=(s="ftyp",[...s].map(t=>t.charCodeAt(0)));var s;for(let e=0;e<n.length;++e)if(n[e]!==t[e+r])return!1;return!0}(t,0,4)&&96&t[8]?function(t){switch((e=t,String.fromCharCode(...e.slice(8,12))).replace("\0"," ").trim()){case"avif":case"avis":return{extension:"avif",mimeType:"image/avif"};default:return null}var e}(t):null}(new Uint8Array(t instanceof DataView?t.buffer:t));return e?{mimeType:e.mimeType,width:0,height:0}:null}(e)}function v(t){if(t instanceof DataView)return t;if(ArrayBuffer.isView(t))return new DataView(t.buffer);if(t instanceof ArrayBuffer)return new DataView(t);throw new Error("toDataView")}const x={dataType:null,batchType:null,id:"image",module:"images",name:"Images",version:"4.3.3",mimeTypes:["image/png","image/jpeg","image/gif","image/webp","image/avif","image/bmp","image/vnd.microsoft.icon","image/svg+xml"],extensions:["png","jpg","jpeg","gif","webp","bmp","ico","svg","avif"],parse:async function(t,e,r){const n=((e=e||{}).image||{}).type||"auto",{url:s}=r||{};let o;switch(function(t){switch(t){case"auto":case"data":return function(){if(p)return"imagebitmap";if(y)return"image";if(F)return"data";throw new Error("Install '@loaders.gl/polyfills' to parse images under Node.js")}();default:return function(t){switch(t){case"auto":return p||y||F;case"imagebitmap":return p;case"image":return y;case"data":return F;default:throw new Error(`@loaders.gl/images: image ${t} not supported in this environment`)}}(t),t}}(n)){case"imagebitmap":o=await async function(t,e,r){let n;n=w(r)?await T(t,e,r):J(t,r);const s=e&&e.imagebitmap;return await async function(t,e=null){if(!function(t){for(const e in t||O)return!1;return!0}(e)&&R||(e=null),e)try{return await createImageBitmap(t,e)}catch(t){console.warn(t),R=!1}return await createImageBitmap(t)}(n,s)}(t,e,s);break;case"image":o=await T(t,e,s);break;case"data":o=await async function(t){const{mimeType:e}=L(t)||{},r=globalThis.loaders?.parseImageNode;return(0,g.v)(r),await r(t,e)}(t);break;default:(0,g.v)(!1)}return"data"===n&&(o=I(o)),o},tests:[t=>Boolean(L(new DataView(t)))],options:{image:{type:"auto",decode:!0}}};var j=r(8016);let K,S;async function N(t){var e;e=t.modules,globalThis.loaders||={},globalThis.loaders.modules||={},Object.assign(globalThis.loaders.modules,e);return function(){const t=globalThis.loaders?.modules?.basis;return t||null}()||(K||=async function(t){let e=null,r=null;return[e,r]=await Promise.all([await(0,j._)("basis_transcoder.js","textures",t),await(0,j._)("basis_transcoder.wasm","textures",t)]),e=e||globalThis.BASIS,await function(t,e){const r={};return e&&(r.wasmBinary=e),new Promise(e=>{t(r).then(t=>{const{BasisFile:r,initializeBasis:n}=t;n(),e({BasisFile:r})})})}(e,r)}(t),await K)}async function _(t){const e=t.modules||{};return e.basisEncoder?e.basisEncoder:(S=S||async function(t){let e=null,r=null;return[e,r]=await Promise.all([await(0,j._)("basis_encoder.js","textures",t),await(0,j._)("basis_encoder.wasm","textures",t)]),e=e||globalThis.BASIS,await function(t,e){const r={};return e&&(r.wasmBinary=e),new Promise(e=>{t(r).then(t=>{const{BasisFile:r,KTX2File:n,initializeBasis:s,BasisEncoder:o}=t;s(),e({BasisFile:r,KTX2File:n,BasisEncoder:o})})})}(e,r)}(t),await S)}const Q=["","WEBKIT_","MOZ_"],P={WEBGL_compressed_texture_s3tc:"dxt",WEBGL_compressed_texture_s3tc_srgb:"dxt-srgb",WEBGL_compressed_texture_etc1:"etc1",WEBGL_compressed_texture_etc:"etc2",WEBGL_compressed_texture_pvrtc:"pvrtc",WEBGL_compressed_texture_atc:"atc",WEBGL_compressed_texture_astc:"astc",EXT_texture_compression_rgtc:"rgtc"};let k=null;const X=[171,75,84,88,32,50,48,187,13,10,26,10],Y={etc1:{basisFormat:0,compressed:!0,format:36196},etc2:{basisFormat:1,compressed:!0},bc1:{basisFormat:2,compressed:!0,format:33776},bc3:{basisFormat:3,compressed:!0,format:33779},bc4:{basisFormat:4,compressed:!0},bc5:{basisFormat:5,compressed:!0},"bc7-m6-opaque-only":{basisFormat:6,compressed:!0},"bc7-m5":{basisFormat:7,compressed:!0},"pvrtc1-4-rgb":{basisFormat:8,compressed:!0,format:35840},"pvrtc1-4-rgba":{basisFormat:9,compressed:!0,format:35842},"astc-4x4":{basisFormat:10,compressed:!0,format:37808},"atc-rgb":{basisFormat:11,compressed:!0},"atc-rgba-interpolated-alpha":{basisFormat:12,compressed:!0},rgba32:{basisFormat:13,compressed:!1},rgb565:{basisFormat:14,compressed:!1},bgr565:{basisFormat:15,compressed:!1},rgba4444:{basisFormat:16,compressed:!1}};function W(t,e,r){const n=new t(new Uint8Array(e));try{if(!n.startTranscoding())throw new Error("Failed to start basis transcoding");const t=n.getNumImages(),e=[];for(let s=0;s<t;s++){const t=n.getNumLevels(s),o=[];for(let e=0;e<t;e++)o.push(V(n,s,e,r));e.push(o)}return e}finally{n.close(),n.delete()}}function V(t,e,r,n){const s=t.getImageWidth(e,r),o=t.getImageHeight(e,r),i=t.getHasAlpha(),{compressed:a,format:c,basisFormat:u}=$(n,i),A=t.getImageTranscodedSizeInBytes(e,r,u),f=new Uint8Array(A);if(!t.transcodeImage(f,e,r,u,0,0))throw new Error("failed to start Basis transcoding");return{width:s,height:o,data:f,compressed:a,format:c,hasAlpha:i}}function Z(t,e,r){const n=new t(new Uint8Array(e));try{if(!n.startTranscoding())throw new Error("failed to start KTX2 transcoding");const t=n.getLevels(),e=[];for(let s=0;s<t;s++)e.push(q(n,s,r));return[e]}finally{n.close(),n.delete()}}function q(t,e,r){const{alphaFlag:n,height:s,width:o}=t.getImageLevelInfo(e,0,0),{compressed:i,format:a,basisFormat:c}=$(r,n),u=t.getImageTranscodedSizeInBytes(e,0,0,c),A=new Uint8Array(u);if(!t.transcodeImage(A,e,0,0,c,0,-1,-1))throw new Error("Failed to transcode KTX2 image");return{width:o,height:s,data:A,compressed:i,levelSize:u,hasAlpha:n,format:a}}function $(t,e){let r=t&&t.basis&&t.basis.format;return"auto"===r&&(r=z()),"object"==typeof r&&(r=e?r.alpha:r.noAlpha),r=r.toLowerCase(),Y[r]}function z(){const t=function(t){if(!k){t=t||function(){try{return document.createElement("canvas").getContext("webgl")}catch(t){return null}}()||void 0,k=new Set;for(const e of Q)for(const r in P)if(t&&t.getExtension(`${e}${r}`)){const t=P[r];k.add(t)}}return k}();return t.has("astc")?"astc-4x4":t.has("dxt")?{alpha:"bc3",noAlpha:"bc1"}:t.has("pvrtc")?{alpha:"pvrtc1-4-rgba",noAlpha:"pvrtc1-4-rgb"}:t.has("etc1")?"etc1":t.has("etc2")?"etc2":"rgb565"}const tt={dataType:null,batchType:null,name:"Basis",id:"basis",module:"textures",version:"4.3.3",worker:!0,extensions:["basis","ktx2"],mimeTypes:["application/octet-stream","image/ktx2"],tests:["sB"],binary:!0,options:{basis:{format:"auto",libraryPath:"libs/",containerFormat:"auto",module:"transcoder"}},parse:async function(t,e){if("auto"===e.basis.containerFormat){if(function(t){const e=new Uint8Array(t);return!(e.byteLength<X.length||e[0]!==X[0]||e[1]!==X[1]||e[2]!==X[2]||e[3]!==X[3]||e[4]!==X[4]||e[5]!==X[5]||e[6]!==X[6]||e[7]!==X[7]||e[8]!==X[8]||e[9]!==X[9]||e[10]!==X[10]||e[11]!==X[11])}(t))return Z((await _(e)).KTX2File,t,e);const{BasisFile:r}=await N(e);return W(r,t,e)}if("encoder"===e.basis.module){const r=await _(e);return"ktx2"===e.basis.containerFormat?Z(r.KTX2File,t,e):W(r.BasisFile,t,e)}{const{BasisFile:r}=await N(e);return W(r,t,e)}}};function et(t,e){if(!t)throw new Error(e||"assert failed: gltf")}function rt(t,e){return(0,g.v)(t>=0),(0,g.v)(e>0),t+(e-1)&~(e-1)}function nt(t,e,r){let n;if(t instanceof ArrayBuffer)n=new Uint8Array(t);else{const e=t.byteOffset,r=t.byteLength;n=new Uint8Array(t.buffer||t.arrayBuffer,e,r)}return e.set(n,r),r+rt(n.byteLength,4)}const st=!0,ot=1735152710;function it(t,e,r,n){const s=new Uint8Array(e.buffer,r,n),o=new TextDecoder("utf8").decode(s);return t.json=JSON.parse(o),rt(n,4)}function at(t,e,r,n){return t.header.hasBinChunk=!0,t.binChunks.push({byteOffset:r,byteLength:n,arrayBuffer:e.buffer}),rt(n,4)}function ct(t,e){if(t.startsWith("data:")||t.startsWith("http:")||t.startsWith("https:"))return t;const r=e.baseUri||e.uri;if(!r)throw new Error(`'baseUri' must be provided to resolve relative url ${t}`);return r.substr(0,r.lastIndexOf("/")+1)+t}const ut={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},At={5120:1,5121:1,5122:2,5123:2,5125:4,5126:4},ft=["SCALAR","VEC2","VEC3","VEC4"],Bt=[[Int8Array,5120],[Uint8Array,5121],[Int16Array,5122],[Uint16Array,5123],[Uint32Array,5125],[Float32Array,5126],[Float64Array,5130]],lt=new Map(Bt),ht={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},dt={5120:1,5121:1,5122:2,5123:2,5125:4,5126:4},Ct={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};function gt(t){return ft[t-1]||ft[0]}function mt(t){const e=lt.get(t.constructor);if(!e)throw new Error("Illegal typed array");return e}function bt(t,e){const r=Ct[t.componentType],n=ht[t.type],s=dt[t.componentType],o=t.count*n,i=t.count*n*s;return et(i>=0&&i<=e.byteLength),{ArrayType:r,length:o,byteLength:i,componentByteSize:At[t.componentType],numberOfComponentsInElement:ut[t.type]}}class yt{gltf;sourceBuffers;byteLength;constructor(t){this.gltf={json:t?.json||{asset:{version:"2.0",generator:"loaders.gl"},buffers:[],extensions:{},extensionsRequired:[],extensionsUsed:[]},buffers:t?.buffers||[],images:t?.images||[]},this.sourceBuffers=[],this.byteLength=0,this.gltf.buffers&&this.gltf.buffers[0]&&(this.byteLength=this.gltf.buffers[0].byteLength,this.sourceBuffers=[this.gltf.buffers[0]])}get json(){return this.gltf.json}getApplicationData(t){return this.json[t]}getExtraData(t){return(this.json.extras||{})[t]}hasExtension(t){const e=this.getUsedExtensions().find(e=>e===t),r=this.getRequiredExtensions().find(e=>e===t);return"string"==typeof e||"string"==typeof r}getExtension(t){const e=this.getUsedExtensions().find(e=>e===t),r=this.json.extensions||{};return e?r[t]:null}getRequiredExtension(t){return this.getRequiredExtensions().find(e=>e===t)?this.getExtension(t):null}getRequiredExtensions(){return this.json.extensionsRequired||[]}getUsedExtensions(){return this.json.extensionsUsed||[]}getRemovedExtensions(){return this.json.extensionsRemoved||[]}getObjectExtension(t,e){return(t.extensions||{})[e]}getScene(t){return this.getObject("scenes",t)}getNode(t){return this.getObject("nodes",t)}getSkin(t){return this.getObject("skins",t)}getMesh(t){return this.getObject("meshes",t)}getMaterial(t){return this.getObject("materials",t)}getAccessor(t){return this.getObject("accessors",t)}getTexture(t){return this.getObject("textures",t)}getSampler(t){return this.getObject("samplers",t)}getImage(t){return this.getObject("images",t)}getBufferView(t){return this.getObject("bufferViews",t)}getBuffer(t){return this.getObject("buffers",t)}getObject(t,e){if("object"==typeof e)return e;const r=this.json[t]&&this.json[t][e];if(!r)throw new Error(`glTF file error: Could not find ${t}[${e}]`);return r}getTypedArrayForBufferView(t){const e=(t=this.getBufferView(t)).buffer,r=this.gltf.buffers[e];et(r);const n=(t.byteOffset||0)+r.byteOffset;return new Uint8Array(r.arrayBuffer,n,t.byteLength)}getTypedArrayForAccessor(t){const e=this.getAccessor(t);return function(t,e,r){const n="number"==typeof r?t.accessors?.[r]:r;if(!n)throw new Error(`No gltf accessor ${JSON.stringify(r)}`);const s=t.bufferViews?.[n.bufferView||0];if(!s)throw new Error(`No gltf buffer view for accessor ${s}`);const{arrayBuffer:o,byteOffset:i}=e[s.buffer],a=(i||0)+(n.byteOffset||0)+(s.byteOffset||0),{ArrayType:c,length:u,componentByteSize:A,numberOfComponentsInElement:f}=bt(n,s),B=A*f,l=s.byteStride||B;if(void 0===s.byteStride||s.byteStride===B)return new c(o,a,u);const h=new c(u);for(let t=0;t<n.count;t++){const e=new c(o,a+t*l,f);h.set(e,t*f)}return h}(this.gltf.json,this.gltf.buffers,e)}getTypedArrayForImageData(t){t=this.getAccessor(t);const e=this.getBufferView(t.bufferView),r=this.getBuffer(e.buffer).data,n=e.byteOffset||0;return new Uint8Array(r,n,e.byteLength)}addApplicationData(t,e){return this.json[t]=e,this}addExtraData(t,e){return this.json.extras=this.json.extras||{},this.json.extras[t]=e,this}addObjectExtension(t,e,r){return t.extensions=t.extensions||{},t.extensions[e]=r,this.registerUsedExtension(e),this}setObjectExtension(t,e,r){(t.extensions||{})[e]=r}removeObjectExtension(t,e){const r=t?.extensions||{};if(r[e]){this.json.extensionsRemoved=this.json.extensionsRemoved||[];const t=this.json.extensionsRemoved;t.includes(e)||t.push(e)}delete r[e]}addExtension(t,e={}){return et(e),this.json.extensions=this.json.extensions||{},this.json.extensions[t]=e,this.registerUsedExtension(t),e}addRequiredExtension(t,e={}){return et(e),this.addExtension(t,e),this.registerRequiredExtension(t),e}registerUsedExtension(t){this.json.extensionsUsed=this.json.extensionsUsed||[],this.json.extensionsUsed.find(e=>e===t)||this.json.extensionsUsed.push(t)}registerRequiredExtension(t){this.registerUsedExtension(t),this.json.extensionsRequired=this.json.extensionsRequired||[],this.json.extensionsRequired.find(e=>e===t)||this.json.extensionsRequired.push(t)}removeExtension(t){if(this.json.extensions?.[t]){this.json.extensionsRemoved=this.json.extensionsRemoved||[];const e=this.json.extensionsRemoved;e.includes(t)||e.push(t)}this.json.extensions&&delete this.json.extensions[t],this.json.extensionsRequired&&this._removeStringFromArray(this.json.extensionsRequired,t),this.json.extensionsUsed&&this._removeStringFromArray(this.json.extensionsUsed,t)}setDefaultScene(t){this.json.scene=t}addScene(t){const{nodeIndices:e}=t;return this.json.scenes=this.json.scenes||[],this.json.scenes.push({nodes:e}),this.json.scenes.length-1}addNode(t){const{meshIndex:e,matrix:r}=t;this.json.nodes=this.json.nodes||[];const n={mesh:e};return r&&(n.matrix=r),this.json.nodes.push(n),this.json.nodes.length-1}addMesh(t){const{attributes:e,indices:r,material:n,mode:s=4}=t,o={primitives:[{attributes:this._addAttributes(e),mode:s}]};if(r){const t=this._addIndices(r);o.primitives[0].indices=t}return Number.isFinite(n)&&(o.primitives[0].material=n),this.json.meshes=this.json.meshes||[],this.json.meshes.push(o),this.json.meshes.length-1}addPointCloud(t){const e={primitives:[{attributes:this._addAttributes(t),mode:0}]};return this.json.meshes=this.json.meshes||[],this.json.meshes.push(e),this.json.meshes.length-1}addImage(t,e){const r=L(t),n=e||r?.mimeType,s={bufferView:this.addBufferView(t),mimeType:n};return this.json.images=this.json.images||[],this.json.images.push(s),this.json.images.length-1}addBufferView(t,e=0,r=this.byteLength){const n=t.byteLength;et(Number.isFinite(n)),this.sourceBuffers=this.sourceBuffers||[],this.sourceBuffers.push(t);const s={buffer:e,byteOffset:r,byteLength:n};return this.byteLength+=rt(n,4),this.json.bufferViews=this.json.bufferViews||[],this.json.bufferViews.push(s),this.json.bufferViews.length-1}addAccessor(t,e){const r={bufferView:t,type:gt(e.size),componentType:e.componentType,count:e.count,max:e.max,min:e.min};return this.json.accessors=this.json.accessors||[],this.json.accessors.push(r),this.json.accessors.length-1}addBinaryBuffer(t,e={size:3}){const r=this.addBufferView(t);let n={min:e.min,max:e.max};n.min&&n.max||(n=this._getAccessorMinMax(t,e.size));const s={size:e.size,componentType:mt(t),count:Math.round(t.length/e.size),min:n.min,max:n.max};return this.addAccessor(r,Object.assign(s,e))}addTexture(t){const{imageIndex:e}=t,r={source:e};return this.json.textures=this.json.textures||[],this.json.textures.push(r),this.json.textures.length-1}addMaterial(t){return this.json.materials=this.json.materials||[],this.json.materials.push(t),this.json.materials.length-1}createBinaryChunk(){const t=this.byteLength,e=new ArrayBuffer(t),r=new Uint8Array(e);let n=0;for(const t of this.sourceBuffers||[])n=nt(t,r,n);this.json?.buffers?.[0]?this.json.buffers[0].byteLength=t:this.json.buffers=[{byteLength:t}],this.gltf.binary=e,this.sourceBuffers=[e],this.gltf.buffers=[{arrayBuffer:e,byteOffset:0,byteLength:e.byteLength}]}_removeStringFromArray(t,e){let r=!0;for(;r;){const n=t.indexOf(e);n>-1?t.splice(n,1):r=!1}}_addAttributes(t={}){const e={};for(const r in t){const n=t[r],s=this._getGltfAttributeName(r),o=this.addBinaryBuffer(n.value,n);e[s]=o}return e}_addIndices(t){return this.addBinaryBuffer(t,{size:1})}_getGltfAttributeName(t){switch(t.toLowerCase()){case"position":case"positions":case"vertices":return"POSITION";case"normal":case"normals":return"NORMAL";case"color":case"colors":return"COLOR_0";case"texcoord":case"texcoords":return"TEXCOORD_0";default:return t}}_getAccessorMinMax(t,e){const r={min:null,max:null};if(t.length<e)return r;r.min=[],r.max=[];const n=t.subarray(0,e);for(const t of n)r.min.push(t),r.max.push(t);for(let n=e;n<t.length;n+=e)for(let s=0;s<e;s++)r.min[0+s]=Math.min(r.min[0+s],t[n+s]),r.max[0+s]=Math.max(r.max[0+s],t[n+s]);return r}}function pt(t){return(t%1+1)%1}const Et={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16,BOOLEAN:1,STRING:1,ENUM:1},Ft={INT8:Int8Array,UINT8:Uint8Array,INT16:Int16Array,UINT16:Uint16Array,INT32:Int32Array,UINT32:Uint32Array,INT64:BigInt64Array,UINT64:BigUint64Array,FLOAT32:Float32Array,FLOAT64:Float64Array},Gt={INT8:1,UINT8:1,INT16:2,UINT16:2,INT32:4,UINT32:4,INT64:8,UINT64:8,FLOAT32:4,FLOAT64:8};function It(t,e){return Gt[e]*Et[t]}function Mt(t,e,r,n){if("UINT8"!==r&&"UINT16"!==r&&"UINT32"!==r&&"UINT64"!==r)return null;const s=Dt(t.getTypedArrayForBufferView(e),"SCALAR",r,n+1);return s instanceof BigInt64Array||s instanceof BigUint64Array?null:s}function Dt(t,e,r,n=1){const s=Et[e],o=Ft[r],i=Gt[r],a=n*s,c=a*i;let u=t.buffer,A=t.byteOffset;return A%i!==0&&(u=new Uint8Array(u).slice(A,A+c).buffer,A=0),new o(u,A,a)}function wt(t,e,r){const n=`TEXCOORD_${e.texCoord||0}`,s=r.attributes[n],o=t.getTypedArrayForAccessor(s),i=t.gltf.json,a=e.index,c=i.textures?.[a]?.source;if(void 0!==c){const r=i.images?.[c]?.mimeType,n=t.gltf.images?.[c];if(n&&void 0!==n.width){const t=[];for(let s=0;s<o.length;s+=2){const i=Tt(n,r,o,s,e.channels);t.push(i)}return t}}return[]}function Jt(t,e,r,n,s){if(!r?.length)return;const o=[];for(const t of r){let e=n.findIndex(e=>e===t);-1===e&&(e=n.push(t)-1),o.push(e)}const i=new Uint32Array(o),a=t.gltf.buffers.push({arrayBuffer:i.buffer,byteOffset:i.byteOffset,byteLength:i.byteLength})-1,c=t.addBufferView(i,a,0),u=t.addAccessor(c,{size:1,componentType:mt(i),count:i.length});s.attributes[e]=u}function Tt(t,e,r,n,s=[0]){const o={r:{offset:0,shift:0},g:{offset:1,shift:8},b:{offset:2,shift:16},a:{offset:3,shift:24}},i=r[n],a=r[n+1];let c=1;!e||-1===e.indexOf("image/jpeg")&&-1===e.indexOf("image/png")||(c=4);const u=function(t,e,r,n=1){const s=r.width,o=pt(t)*(s-1),i=Math.round(o),a=r.height,c=pt(e)*(a-1);return(Math.round(c)*s+i)*(r.components?r.components:n)}(i,a,t,c);let A=0;for(const e of s){const r="number"==typeof e?Object.values(o)[e]:o[e],n=u+r.offset,s=I(t);if(s.data.length<=n)throw new Error(`${s.data.length} <= ${n}`);A|=s.data[n]<<r.shift}return A}function Ot(t,e,r,n,s){const o=[];for(let i=0;i<e;i++){const e=r[i],a=r[i+1]-r[i];if(a+e>n)break;const c=e/s,u=a/s;o.push(t.slice(c,c+u))}return o}function Rt(t,e,r){const n=[];for(let s=0;s<e;s++){const e=s*r;n.push(t.slice(e,e+r))}return n}function Ht(t,e,r,n){if(r)throw new Error("Not implemented - arrayOffsets for strings is specified");if(n){const r=[],s=new TextDecoder("utf8");let o=0;for(let i=0;i<t;i++){const t=n[i+1]-n[i];if(t+o<=e.length){const n=e.subarray(o,t+o),i=s.decode(n);r.push(i),o+=t}}return r}return[]}const Ut="EXT_mesh_features",Lt=Ut;async function vt(t,e){!function(t,e){const r=t.gltf.json;if(r.meshes)for(const n of r.meshes)for(const r of n.primitives)jt(t,r,e)}(new yt(t),e)}function xt(t,e){const r=new yt(t);return function(t){const e=t.gltf.json.meshes;if(e)for(const r of e)for(const e of r.primitives)St(t,e)}(r),r.createBinaryChunk(),r.gltf}function jt(t,e,r){if(!r?.gltf?.loadBuffers)return;const n=e.extensions?.[Ut],s=n?.featureIds;if(s)for(const n of s){let s;if(void 0!==n.attribute){const r=`_FEATURE_ID_${n.attribute}`,o=e.attributes[r];s=t.getTypedArrayForAccessor(o)}else s=void 0!==n.texture&&r?.gltf?.loadImages?wt(t,n.texture,e):[];n.data=s}}function Kt(t,e,r,n){e.extensions||(e.extensions={});let s=e.extensions[Ut];s||(s={featureIds:[]},e.extensions[Ut]=s);const{featureIds:o}=s,i={featureCount:r.length,propertyTable:n,data:r};o.push(i),t.addObjectExtension(e,Ut,s)}function St(t,e){const r=e.extensions?.[Ut];if(!r)return;const n=r.featureIds;n.forEach((r,s)=>{if(r.data){const{accessorKey:o,index:i}=function(t){const e="_FEATURE_ID_",r=Object.keys(t).filter(t=>0===t.indexOf(e));let n=-1;for(const t of r){const e=Number(t.substring(12));e>n&&(n=e)}n++;return{accessorKey:`${e}${n}`,index:n}}(e.attributes),a=new Uint32Array(r.data);n[s]={featureCount:a.length,propertyTable:r.propertyTable,attribute:i},t.gltf.buffers.push({arrayBuffer:a.buffer,byteOffset:a.byteOffset,byteLength:a.byteLength});const c=t.addBufferView(a),u=t.addAccessor(c,{size:1,componentType:mt(a),count:a.length});e.attributes[o]=u}})}const Nt="EXT_structural_metadata",_t=Nt;async function Qt(t,e){!function(t,e){if(!e.gltf?.loadBuffers)return;const r=t.getExtension(Nt);r&&(e.gltf?.loadImages&&function(t,e){const r=e.propertyTextures,n=t.gltf.json;if(r&&n.meshes)for(const s of n.meshes)for(const n of s.primitives)Xt(t,r,n,e)}(t,r),function(t,e){const r=e.schema;if(!r)return;const n=r.classes,s=e.propertyTables;if(n&&s)for(const e in n){const n=kt(s,e);n&&Wt(t,r,n)}}(t,r))}(new yt(t),e)}function Pt(t,e){const r=new yt(t);return function(t){const e=t.getExtension(Nt);if(e&&e.propertyTables)for(const r of e.propertyTables){const n=r.class,s=e.schema?.classes?.[n];r.properties&&s&&zt(r,s,t)}}(r),r.createBinaryChunk(),r.gltf}function kt(t,e){for(const r of t)if(r.class===e)return r;return null}function Xt(t,e,r,n){if(!e)return;const s=r.extensions?.[Nt],o=s?.propertyTextures;if(o)for(const s of o)Yt(t,e[s],r,n)}function Yt(t,e,r,n){if(!e.properties)return;n.dataAttributeNames||(n.dataAttributeNames=[]);const s=e.class;for(const o in e.properties){const i=`${s}_${o}`,a=e.properties?.[o];if(!a)continue;a.data||(a.data=[]);const c=a.data,u=wt(t,a,r);null!==u&&(Jt(t,i,u,c,r),a.data=c,n.dataAttributeNames.push(i))}}function Wt(t,e,r){const n=e.classes?.[r.class];if(!n)throw new Error(`Incorrect data in the EXT_structural_metadata extension: no schema class with name ${r.class}`);const s=r.count;for(const o in n.properties){const i=n.properties[o],a=r.properties?.[o];if(a){const r=Vt(t,e,i,s,a);a.data=r}}}function Vt(t,e,r,n,s){let o=[];const i=s.values,a=t.getTypedArrayForBufferView(i),c=function(t,e,r,n){return e.array&&void 0===e.count&&void 0!==r.arrayOffsets?Mt(t,r.arrayOffsets,r.arrayOffsetType||"UINT32",n):null}(t,r,s,n),u=function(t,e,r){return void 0!==e.stringOffsets?Mt(t,e.stringOffsets,e.stringOffsetType||"UINT32",r):null}(t,s,n);switch(r.type){case"SCALAR":case"VEC2":case"VEC3":case"VEC4":case"MAT2":case"MAT3":case"MAT4":o=function(t,e,r,n){const s=t.array,o=t.count,i=It(t.type,t.componentType),a=r.byteLength/i;let c;return c=t.componentType?Dt(r,t.type,t.componentType,a):r,s?n?Ot(c,e,n,r.length,i):o?Rt(c,e,o):[]:c}(r,n,a,c);break;case"BOOLEAN":throw new Error(`Not implemented - classProperty.type=${r.type}`);case"STRING":o=Ht(n,a,c,u);break;case"ENUM":o=function(t,e,r,n,s){const o=e.enumType;if(!o)throw new Error("Incorrect data in the EXT_structural_metadata extension: classProperty.enumType is not set for type ENUM");const i=t.enums?.[o];if(!i)throw new Error(`Incorrect data in the EXT_structural_metadata extension: schema.enums does't contain ${o}`);const a=i.valueType||"UINT16",c=It(e.type,a),u=n.byteLength/c;let A=Dt(n,e.type,a,u);if(A||(A=n),e.array){if(s)return function(t){const{valuesData:e,numberOfElements:r,arrayOffsets:n,valuesDataBytesLength:s,elementSize:o,enumEntry:i}=t,a=[];for(let t=0;t<r;t++){const r=n[t],c=n[t+1]-n[t];if(c+r>s)break;const u=Zt(e,r/o,c/o,i);a.push(u)}return a}({valuesData:A,numberOfElements:r,arrayOffsets:s,valuesDataBytesLength:n.length,elementSize:c,enumEntry:i});const t=e.count;return t?function(t,e,r,n){const s=[];for(let o=0;o<e;o++){const e=Zt(t,r*o,r,n);s.push(e)}return s}(A,r,t,i):[]}return Zt(A,0,r,i)}(e,r,n,a,c);break;default:throw new Error(`Unknown classProperty type ${r.type}`)}return o}function Zt(t,e,r,n){const s=[];for(let o=0;o<r;o++)if(t instanceof BigInt64Array||t instanceof BigUint64Array)s.push("");else{const r=qt(n,t[e+o]);r?s.push(r.name):s.push("")}return s}function qt(t,e){for(const r of t.values)if(r.value===e)return r;return null}const $t="schemaClassId";function zt(t,e,r){for(const n in t.properties){const s=t.properties[n].data;if(s){const o=e.properties[n];if(o){const e=ee(s,o,r);t.properties[n]=e}}}}function te(t,e,r=$t){let n=t.getExtension(Nt);n||(n=t.addExtension(Nt)),n.schema=function(t,e,r){const n=r??{id:"schema_id"},s={properties:{}};for(const e of t){const t={type:e.elementType,componentType:e.componentType};s.properties[e.name]=t}return n.classes={},n.classes[e]=s,n}(e,r,n.schema);const s=function(t,e,r){const n={class:e,count:0};let s=0;const o=r.classes?.[e];for(const e of t){if(0===s&&(s=e.values.length),s!==e.values.length&&e.values.length)throw new Error("Illegal values in attributes");const t=o?.properties[e.name];t&&(n.properties||(n.properties={}),n.properties[e.name]={values:0,data:e.values})}return n.count=s,n}(e,r,n.schema);return n.propertyTables||(n.propertyTables=[]),n.propertyTables.push(s)-1}function ee(t,e,r){const n={values:0};if("STRING"===e.type){const{stringData:e,stringOffsets:s}=function(t){const e=new TextEncoder,r=[];let n=0;for(const s of t){const t=e.encode(s);n+=t.length,r.push(t)}const s=new Uint8Array(n),o=[];let i=0;for(const t of r)s.set(t,i),o.push(i),i+=t.length;o.push(i);return{stringData:s,stringOffsets:new Uint32Array(o)}}(t);n.stringOffsets=ne(s,r),n.values=ne(e,r)}else if("SCALAR"===e.type&&e.componentType){const s=function(t,e){const r=[];for(const e of t)r.push(Number(e));const n=re[e];if(!n)throw new Error("Illegal component type");return new n(r)}(t,e.componentType);n.values=ne(s,r)}return n}const re={INT8:Int8Array,UINT8:Uint8Array,INT16:Int16Array,UINT16:Uint16Array,INT32:Int32Array,UINT32:Uint32Array,INT64:Int32Array,UINT64:Uint32Array,FLOAT32:Float32Array,FLOAT64:Float64Array};function ne(t,e){return e.gltf.buffers.push({arrayBuffer:t.buffer,byteOffset:t.byteOffset,byteLength:t.byteLength}),e.addBufferView(t)}const se="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",oe="",ie=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,3,2,0,0,5,3,1,0,1,12,1,0,10,22,2,12,0,65,0,65,0,65,0,252,10,0,0,11,7,0,65,0,253,15,26,11]),ae=new Uint8Array([32,0,65,253,3,1,2,34,4,106,6,5,11,8,7,20,13,33,12,16,128,9,116,64,19,113,127,15,10,21,22,14,255,66,24,54,136,107,18,23,192,26,114,118,132,17,77,101,130,144,27,87,131,44,45,74,156,154,70,167]),ce={0:"",1:"meshopt_decodeFilterOct",2:"meshopt_decodeFilterQuat",3:"meshopt_decodeFilterExp",NONE:"",OCTAHEDRAL:"meshopt_decodeFilterOct",QUATERNION:"meshopt_decodeFilterQuat",EXPONENTIAL:"meshopt_decodeFilterExp"},ue={0:"meshopt_decodeVertexBuffer",1:"meshopt_decodeIndexBuffer",2:"meshopt_decodeIndexSequence",ATTRIBUTES:"meshopt_decodeVertexBuffer",TRIANGLES:"meshopt_decodeIndexBuffer",INDICES:"meshopt_decodeIndexSequence"};let Ae;const fe="EXT_meshopt_compression",Be=fe;async function le(t,e){const r=new yt(t);if(!e?.gltf?.decompressMeshes||!e.gltf?.loadBuffers)return;const n=[];for(const e of t.json.bufferViews||[])n.push(he(r,e));await Promise.all(n),r.removeExtension(fe)}async function he(t,e){const r=t.getObjectExtension(e,fe);if(r){const{byteOffset:n=0,byteLength:s=0,byteStride:o,count:i,mode:a,filter:c="NONE",buffer:u}=r,A=t.gltf.buffers[u],f=new Uint8Array(A.arrayBuffer,A.byteOffset+n,s),B=new Uint8Array(t.gltf.buffers[e.buffer].arrayBuffer,e.byteOffset,e.byteLength);await async function(t,e,r,n,s,o="NONE"){const i=await async function(){return Ae||(Ae=async function(){let t=se;WebAssembly.validate(ie)&&(t=oe,console.log("Warning: meshopt_decoder is using experimental SIMD support"));const e=await WebAssembly.instantiate(function(t){const e=new Uint8Array(t.length);for(let r=0;r<t.length;++r){const n=t.charCodeAt(r);e[r]=n>96?n-71:n>64?n-65:n>47?n+4:n>46?63:62}let r=0;for(let n=0;n<t.length;++n)e[r++]=e[n]<60?ae[e[n]]:64*(e[n]-60)+e[++n];return e.buffer.slice(0,r)}(t),{});return await e.instance.exports.__wasm_call_ctors(),e.instance}()),Ae}();!function(t,e,r,n,s,o,i){const a=t.exports.sbrk,c=n+3&-4,u=a(c*s),A=a(o.length),f=new Uint8Array(t.exports.memory.buffer);f.set(o,A);const B=e(u,n,s,A,o.length);if(0===B&&i&&i(u,c,s),r.set(f.subarray(u,u+n*s)),a(u-a(0)),0!==B)throw new Error(`Malformed buffer data: ${B}`)}(i,i.exports[ue[s]],t,e,r,n,i.exports[ce[o||"NONE"]])}(B,i,o,f,a,c),t.removeObjectExtension(e,fe)}}const de={};function Ce(t){if(void 0===de[t]){const e=m.Bd?function(t){switch(t){case"image/avif":case"image/webp":return function(t){try{return 0===document.createElement("canvas").toDataURL(t).indexOf(`data:${t}`)}catch{return!1}}(t);default:return!0}}(t):function(t){const e=globalThis.loaders?.imageFormatsNode||["image/png","image/jpeg","image/gif"],r=globalThis.loaders?.parseImageNode;return Boolean(r)&&e.includes(t)}(t);de[t]=e}return de[t]}const ge="EXT_texture_webp",me=ge;function be(t,e){const r=new yt(t);if(!Ce("image/webp")){if(r.getRequiredExtensions().includes(ge))throw new Error(`gltf: Required extension ${ge} not supported by browser`);return}const{json:n}=r;for(const t of n.textures||[]){const e=r.getObjectExtension(t,ge);e&&(t.source=e.source),r.removeObjectExtension(t,ge)}r.removeExtension(ge)}const ye="KHR_texture_basisu",pe=ye;function Ee(t,e){const r=new yt(t),{json:n}=r;for(const t of n.textures||[]){const e=r.getObjectExtension(t,ye);e&&(t.source=e.source,r.removeObjectExtension(t,ye))}r.removeExtension(ye)}var Fe=r(9679);function Ge(t){const{buffer:e,size:r,count:n}=function(t){let e=t,r=1,n=0;return t&&t.value&&(e=t.value,r=t.size||1),e&&(ArrayBuffer.isView(e)||(e=function(t,e,r=!1){return t?Array.isArray(t)?new e(t):!r||t instanceof e?t:new e(t):null}(e,Float32Array)),n=e.length/r),{buffer:e,size:r,count:n}}(t);return{value:e,size:r,byteOffset:0,count:n,type:gt(r),componentType:mt(e)}}const Ie="KHR_draco_mesh_compression",Me=Ie;function De(t,e,r){const n=new yt(t);for(const t of Re(n))n.getObjectExtension(t,Ie)}async function we(t,e,r){if(!e?.gltf?.decompressMeshes)return;const n=new yt(t),s=[];for(const t of Re(n))n.getObjectExtension(t,Ie)&&s.push(Te(n,t,e,r));await Promise.all(s),n.removeExtension(Ie)}function Je(t,e={}){const r=new yt(t);for(const t of r.json.meshes||[])Oe(t),r.addRequiredExtension(Ie)}async function Te(t,e,r,n){const s=t.getObjectExtension(e,Ie);if(!s)return;const o=t.getTypedArrayForBufferView(s.bufferView),i=(0,d._m)(o.buffer,o.byteOffset),a={...r};delete a["3d-tiles"];const c=await C(i,Fe.Vl,a,n),u=function(t){const e={};for(const r in t){const n=t[r];if("indices"!==r){const t=Ge(n);e[r]=t}}return e}(c.attributes);for(const[r,n]of Object.entries(u))if(r in e.attributes){const s=e.attributes[r],o=t.getAccessor(s);o?.min&&o?.max&&(n.min=o.min,n.max=o.max)}e.attributes=u,c.indices&&(e.indices=Ge(c.indices)),t.removeObjectExtension(e,Ie),function(t){if(!t.attributes&&Object.keys(t.attributes).length>0)throw new Error("glTF: Empty primitive detected: Draco decompression failure?")}(e)}function Oe(t,e,r=4,n,s){if(!n.DracoWriter)throw new Error("options.gltf.DracoWriter not provided");const o=n.DracoWriter.encodeSync({attributes:t}),i=s?.parseSync?.({attributes:t}),a=n._addFauxAttributes(i.attributes),c=n.addBufferView(o);return{primitives:[{attributes:a,mode:r,extensions:{[Ie]:{bufferView:c,attributes:a}}}]}}function*Re(t){for(const e of t.json.meshes||[])for(const t of e.primitives)yield t}Math.PI,Math.PI,globalThis.mathgl=globalThis.mathgl||{config:{EPSILON:1e-12,debug:!1,precision:4,printTypes:!1,printDegrees:!1,printRowMajor:!0,_cartographicRadians:!1}};const He=globalThis.mathgl.config;function Ue(t,{precision:e=He.precision}={}){return t=function(t){return Math.round(t/He.EPSILON)*He.EPSILON}(t),`${parseFloat(t.toPrecision(e))}`}function Le(t){return Array.isArray(t)||ArrayBuffer.isView(t)&&!(t instanceof DataView)}function ve(t,e,r){const n=He.EPSILON;r&&(He.EPSILON=r);try{if(t===e)return!0;if(Le(t)&&Le(e)){if(t.length!==e.length)return!1;for(let r=0;r<t.length;++r)if(!ve(t[r],e[r]))return!1;return!0}return t&&t.equals?t.equals(e):e&&e.equals?e.equals(t):"number"==typeof t&&"number"==typeof e&&Math.abs(t-e)<=He.EPSILON*Math.max(1,Math.abs(t),Math.abs(e))}finally{He.EPSILON=n}}class xe extends Array{clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){for(let r=0;r<this.ELEMENTS;++r)this[r]=t[r+e];return this.check()}toArray(t=[],e=0){for(let r=0;r<this.ELEMENTS;++r)t[e+r]=this[r];return t}toObject(t){return t}from(t){return Array.isArray(t)?this.copy(t):this.fromObject(t)}to(t){return t===this?this:Le(t)?this.toArray(t):this.toObject(t)}toTarget(t){return t?this.to(t):this}toFloat32Array(){return new Float32Array(this)}toString(){return this.formatString(He)}formatString(t){let e="";for(let r=0;r<this.ELEMENTS;++r)e+=(r>0?", ":"")+Ue(this[r],t);return`${t.printTypes?this.constructor.name:""}[${e}]`}equals(t){if(!t||this.length!==t.length)return!1;for(let e=0;e<this.ELEMENTS;++e)if(!ve(this[e],t[e]))return!1;return!0}exactEquals(t){if(!t||this.length!==t.length)return!1;for(let e=0;e<this.ELEMENTS;++e)if(this[e]!==t[e])return!1;return!0}negate(){for(let t=0;t<this.ELEMENTS;++t)this[t]=-this[t];return this.check()}lerp(t,e,r){if(void 0===r)return this.lerp(this,t,e);for(let n=0;n<this.ELEMENTS;++n){const s=t[n],o="number"==typeof e?e:e[n];this[n]=s+r*(o-s)}return this.check()}min(t){for(let e=0;e<this.ELEMENTS;++e)this[e]=Math.min(t[e],this[e]);return this.check()}max(t){for(let e=0;e<this.ELEMENTS;++e)this[e]=Math.max(t[e],this[e]);return this.check()}clamp(t,e){for(let r=0;r<this.ELEMENTS;++r)this[r]=Math.min(Math.max(this[r],t[r]),e[r]);return this.check()}add(...t){for(const e of t)for(let t=0;t<this.ELEMENTS;++t)this[t]+=e[t];return this.check()}subtract(...t){for(const e of t)for(let t=0;t<this.ELEMENTS;++t)this[t]-=e[t];return this.check()}scale(t){if("number"==typeof t)for(let e=0;e<this.ELEMENTS;++e)this[e]*=t;else for(let e=0;e<this.ELEMENTS&&e<t.length;++e)this[e]*=t[e];return this.check()}multiplyByScalar(t){for(let e=0;e<this.ELEMENTS;++e)this[e]*=t;return this.check()}check(){if(He.debug&&!this.validate())throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);return this}validate(){let t=this.length===this.ELEMENTS;for(let e=0;e<this.ELEMENTS;++e)t=t&&Number.isFinite(this[e]);return t}sub(t){return this.subtract(t)}setScalar(t){for(let e=0;e<this.ELEMENTS;++e)this[e]=t;return this.check()}addScalar(t){for(let e=0;e<this.ELEMENTS;++e)this[e]+=t;return this.check()}subScalar(t){return this.addScalar(-t)}multiplyScalar(t){for(let e=0;e<this.ELEMENTS;++e)this[e]*=t;return this.check()}divideScalar(t){return this.multiplyByScalar(1/t)}clampScalar(t,e){for(let r=0;r<this.ELEMENTS;++r)this[r]=Math.min(Math.max(this[r],t),e);return this.check()}get elements(){return this}}function je(t){if(!Number.isFinite(t))throw new Error(`Invalid number ${JSON.stringify(t)}`);return t}function Ke(t,e){if(!t)throw new Error(`math.gl assertion ${e}`)}class Se extends xe{get x(){return this[0]}set x(t){this[0]=je(t)}get y(){return this[1]}set y(t){this[1]=je(t)}len(){return Math.sqrt(this.lengthSquared())}magnitude(){return this.len()}lengthSquared(){let t=0;for(let e=0;e<this.ELEMENTS;++e)t+=this[e]*this[e];return t}magnitudeSquared(){return this.lengthSquared()}distance(t){return Math.sqrt(this.distanceSquared(t))}distanceSquared(t){let e=0;for(let r=0;r<this.ELEMENTS;++r){const n=this[r]-t[r];e+=n*n}return je(e)}dot(t){let e=0;for(let r=0;r<this.ELEMENTS;++r)e+=this[r]*t[r];return je(e)}normalize(){const t=this.magnitude();if(0!==t)for(let e=0;e<this.ELEMENTS;++e)this[e]/=t;return this.check()}multiply(...t){for(const e of t)for(let t=0;t<this.ELEMENTS;++t)this[t]*=e[t];return this.check()}divide(...t){for(const e of t)for(let t=0;t<this.ELEMENTS;++t)this[t]/=e[t];return this.check()}lengthSq(){return this.lengthSquared()}distanceTo(t){return this.distance(t)}distanceToSquared(t){return this.distanceSquared(t)}getComponent(t){return Ke(t>=0&&t<this.ELEMENTS,"index is out of range"),je(this[t])}setComponent(t,e){return Ke(t>=0&&t<this.ELEMENTS,"index is out of range"),this[t]=e,this.check()}addVectors(t,e){return this.copy(t).add(e)}subVectors(t,e){return this.copy(t).subtract(e)}multiplyVectors(t,e){return this.copy(t).multiply(e)}addScaledVector(t,e){return this.add(new this.constructor(t).multiplyScalar(e))}}let Ne="undefined"!=typeof Float32Array?Float32Array:Array;function _e(t,e,r){const n=e[0],s=e[1],o=e[2];return t[0]=n*r[0]+s*r[3]+o*r[6],t[1]=n*r[1]+s*r[4]+o*r[7],t[2]=n*r[2]+s*r[5]+o*r[8],t}Math.random,Math.PI,function(){const t=new Ne(3);Ne!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0)}();const Qe=[0,0,0];let Pe;class ke extends Se{static get ZERO(){return Pe||(Pe=new ke(0,0,0),Object.freeze(Pe)),Pe}constructor(t=0,e=0,r=0){super(-0,-0,-0),1===arguments.length&&Le(t)?this.copy(t):(He.debug&&(je(t),je(e),je(r)),this[0]=t,this[1]=e,this[2]=r)}set(t,e,r){return this[0]=t,this[1]=e,this[2]=r,this.check()}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.check()}fromObject(t){return He.debug&&(je(t.x),je(t.y),je(t.z)),this[0]=t.x,this[1]=t.y,this[2]=t.z,this.check()}toObject(t){return t.x=this[0],t.y=this[1],t.z=this[2],t}get ELEMENTS(){return 3}get z(){return this[2]}set z(t){this[2]=je(t)}angle(t){return function(t,e){const r=t[0],n=t[1],s=t[2],o=e[0],i=e[1],a=e[2],c=Math.sqrt((r*r+n*n+s*s)*(o*o+i*i+a*a)),u=c&&function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}(t,e)/c;return Math.acos(Math.min(Math.max(u,-1),1))}(this,t)}cross(t){return function(t,e,r){const n=e[0],s=e[1],o=e[2],i=r[0],a=r[1],c=r[2];t[0]=s*c-o*a,t[1]=o*i-n*c,t[2]=n*a-s*i}(this,this,t),this.check()}rotateX({radians:t,origin:e=Qe}){return function(t,e,r,n){const s=[],o=[];s[0]=e[0]-r[0],s[1]=e[1]-r[1],s[2]=e[2]-r[2],o[0]=s[0],o[1]=s[1]*Math.cos(n)-s[2]*Math.sin(n),o[2]=s[1]*Math.sin(n)+s[2]*Math.cos(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2]}(this,this,e,t),this.check()}rotateY({radians:t,origin:e=Qe}){return function(t,e,r,n){const s=[],o=[];s[0]=e[0]-r[0],s[1]=e[1]-r[1],s[2]=e[2]-r[2],o[0]=s[2]*Math.sin(n)+s[0]*Math.cos(n),o[1]=s[1],o[2]=s[2]*Math.cos(n)-s[0]*Math.sin(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2]}(this,this,e,t),this.check()}rotateZ({radians:t,origin:e=Qe}){return function(t,e,r,n){const s=[],o=[];s[0]=e[0]-r[0],s[1]=e[1]-r[1],s[2]=e[2]-r[2],o[0]=s[0]*Math.cos(n)-s[1]*Math.sin(n),o[1]=s[0]*Math.sin(n)+s[1]*Math.cos(n),o[2]=s[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2]}(this,this,e,t),this.check()}transform(t){return this.transformAsPoint(t)}transformAsPoint(t){return function(t,e,r){const n=e[0],s=e[1],o=e[2];let i=r[3]*n+r[7]*s+r[11]*o+r[15];i=i||1,t[0]=(r[0]*n+r[4]*s+r[8]*o+r[12])/i,t[1]=(r[1]*n+r[5]*s+r[9]*o+r[13])/i,t[2]=(r[2]*n+r[6]*s+r[10]*o+r[14])/i}(this,this,t),this.check()}transformAsVector(t){return function(t,e,r){const n=e[0],s=e[1],o=e[2],i=r[3]*n+r[7]*s+r[11]*o||1;t[0]=(r[0]*n+r[4]*s+r[8]*o)/i,t[1]=(r[1]*n+r[5]*s+r[9]*o)/i,t[2]=(r[2]*n+r[6]*s+r[10]*o)/i}(this,this,t),this.check()}transformByMatrix3(t){return _e(this,this,t),this.check()}transformByMatrix2(t){return function(t,e,r){const n=e[0],s=e[1];t[0]=r[0]*n+r[2]*s,t[1]=r[1]*n+r[3]*s,t[2]=e[2]}(this,this,t),this.check()}transformByQuaternion(t){return function(t,e,r){const n=r[0],s=r[1],o=r[2],i=r[3],a=e[0],c=e[1],u=e[2];let A=s*u-o*c,f=o*a-n*u,B=n*c-s*a,l=s*B-o*f,h=o*A-n*B,d=n*f-s*A;const C=2*i;A*=C,f*=C,B*=C,l*=2,h*=2,d*=2,t[0]=a+A+l,t[1]=c+f+h,t[2]=u+B+d}(this,this,t),this.check()}}class Xe extends xe{toString(){let t="[";if(He.printRowMajor){t+="row-major:";for(let e=0;e<this.RANK;++e)for(let r=0;r<this.RANK;++r)t+=` ${this[r*this.RANK+e]}`}else{t+="column-major:";for(let e=0;e<this.ELEMENTS;++e)t+=` ${this[e]}`}return t+="]",t}getElementIndex(t,e){return e*this.RANK+t}getElement(t,e){return this[e*this.RANK+t]}setElement(t,e,r){return this[e*this.RANK+t]=je(r),this}getColumn(t,e=new Array(this.RANK).fill(-0)){const r=t*this.RANK;for(let t=0;t<this.RANK;++t)e[t]=this[r+t];return e}setColumn(t,e){const r=t*this.RANK;for(let t=0;t<this.RANK;++t)this[r+t]=e[t];return this}}function Ye(t,e,r){const n=e[0],s=e[1],o=e[2],i=e[3],a=e[4],c=e[5],u=e[6],A=e[7],f=e[8],B=r[0],l=r[1],h=r[2],d=r[3],C=r[4],g=r[5],m=r[6],b=r[7],y=r[8];return t[0]=B*n+l*i+h*u,t[1]=B*s+l*a+h*A,t[2]=B*o+l*c+h*f,t[3]=d*n+C*i+g*u,t[4]=d*s+C*a+g*A,t[5]=d*o+C*c+g*f,t[6]=m*n+b*i+y*u,t[7]=m*s+b*a+y*A,t[8]=m*o+b*c+y*f,t}function We(t,e,r){const n=r[0],s=r[1];return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}var Ve;!function(){const t=new Ne(2);Ne!=Float32Array&&(t[0]=0,t[1]=0)}(),function(t){t[t.COL0ROW0=0]="COL0ROW0",t[t.COL0ROW1=1]="COL0ROW1",t[t.COL0ROW2=2]="COL0ROW2",t[t.COL1ROW0=3]="COL1ROW0",t[t.COL1ROW1=4]="COL1ROW1",t[t.COL1ROW2=5]="COL1ROW2",t[t.COL2ROW0=6]="COL2ROW0",t[t.COL2ROW1=7]="COL2ROW1",t[t.COL2ROW2=8]="COL2ROW2"}(Ve||(Ve={}));const Ze=Object.freeze([1,0,0,0,1,0,0,0,1]);class qe extends Xe{static get IDENTITY(){return ze||(ze=new qe,Object.freeze(ze)),ze}static get ZERO(){return $e||($e=new qe([0,0,0,0,0,0,0,0,0]),Object.freeze($e)),$e}get ELEMENTS(){return 9}get RANK(){return 3}get INDICES(){return Ve}constructor(t,...e){super(-0,-0,-0,-0,-0,-0,-0,-0,-0),1===arguments.length&&Array.isArray(t)?this.copy(t):e.length>0?this.copy([t,...e]):this.identity()}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this[3]=t[3],this[4]=t[4],this[5]=t[5],this[6]=t[6],this[7]=t[7],this[8]=t[8],this.check()}identity(){return this.copy(Ze)}fromObject(t){return this.check()}fromQuaternion(t){return function(t,e){const r=e[0],n=e[1],s=e[2],o=e[3],i=r+r,a=n+n,c=s+s,u=r*i,A=n*i,f=n*a,B=s*i,l=s*a,h=s*c,d=o*i,C=o*a,g=o*c;t[0]=1-f-h,t[3]=A-g,t[6]=B+C,t[1]=A+g,t[4]=1-u-h,t[7]=l-d,t[2]=B-C,t[5]=l+d,t[8]=1-u-f}(this,t),this.check()}set(t,e,r,n,s,o,i,a,c){return this[0]=t,this[1]=e,this[2]=r,this[3]=n,this[4]=s,this[5]=o,this[6]=i,this[7]=a,this[8]=c,this.check()}setRowMajor(t,e,r,n,s,o,i,a,c){return this[0]=t,this[1]=n,this[2]=i,this[3]=e,this[4]=s,this[5]=a,this[6]=r,this[7]=o,this[8]=c,this.check()}determinant(){return function(t){const e=t[0],r=t[1],n=t[2],s=t[3],o=t[4],i=t[5],a=t[6],c=t[7],u=t[8];return e*(u*o-i*c)+r*(-u*s+i*a)+n*(c*s-o*a)}(this)}transpose(){return function(t,e){if(t===e){const r=e[1],n=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=n,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8]}(this,this),this.check()}invert(){return function(t,e){const r=e[0],n=e[1],s=e[2],o=e[3],i=e[4],a=e[5],c=e[6],u=e[7],A=e[8],f=A*i-a*u,B=-A*o+a*c,l=u*o-i*c;let h=r*f+n*B+s*l;h&&(h=1/h,t[0]=f*h,t[1]=(-A*n+s*u)*h,t[2]=(a*n-s*i)*h,t[3]=B*h,t[4]=(A*r-s*c)*h,t[5]=(-a*r+s*o)*h,t[6]=l*h,t[7]=(-u*r+n*c)*h,t[8]=(i*r-n*o)*h)}(this,this),this.check()}multiplyLeft(t){return Ye(this,t,this),this.check()}multiplyRight(t){return Ye(this,this,t),this.check()}rotate(t){return function(t,e,r){const n=e[0],s=e[1],o=e[2],i=e[3],a=e[4],c=e[5],u=e[6],A=e[7],f=e[8],B=Math.sin(r),l=Math.cos(r);t[0]=l*n+B*i,t[1]=l*s+B*a,t[2]=l*o+B*c,t[3]=l*i-B*n,t[4]=l*a-B*s,t[5]=l*c-B*o,t[6]=u,t[7]=A,t[8]=f}(this,this,t),this.check()}scale(t){return Array.isArray(t)?We(this,this,t):We(this,this,[t,t]),this.check()}translate(t){return function(t,e,r){const n=e[0],s=e[1],o=e[2],i=e[3],a=e[4],c=e[5],u=e[6],A=e[7],f=e[8],B=r[0],l=r[1];t[0]=n,t[1]=s,t[2]=o,t[3]=i,t[4]=a,t[5]=c,t[6]=B*n+l*i+u,t[7]=B*s+l*a+A,t[8]=B*o+l*c+f}(this,this,t),this.check()}transform(t,e){let r;switch(t.length){case 2:r=function(t,e,r){const n=e[0],s=e[1];return t[0]=r[0]*n+r[3]*s+r[6],t[1]=r[1]*n+r[4]*s+r[7],t}(e||[-0,-0],t,this);break;case 3:r=_e(e||[-0,-0,-0],t,this);break;case 4:r=function(t,e,r){const n=e[0],s=e[1],o=e[2];return t[0]=r[0]*n+r[3]*s+r[6]*o,t[1]=r[1]*n+r[4]*s+r[7]*o,t[2]=r[2]*n+r[5]*s+r[8]*o,t[3]=e[3],t}(e||[-0,-0,-0,-0],t,this);break;default:throw new Error("Illegal vector")}return function(t,e,r=""){if(He.debug&&!function(t,e){if(t.length!==e)return!1;for(let e=0;e<t.length;++e)if(!Number.isFinite(t[e]))return!1;return!0}(t,e))throw new Error(`math.gl: ${r} some fields set to invalid numbers'`)}(r,t.length),r}transformVector(t,e){return this.transform(t,e)}transformVector2(t,e){return this.transform(t,e)}transformVector3(t,e){return this.transform(t,e)}}let $e,ze=null;const tr="KHR_texture_transform",er=tr,rr=new ke,nr=new qe,sr=new qe;async function or(t,e){if(!new yt(t).hasExtension(tr)||!e.gltf?.loadBuffers)return;const r=t.json.materials||[];for(let e=0;e<r.length;e++)ir(e,t)}function ir(t,e){const r=e.json.materials?.[t],n=[r?.pbrMetallicRoughness?.baseColorTexture,r?.emissiveTexture,r?.normalTexture,r?.occlusionTexture,r?.pbrMetallicRoughness?.metallicRoughnessTexture],s=[];for(const r of n)r&&r?.extensions?.[tr]&&ar(e,t,r,s)}function ar(t,e,r,n){const s=function(t,e){const r=t.extensions?.[tr],{texCoord:n=0}=t,{texCoord:s=n}=r;if(!(-1!==e.findIndex(([t,e])=>t===n&&e===s))){const o=function(t){const{offset:e=[0,0],rotation:r=0,scale:n=[1,1]}=t,s=(new qe).set(1,0,0,0,1,0,e[0],e[1],1),o=nr.set(Math.cos(r),Math.sin(r),0,-Math.sin(r),Math.cos(r),0,0,0,1),i=sr.set(n[0],0,0,0,n[1],0,0,0,1);return s.multiplyRight(o).multiplyRight(i)}(r);return n!==s&&(t.texCoord=s),e.push([n,s]),{originalTexCoord:n,texCoord:s,matrix:o}}return null}(r,n);if(!s)return;const o=t.json.meshes||[];for(const r of o)for(const n of r.primitives){const r=n.material;Number.isFinite(r)&&e===r&&cr(t,n,s)}}function cr(t,e,r){const{originalTexCoord:n,texCoord:s,matrix:o}=r,i=e.attributes[`TEXCOORD_${n}`];if(Number.isFinite(i)){const r=t.json.accessors?.[i];if(r&&r.bufferView){const i=t.json.bufferViews?.[r.bufferView];if(i){const{arrayBuffer:a,byteOffset:c}=t.buffers[i.buffer],u=(c||0)+(r.byteOffset||0)+(i.byteOffset||0),{ArrayType:A,length:f}=bt(r,i),B=At[r.componentType],l=ut[r.type],h=i.byteStride||B*l,d=new Float32Array(f);for(let t=0;t<r.count;t++){const e=new A(a,u+t*h,2);rr.set(e[0],e[1],1),rr.transformByMatrix3(o),d.set([rr[0],rr[1]],t*l)}n===s?function(t,e,r,n){t.componentType=5126,r.push({arrayBuffer:n.buffer,byteOffset:0,byteLength:n.buffer.byteLength}),e.buffer=r.length-1,e.byteLength=n.buffer.byteLength,e.byteOffset=0,delete e.byteStride}(r,i,t.buffers,d):function(t,e,r,n,s){n.buffers.push({arrayBuffer:s.buffer,byteOffset:0,byteLength:s.buffer.byteLength});const o=n.json.bufferViews;if(!o)return;o.push({buffer:n.buffers.length-1,byteLength:s.buffer.byteLength,byteOffset:0});const i=n.json.accessors;i&&(i.push({bufferView:o?.length-1,byteOffset:0,componentType:5126,count:e.count,type:"VEC2"}),r.attributes[`TEXCOORD_${t}`]=i.length-1)}(s,r,e,t,d)}}}}const ur="KHR_lights_punctual",Ar=ur;async function fr(t){const e=new yt(t),{json:r}=e,n=e.getExtension(ur);n&&(e.json.lights=n.lights,e.removeExtension(ur));for(const t of r.nodes||[]){const r=e.getObjectExtension(t,ur);r&&(t.light=r.light),e.removeObjectExtension(t,ur)}}async function Br(t){const e=new yt(t),{json:r}=e;if(r.lights){const t=e.addExtension(ur);et(!t.lights),t.lights=r.lights,delete r.lights}if(e.json.lights){for(const t of e.json.lights){const r=t.node;e.addObjectExtension(r,ur,t)}delete e.json.lights}}const lr="KHR_materials_unlit",hr=lr;async function dr(t){const e=new yt(t),{json:r}=e;for(const t of r.materials||[])t.extensions&&t.extensions.KHR_materials_unlit&&(t.unlit=!0),e.removeObjectExtension(t,lr);e.removeExtension(lr)}function Cr(t){const e=new yt(t),{json:r}=e;if(e.materials)for(const t of r.materials||[])t.unlit&&(delete t.unlit,e.addObjectExtension(t,lr,{}),e.addExtension(lr))}const gr="KHR_techniques_webgl",mr=gr;async function br(t){const e=new yt(t),{json:r}=e,n=e.getExtension(gr);if(n){const t=function(t,e){const{programs:r=[],shaders:n=[],techniques:s=[]}=t,o=new TextDecoder;return n.forEach(t=>{if(!Number.isFinite(t.bufferView))throw new Error("KHR_techniques_webgl: no shader code");t.code=o.decode(e.getTypedArrayForBufferView(t.bufferView))}),r.forEach(t=>{t.fragmentShader=n[t.fragmentShader],t.vertexShader=n[t.vertexShader]}),s.forEach(t=>{t.program=r[t.program]}),s}(n,e);for(const n of r.materials||[]){const r=e.getObjectExtension(n,gr);r&&(n.technique=Object.assign({},r,t[r.technique]),n.technique.values=pr(n.technique,e)),e.removeObjectExtension(n,gr)}e.removeExtension(gr)}}async function yr(t,e){}function pr(t,e){const r=Object.assign({},t.values);return Object.keys(t.uniforms||{}).forEach(e=>{t.uniforms[e].value&&!(e in r)&&(r[e]=t.uniforms[e].value)}),Object.keys(r).forEach(t=>{"object"==typeof r[t]&&void 0!==r[t].index&&(r[t].texture=e.getTexture(r[t].index))}),r}const Er="EXT_feature_metadata",Fr=Er;async function Gr(t,e){!function(t,e){if(!e.gltf?.loadBuffers)return;const r=t.getExtension(Er);r&&(e.gltf?.loadImages&&function(t,e){const r=e.schema;if(!r)return;const n=r.classes,{featureTextures:s}=e;if(n&&s)for(const e in n){const r=n[e],o=Mr(s,e);o&&wr(t,o,r)}}(t,r),function(t,e){const r=e.schema;if(!r)return;const n=r.classes,s=e.featureTables;if(n&&s)for(const e in n){const n=Ir(s,e);n&&Dr(t,r,n)}}(t,r))}(new yt(t),e)}function Ir(t,e){for(const r in t){const n=t[r];if(n.class===e)return n}return null}function Mr(t,e){for(const r in t){const n=t[r];if(n.class===e)return n}return null}function Dr(t,e,r){if(!r.class)return;const n=e.classes?.[r.class];if(!n)throw new Error(`Incorrect data in the EXT_structural_metadata extension: no schema class with name ${r.class}`);const s=r.count;for(const e in n.properties){const o=n.properties[e],i=r.properties?.[e];if(i){const e=Jr(t,0,o,s,i);i.data=e}}}function wr(t,e,r){const n=e.class;for(const s in r.properties){const r=e?.properties?.[s];if(r){const e=Tr(t,r,n);r.data=e}}}function Jr(t,e,r,n,s){let o=[];const i=s.bufferView,a=t.getTypedArrayForBufferView(i),c=function(t,e,r,n){return"ARRAY"===e.type&&void 0===e.componentCount&&void 0!==r.arrayOffsetBufferView?Mt(t,r.arrayOffsetBufferView,r.offsetType||"UINT32",n):null}(t,r,s,n),u=function(t,e,r,n){return void 0!==r.stringOffsetBufferView?Mt(t,r.stringOffsetBufferView,r.offsetType||"UINT32",n):null}(t,0,s,n);return"STRING"===r.type||"STRING"===r.componentType?o=Ht(n,a,c,u):function(t){const e=["UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FLOAT32","FLOAT64"];return e.includes(t.type)||void 0!==t.componentType&&e.includes(t.componentType)}(r)&&(o=function(t,e,r,n){const s="ARRAY"===t.type,o=t.componentCount,i="SCALAR",a=t.componentType||t.type,c=It(i,a),u=Dt(r,i,a,r.byteLength/c);return s?n?Ot(u,e,n,r.length,c):o?Rt(u,e,o):[]:u}(r,n,a,c)),o}function Tr(t,e,r){const n=t.gltf.json;if(!n.meshes)return[];const s=[];for(const o of n.meshes)for(const n of o.primitives)Or(t,r,e,s,n);return s}function Or(t,e,r,n,s){const o=wt(t,{channels:r.channels,...r.texture},s);o&&Jt(t,e,o,n,s)}const Rr=[s,n,o,i,a,c,A,f,B,u,l];function Hr(t,e){const r=e?.gltf?.excludeExtensions||{};return!(t in r&&!r[t])}const Ur="KHR_binary_glTF",Lr={accessors:"accessor",animations:"animation",buffers:"buffer",bufferViews:"bufferView",images:"image",materials:"material",meshes:"mesh",nodes:"node",samplers:"sampler",scenes:"scene",skins:"skin",textures:"texture"},vr={accessor:"accessors",animations:"animation",buffer:"buffers",bufferView:"bufferViews",image:"images",material:"materials",mesh:"meshes",node:"nodes",sampler:"samplers",scene:"scenes",skin:"skins",texture:"textures"};class xr{idToIndexMap={animations:{},accessors:{},buffers:{},bufferViews:{},images:{},materials:{},meshes:{},nodes:{},samplers:{},scenes:{},skins:{},textures:{}};json;normalize(t,e){this.json=t.json;const r=t.json;switch(r.asset&&r.asset.version){case"2.0":return;case void 0:case"1.0":break;default:return void console.warn(`glTF: Unknown version ${r.asset.version}`)}if(!e.normalize)throw new Error("glTF v1 is not supported.");console.warn("Converting glTF v1 to glTF v2 format. This is experimental and may fail."),this._addAsset(r),this._convertTopLevelObjectsToArrays(r),function(t){const e=new yt(t),{json:r}=e;for(const t of r.images||[]){const r=e.getObjectExtension(t,Ur);r&&Object.assign(t,r),e.removeObjectExtension(t,Ur)}r.buffers&&r.buffers[0]&&delete r.buffers[0].uri,e.removeExtension(Ur)}(t),this._convertObjectIdsToArrayIndices(r),this._updateObjects(r),this._updateMaterial(r)}_addAsset(t){t.asset=t.asset||{},t.asset.version="2.0",t.asset.generator=t.asset.generator||"Normalized to glTF 2.0 by loaders.gl"}_convertTopLevelObjectsToArrays(t){for(const e in Lr)this._convertTopLevelObjectToArray(t,e)}_convertTopLevelObjectToArray(t,e){const r=t[e];if(r&&!Array.isArray(r)){t[e]=[];for(const n in r){const s=r[n];s.id=s.id||n;const o=t[e].length;t[e].push(s),this.idToIndexMap[e][n]=o}}}_convertObjectIdsToArrayIndices(t){for(const e in Lr)this._convertIdsToIndices(t,e);"scene"in t&&(t.scene=this._convertIdToIndex(t.scene,"scene"));for(const e of t.textures)this._convertTextureIds(e);for(const e of t.meshes)this._convertMeshIds(e);for(const e of t.nodes)this._convertNodeIds(e);for(const e of t.scenes)this._convertSceneIds(e)}_convertTextureIds(t){t.source&&(t.source=this._convertIdToIndex(t.source,"image"))}_convertMeshIds(t){for(const e of t.primitives){const{attributes:t,indices:r,material:n}=e;for(const e in t)t[e]=this._convertIdToIndex(t[e],"accessor");r&&(e.indices=this._convertIdToIndex(r,"accessor")),n&&(e.material=this._convertIdToIndex(n,"material"))}}_convertNodeIds(t){t.children&&(t.children=t.children.map(t=>this._convertIdToIndex(t,"node"))),t.meshes&&(t.meshes=t.meshes.map(t=>this._convertIdToIndex(t,"mesh")))}_convertSceneIds(t){t.nodes&&(t.nodes=t.nodes.map(t=>this._convertIdToIndex(t,"node")))}_convertIdsToIndices(t,e){t[e]||(console.warn(`gltf v1: json doesn't contain attribute ${e}`),t[e]=[]);for(const r of t[e])for(const t in r){const e=r[t],n=this._convertIdToIndex(e,t);r[t]=n}}_convertIdToIndex(t,e){const r=vr[e];if(r in this.idToIndexMap){const n=this.idToIndexMap[r][t];if(!Number.isFinite(n))throw new Error(`gltf v1: failed to resolve ${e} with id ${t}`);return n}return t}_updateObjects(t){for(const t of this.json.buffers)delete t.type}_updateMaterial(t){for(const e of t.materials){e.pbrMetallicRoughness={baseColorFactor:[1,1,1,1],metallicFactor:1,roughnessFactor:1};const r=e.values?.tex||e.values?.texture2d_0||e.values?.diffuseTex,n=t.textures.findIndex(t=>t.id===r);-1!==n&&(e.pbrMetallicRoughness.baseColorTexture={index:n})}}}async function jr(t,e,r=0,n,s){return function(t,e,r,n){if(n.uri&&(t.baseUri=n.uri),e instanceof ArrayBuffer&&!function(t,e=0,r={}){const n=new DataView(t),{magic:s=ot}=r,o=n.getUint32(e,!1);return o===s||o===ot}(e,r,n)&&(e=(new TextDecoder).decode(e)),"string"==typeof e)t.json=function(t){try{return JSON.parse(t)}catch(e){throw new Error(`Failed to parse JSON from data starting with "${function(t,e=5){return"string"==typeof t?t.slice(0,e):ArrayBuffer.isView(t)?h(t.buffer,t.byteOffset,e):t instanceof ArrayBuffer?h(t,0,e):""}(t)}"`)}}(e);else if(e instanceof ArrayBuffer){const s={};r=function(t,e,r=0){const n=new DataView(e),s=function(t,e=0){return`${String.fromCharCode(t.getUint8(e+0))}${String.fromCharCode(t.getUint8(e+1))}${String.fromCharCode(t.getUint8(e+2))}${String.fromCharCode(t.getUint8(e+3))}`}(n,r+0),o=n.getUint32(r+4,st),i=n.getUint32(r+8,st);switch(Object.assign(t,{header:{byteOffset:r,byteLength:i,hasBinChunk:!1},type:s,version:o,json:{},binChunks:[]}),r+=12,t.version){case 1:return function(t,e,r){(0,g.v)(t.header.byteLength>20);const n=e.getUint32(r+0,st),s=e.getUint32(r+4,st);return r+=8,(0,g.v)(0===s),it(t,e,r,n),(r+=n)+at(t,e,r,t.header.byteLength)}(t,n,r);case 2:return function(t,e,r){return(0,g.v)(t.header.byteLength>20),function(t,e,r,n){for(;r+8<=t.header.byteLength;){const s=e.getUint32(r+0,st),o=e.getUint32(r+4,st);switch(r+=8,o){case 1313821514:it(t,e,r,s);break;case 5130562:at(t,e,r,s);break;case 0:n.strict||it(t,e,r,s);break;case 1:n.strict||at(t,e,r,s)}r+=rt(s,4)}}(t,e,r,{}),r+t.header.byteLength}(t,n,r);default:throw new Error(`Invalid GLB version ${t.version}. Only supports version 1 and 2.`)}}(s,e,r,n.glb),et("glTF"===s.type,`Invalid GLB magic string ${s.type}`),t._glb=s,t.json=s.json}else et(!1,"GLTF: must be ArrayBuffer or string");const s=t.json.buffers||[];if(t.buffers=new Array(s.length).fill(null),t._glb&&t._glb.header.hasBinChunk){const{binChunks:e}=t._glb;t.buffers[0]={arrayBuffer:e[0].arrayBuffer,byteOffset:e[0].byteOffset,byteLength:e[0].byteLength}}const o=t.json.images||[];t.images=new Array(o.length).fill({})}(t,e,r,n),function(t,e={}){(new xr).normalize(t,e)}(t,{normalize:n?.gltf?.normalize}),function(t,e={},r){const n=Rr.filter(t=>Hr(t.name,e));for(const s of n)s.preprocess?.(t,e,r)}(t,n,s),n?.gltf?.loadBuffers&&t.json.buffers&&await async function(t,e,r){const n=t.json.buffers||[];for(let s=0;s<n.length;++s){const o=n[s];if(o.uri){const{fetch:n}=r;et(n);const i=ct(o.uri,e),a=await(r?.fetch?.(i)),c=await(a?.arrayBuffer?.());t.buffers[s]={arrayBuffer:c,byteOffset:0,byteLength:c.byteLength},delete o.uri}else null===t.buffers[s]&&(t.buffers[s]={arrayBuffer:new ArrayBuffer(o.byteLength),byteOffset:0,byteLength:o.byteLength})}}(t,n,s),n?.gltf?.loadImages&&await async function(t,e,r){const n=function(t){const e=new Set,r=t.json.textures||[];for(const t of r)void 0!==t.source&&e.add(t.source);return Array.from(e).sort()}(t),s=t.json.images||[],o=[];for(const i of n)o.push(Kr(t,s[i],i,e,r));return await Promise.all(o)}(t,n,s),await async function(t,e={},r){const n=Rr.filter(t=>Hr(t.name,e));for(const s of n)await(s.decode?.(t,e,r))}(t,n,s),t}async function Kr(t,e,r,n,s){let o;if(e.uri&&!e.hasOwnProperty("bufferView")){const t=ct(e.uri,n),{fetch:r}=s,i=await r(t);o=await i.arrayBuffer(),e.bufferView={data:o}}if(Number.isFinite(e.bufferView)){const r=function(t,e,r){const n=t.bufferViews[r];et(n);const s=e[n.buffer];et(s);const o=(n.byteOffset||0)+s.byteOffset;return new Uint8Array(s.arrayBuffer,o,n.byteLength)}(t.json,t.buffers,e.bufferView);o=(0,d._m)(r.buffer,r.byteOffset,r.byteLength)}et(o,"glTF image has no data");let i=await C(o,[x,tt],{...n,mimeType:e.mimeType,basis:n.basis||{format:z()}},s);i&&i[0]&&(i={compressed:!0,mipmaps:!1,width:i[0].width,height:i[0].height,data:i[0]}),t.images=t.images||[],t.images[r]=i}const Sr={dataType:null,batchType:null,name:"glTF",id:"gltf",module:"gltf",version:"4.3.3",extensions:["gltf","glb"],mimeTypes:["model/gltf+json","model/gltf-binary"],text:!0,binary:!0,tests:["glTF"],parse:async function(t,e={},r){(e={...Sr.options,...e}).gltf={...Sr.options.gltf,...e.gltf};const{byteOffset:n=0}=e;return await jr({},t,n,e,r)},options:{gltf:{normalize:!0,loadBuffers:!0,loadImages:!0,decompressMeshes:!0},log:console}}},2391:(t,e,r)=>{r.d(e,{I0:()=>i,lw:()=>o,vt:()=>s});var n=r(6561);function s(){var t=new n.tb(9);return n.tb!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function o(t,e,r){var n=e[0],s=e[1],o=e[2],i=e[3],a=e[4],c=e[5],u=e[6],A=e[7],f=e[8],B=r[0],l=r[1],h=r[2],d=r[3],C=r[4],g=r[5],m=r[6],b=r[7],y=r[8];return t[0]=B*n+l*i+h*u,t[1]=B*s+l*a+h*A,t[2]=B*o+l*c+h*f,t[3]=d*n+C*i+g*u,t[4]=d*s+C*a+g*A,t[5]=d*o+C*c+g*f,t[6]=m*n+b*i+y*u,t[7]=m*s+b*a+y*A,t[8]=m*o+b*c+y*f,t}function i(t,e){var r=e[0],n=e[1],s=e[2],o=e[3],i=r+r,a=n+n,c=s+s,u=r*i,A=n*i,f=n*a,B=s*i,l=s*a,h=s*c,d=o*i,C=o*a,g=o*c;return t[0]=1-f-h,t[3]=A-g,t[6]=B+C,t[1]=A+g,t[4]=1-u-h,t[7]=l-d,t[2]=B-C,t[5]=l+d,t[8]=1-u-f,t}},2672:(t,e,r)=>{function n(t,e,r){var n=e[0],s=e[1],o=e[2],i=e[3],a=r[0],c=r[1],u=r[2],A=r[3];return t[0]=n*a+o*c,t[1]=s*a+i*c,t[2]=n*u+o*A,t[3]=s*u+i*A,t}r.d(e,{lw:()=>n})},3605:(t,e,r)=>{function n(t,e){if(!t)throw new Error(e||"loaders.gl assertion failed.")}r.d(e,{v:()=>n})},3862:(t,e,r)=>{function n(t,e){var r=e[0],n=e[1],s=e[2],o=e[3],i=e[4],a=e[5],c=e[6],u=e[7],A=e[8],f=e[9],B=e[10],l=e[11],h=e[12],d=e[13],C=e[14],g=e[15],m=r*a-n*i,b=r*c-s*i,y=r*u-o*i,p=n*c-s*a,E=n*u-o*a,F=s*u-o*c,G=A*d-f*h,I=A*C-B*h,M=A*g-l*h,D=f*C-B*d,w=f*g-l*d,J=B*g-l*C,T=m*J-b*w+y*D+p*M-E*I+F*G;return T?(T=1/T,t[0]=(a*J-c*w+u*D)*T,t[1]=(s*w-n*J-o*D)*T,t[2]=(d*F-C*E+g*p)*T,t[3]=(B*E-f*F-l*p)*T,t[4]=(c*M-i*J-u*I)*T,t[5]=(r*J-s*M+o*I)*T,t[6]=(C*y-h*F-g*b)*T,t[7]=(A*F-B*y+l*b)*T,t[8]=(i*w-a*M+u*G)*T,t[9]=(n*M-r*w-o*G)*T,t[10]=(h*E-d*y+g*m)*T,t[11]=(f*y-A*E-l*m)*T,t[12]=(a*I-i*D-c*G)*T,t[13]=(r*D-n*I+s*G)*T,t[14]=(d*b-h*p-C*m)*T,t[15]=(A*p-f*b+B*m)*T,t):null}function s(t,e,r){var n=e[0],s=e[1],o=e[2],i=e[3],a=e[4],c=e[5],u=e[6],A=e[7],f=e[8],B=e[9],l=e[10],h=e[11],d=e[12],C=e[13],g=e[14],m=e[15],b=r[0],y=r[1],p=r[2],E=r[3];return t[0]=b*n+y*a+p*f+E*d,t[1]=b*s+y*c+p*B+E*C,t[2]=b*o+y*u+p*l+E*g,t[3]=b*i+y*A+p*h+E*m,b=r[4],y=r[5],p=r[6],E=r[7],t[4]=b*n+y*a+p*f+E*d,t[5]=b*s+y*c+p*B+E*C,t[6]=b*o+y*u+p*l+E*g,t[7]=b*i+y*A+p*h+E*m,b=r[8],y=r[9],p=r[10],E=r[11],t[8]=b*n+y*a+p*f+E*d,t[9]=b*s+y*c+p*B+E*C,t[10]=b*o+y*u+p*l+E*g,t[11]=b*i+y*A+p*h+E*m,b=r[12],y=r[13],p=r[14],E=r[15],t[12]=b*n+y*a+p*f+E*d,t[13]=b*s+y*c+p*B+E*C,t[14]=b*o+y*u+p*l+E*g,t[15]=b*i+y*A+p*h+E*m,t}function o(t,e,r,n){var s=e[0],o=e[1],i=e[2],a=e[3],c=s+s,u=o+o,A=i+i,f=s*c,B=s*u,l=s*A,h=o*u,d=o*A,C=i*A,g=a*c,m=a*u,b=a*A,y=n[0],p=n[1],E=n[2];return t[0]=(1-(h+C))*y,t[1]=(B+b)*y,t[2]=(l-m)*y,t[3]=0,t[4]=(B-b)*p,t[5]=(1-(f+C))*p,t[6]=(d+g)*p,t[7]=0,t[8]=(l+m)*E,t[9]=(d-g)*E,t[10]=(1-(f+h))*E,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function i(t,e){var r=e[0],n=e[1],s=e[2],o=e[3],i=r+r,a=n+n,c=s+s,u=r*i,A=n*i,f=n*a,B=s*i,l=s*a,h=s*c,d=o*i,C=o*a,g=o*c;return t[0]=1-f-h,t[1]=A+g,t[2]=B-C,t[3]=0,t[4]=A-g,t[5]=1-u-h,t[6]=l+d,t[7]=0,t[8]=B+C,t[9]=l-d,t[10]=1-u-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}r.d(e,{B8:()=>n,I0:()=>i,fN:()=>a,lw:()=>s,o1:()=>o});var a=function(t,e,r,n,s){var o,i=1/Math.tan(e/2);return t[0]=i/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=s&&s!==1/0?(o=1/(n-s),t[10]=(s+n)*o,t[14]=2*s*n*o):(t[10]=-1,t[14]=-2*n),t}},4020:(t,e,r)=>{function n(t,e){if(!t)throw new Error(e||"loader assertion failed.")}r.d(e,{v:()=>n})},4971:(t,e,r)=>{r.d(e,{Bd:()=>n,Fr:()=>o,xD:()=>s}),"undefined"!=typeof self&&self,"undefined"!=typeof window&&window,"undefined"!=typeof global&&global,"undefined"!=typeof document&&document;const n="object"!=typeof process||"[object process]"!==String(process)||process.browser,s="function"==typeof importScripts,o="undefined"!=typeof window&&void 0!==window.orientation,i="undefined"!=typeof process&&process.version&&/v([0-9]*)/.exec(process.version);i&&parseFloat(i[1])},5743:(t,e,r)=>{r.d(e,{H:()=>kt});const n=t=>"function"==typeof t,s=t=>null!==t&&"object"==typeof t,o=t=>s(t)&&t.constructor==={}.constructor,i=t=>Boolean(t)&&"function"==typeof t[Symbol.iterator],a=t=>t&&"function"==typeof t[Symbol.asyncIterator],c=t=>"undefined"!=typeof Response&&t instanceof Response||t&&t.arrayBuffer&&t.text&&t.json,u=t=>"undefined"!=typeof Blob&&t instanceof Blob,A=t=>t&&"object"==typeof t&&t.isBuffer,f=t=>(t=>"undefined"!=typeof ReadableStream&&t instanceof ReadableStream||s(t)&&n(t.tee)&&n(t.cancel)&&n(t.getReader))(t)||(t=>s(t)&&n(t.read)&&n(t.pipe)&&(t=>"boolean"==typeof t)(t.readable))(t);var B=r(4020);function l(t){return!!t&&(Array.isArray(t)&&(t=t[0]),Array.isArray(t?.extensions))}function h(t){let e;return(0,B.v)(t,"null loader"),(0,B.v)(l(t),"invalid loader"),Array.isArray(t)&&(e=t[1],t=t[0],t={...t,options:{...t.options,...e}}),(t?.parseTextSync||t?.parseText)&&(t.text=!0),t.text||(t.binary=!0),t}let d="";const C={};class g extends Error{constructor(t,e){super(t),this.reason=e.reason,this.url=e.url,this.response=e.response}reason;url;response}const m=/^data:([-\w.]+\/[-\w.+]+)(;|,)/,b=/^([-\w.]+\/[-\w.+]+)/;function y(t,e){return t.toLowerCase()===e.toLowerCase()}function p(t){const e=m.exec(t);return e?e[1]:""}const E=/\?.*/;function F(t){return t.replace(E,"")}function G(t){return c(t)?t.url:u(t)?t.name||"":"string"==typeof t?t:""}function I(t){if(c(t)){const e=t,r=e.headers.get("content-type")||"",n=F(e.url);return function(t){const e=b.exec(t);return e?e[1]:t}(r)||p(n)}return u(t)?t.type||"":"string"==typeof t?p(t):""}async function M(t){if(c(t))return t;const e={},r=function(t){return c(t)?t.headers["content-length"]||-1:u(t)?t.size:"string"==typeof t?t.length:t instanceof ArrayBuffer||ArrayBuffer.isView(t)?t.byteLength:-1}(t);r>=0&&(e["content-length"]=String(r));const n=G(t),s=I(t);s&&(e["content-type"]=s);const o=await async function(t){if("string"==typeof t)return`data:,${t.slice(0,5)}`;if(t instanceof Blob){const e=t.slice(0,5);return await new Promise(t=>{const r=new FileReader;r.onload=e=>t(e?.target?.result),r.readAsDataURL(e)})}return t instanceof ArrayBuffer?`data:base64,${function(t){let e="";const r=new Uint8Array(t);for(let t=0;t<r.byteLength;t++)e+=String.fromCharCode(r[t]);return btoa(e)}(t.slice(0,5))}`:null}(t);o&&(e["x-first-bytes"]=o),"string"==typeof t&&(t=(new TextEncoder).encode(t));const i=new Response(t,{headers:e});return Object.defineProperty(i,"url",{value:n}),i}async function D(t,e){if("string"==typeof t){const r=function(t){for(const e in C)if(t.startsWith(e)){const r=C[e];t=t.replace(e,r)}return t.startsWith("http://")||t.startsWith("https://")||(t=`${d}${t}`),t}(t);return function(t){return!function(t){return t.startsWith("http:")||t.startsWith("https:")}(t)&&!function(t){return t.startsWith("data:")}(t)}(r)&&globalThis.loaders?.fetchNode?globalThis.loaders?.fetchNode(r,e):await fetch(r,e)}return await M(t)}function w(){return!("object"==typeof process&&"[object process]"===String(process)&&!process?.browser)||function(){if("undefined"!=typeof window&&"renderer"===window.process?.type)return!0;if("undefined"!=typeof process&&Boolean(process.versions?.electron))return!0;const t="undefined"!=typeof navigator&&navigator.userAgent;return Boolean(t&&t.indexOf("Electron")>=0)}()}const J="4.1.0";class T{constructor(t,e,r="sessionStorage"){this.storage=function(t){try{const e=window[t],r="__storage_test__";return e.setItem(r,r),e.removeItem(r),e}catch(t){return null}}(r),this.id=t,this.config=e,this._loadConfiguration()}getConfiguration(){return this.config}setConfiguration(t){if(Object.assign(this.config,t),this.storage){const t=JSON.stringify(this.config);this.storage.setItem(this.id,t)}}_loadConfiguration(){let t={};if(this.storage){const e=this.storage.getItem(this.id);t=e?JSON.parse(e):{}}return Object.assign(this.config,t),this}}var O;function R(t){return"string"!=typeof t?t:(t=t.toUpperCase(),O[t]||O.WHITE)}function H(t,e){if(!t)throw new Error(e||"Assertion failed")}!function(t){t[t.BLACK=30]="BLACK",t[t.RED=31]="RED",t[t.GREEN=32]="GREEN",t[t.YELLOW=33]="YELLOW",t[t.BLUE=34]="BLUE",t[t.MAGENTA=35]="MAGENTA",t[t.CYAN=36]="CYAN",t[t.WHITE=37]="WHITE",t[t.BRIGHT_BLACK=90]="BRIGHT_BLACK",t[t.BRIGHT_RED=91]="BRIGHT_RED",t[t.BRIGHT_GREEN=92]="BRIGHT_GREEN",t[t.BRIGHT_YELLOW=93]="BRIGHT_YELLOW",t[t.BRIGHT_BLUE=94]="BRIGHT_BLUE",t[t.BRIGHT_MAGENTA=95]="BRIGHT_MAGENTA",t[t.BRIGHT_CYAN=96]="BRIGHT_CYAN",t[t.BRIGHT_WHITE=97]="BRIGHT_WHITE"}(O||(O={}));const U=globalThis,L=(globalThis.document,globalThis.process||{});function v(){let t;if(w()&&U.performance)t=U?.performance?.now?.();else if("hrtime"in L){const e=L?.hrtime?.();t=1e3*e[0]+e[1]/1e6}else t=Date.now();return t}globalThis.console,globalThis.navigator;const x={debug:w()&&console.debug||console.log,log:console.log,info:console.info,warn:console.warn,error:console.error},j={enabled:!0,level:0};function K(){}const S={},N={once:!0};class _{constructor({id:t}={id:""}){this.VERSION=J,this._startTs=v(),this._deltaTs=v(),this.userData={},this.LOG_THROTTLE_TIMEOUT=0,this.id=t,this.userData={},this._storage=new T(`__probe-${this.id}__`,j),this.timeStamp(`${this.id} started`),function(t,e=["constructor"]){const r=Object.getPrototypeOf(t),n=Object.getOwnPropertyNames(r),s=t;for(const r of n){const n=s[r];"function"==typeof n&&(e.find(t=>r===t)||(s[r]=n.bind(t)))}}(this),Object.seal(this)}set level(t){this.setLevel(t)}get level(){return this.getLevel()}isEnabled(){return this._storage.config.enabled}getLevel(){return this._storage.config.level}getTotal(){return Number((v()-this._startTs).toPrecision(10))}getDelta(){return Number((v()-this._deltaTs).toPrecision(10))}set priority(t){this.level=t}get priority(){return this.level}getPriority(){return this.level}enable(t=!0){return this._storage.setConfiguration({enabled:t}),this}setLevel(t){return this._storage.setConfiguration({level:t}),this}get(t){return this._storage.config[t]}set(t,e){this._storage.setConfiguration({[t]:e})}settings(){console.table?console.table(this._storage.config):console.log(this._storage.config)}assert(t,e){if(!t)throw new Error(e||"Assertion failed")}warn(t){return this._getLogFunction(0,t,x.warn,arguments,N)}error(t){return this._getLogFunction(0,t,x.error,arguments)}deprecated(t,e){return this.warn(`\`${t}\` is deprecated and will be removed in a later version. Use \`${e}\` instead`)}removed(t,e){return this.error(`\`${t}\` has been removed. Use \`${e}\` instead`)}probe(t,e){return this._getLogFunction(t,e,x.log,arguments,{time:!0,once:!0})}log(t,e){return this._getLogFunction(t,e,x.debug,arguments)}info(t,e){return this._getLogFunction(t,e,console.info,arguments)}once(t,e){return this._getLogFunction(t,e,x.debug||x.info,arguments,N)}table(t,e,r){return e?this._getLogFunction(t,e,console.table||K,r&&[r],{tag:k(e)}):K}time(t,e){return this._getLogFunction(t,e,console.time?console.time:console.info)}timeEnd(t,e){return this._getLogFunction(t,e,console.timeEnd?console.timeEnd:console.info)}timeStamp(t,e){return this._getLogFunction(t,e,console.timeStamp||K)}group(t,e,r={collapsed:!1}){const n=P({logLevel:t,message:e,opts:r}),{collapsed:s}=r;return n.method=(s?console.groupCollapsed:console.group)||console.info,this._getLogFunction(n)}groupCollapsed(t,e,r={}){return this.group(t,e,Object.assign({},r,{collapsed:!0}))}groupEnd(t){return this._getLogFunction(t,"",console.groupEnd||K)}withGroup(t,e,r){this.group(t,e)();try{r()}finally{this.groupEnd(t)()}}trace(){console.trace&&console.trace()}_shouldLog(t){return this.isEnabled()&&this.getLevel()>=Q(t)}_getLogFunction(t,e,r,n,s){if(this._shouldLog(t)){s=P({logLevel:t,message:e,args:n,opts:s}),H(r=r||s.method),s.total=this.getTotal(),s.delta=this.getDelta(),this._deltaTs=v();const o=s.tag||s.message;if(s.once&&o){if(S[o])return K;S[o]=v()}return e=function(t,e,r){if("string"==typeof e){const i=r.time?function(t,e=8){const r=Math.max(e-t.length,0);return`${" ".repeat(r)}${t}`}(function(t){let e;return e=t<10?`${t.toFixed(2)}ms`:t<100?`${t.toFixed(1)}ms`:t<1e3?`${t.toFixed(0)}ms`:`${(t/1e3).toFixed(2)}s`,e}(r.total)):"";n=e=r.time?`${t}: ${i}  ${e}`:`${t}: ${e}`,s=r.color,o=r.background,w||"string"!=typeof n||(s&&(n=`[${R(s)}m${n}[39m`),o&&(n=`[${R(o)+10}m${n}[49m`)),e=n}var n,s,o;return e}(this.id,s.message,s),r.bind(console,e,...s.args)}return K}}function Q(t){if(!t)return 0;let e;switch(typeof t){case"number":e=t;break;case"object":e=t.logLevel||t.priority||0;break;default:return 0}return H(Number.isFinite(e)&&e>=0),e}function P(t){const{logLevel:e,message:r}=t;t.logLevel=Q(e);const n=t.args?Array.from(t.args):[];for(;n.length&&n.shift()!==r;);switch(typeof e){case"string":case"function":void 0!==r&&n.unshift(r),t.message=e;break;case"object":Object.assign(t,e)}"function"==typeof t.message&&(t.message=t.message());const s=typeof t.message;return H("string"===s||"object"===s),Object.assign(t,{args:n},t.opts)}function k(t){for(const e in t)for(const r in t[e])return r||"untitled";return"empty"}_.VERSION=J;const X=new _({id:"loaders.gl"});class Y{log(){return()=>{}}info(){return()=>{}}warn(){return()=>{}}error(){return()=>{}}}var W=r(7976);const V={fetch:null,mimeType:void 0,nothrow:!1,log:new class{console;constructor(){this.console=console}log(...t){return this.console.log.bind(this.console,...t)}info(...t){return this.console.info.bind(this.console,...t)}warn(...t){return this.console.warn.bind(this.console,...t)}error(...t){return this.console.error.bind(this.console,...t)}},useLocalLibraries:!1,CDN:"https://unpkg.com/@loaders.gl",worker:!0,maxConcurrency:3,maxMobileConcurrency:1,reuseWorkers:W.Bd,_nodeWorkers:!1,_workerType:"",limit:0,_limitMB:0,batchSize:"auto",batchDebounceMs:0,metadata:!1,transforms:[]},Z={throws:"nothrow",dataType:"(no longer used)",uri:"baseUri",method:"fetch.method",headers:"fetch.headers",body:"fetch.body",mode:"fetch.mode",credentials:"fetch.credentials",cache:"fetch.cache",redirect:"fetch.redirect",referrer:"fetch.referrer",referrerPolicy:"fetch.referrerPolicy",integrity:"fetch.integrity",keepalive:"fetch.keepalive",signal:"fetch.signal"};function q(){globalThis.loaders=globalThis.loaders||{};const{loaders:t}=globalThis;return t._state||(t._state={}),t._state}function $(){const t=q();return t.globalOptions=t.globalOptions||{...V},t.globalOptions}function z(t,e,r,n){return r=r||[],function(t,e){tt(t,null,V,Z,e);for(const r of e){const n=t&&t[r.id]||{},s=r.options&&r.options[r.id]||{},o=r.deprecatedOptions&&r.deprecatedOptions[r.id]||{};tt(n,r.id,s,o,e)}}(t,r=Array.isArray(r)?r:[r]),function(t,e,r){const n={...t.options||{}};return function(t,e){e&&!("baseUri"in t)&&(t.baseUri=e)}(n,r),null===n.log&&(n.log=new Y),rt(n,$()),rt(n,e),n}(e,t,n)}function tt(t,e,r,n,o){const i=e||"Top level",a=e?`${e}.`:"";for(const c in t){const u=!e&&s(t[c]);if(!(c in r)&&("baseUri"!==c||e)&&("workerUrl"!==c||!e))if(c in n)X.warn(`${i} loader option '${a}${c}' no longer supported, use '${n[c]}'`)();else if(!u){const t=et(c,o);X.warn(`${i} loader option '${a}${c}' not recognized. ${t}`)()}}}function et(t,e){const r=t.toLowerCase();let n="";for(const s of e)for(const e in s.options){if(t===e)return`Did you mean '${s.id}.${e}'?`;const o=e.toLowerCase();(r.startsWith(o)||o.startsWith(r))&&(n=n||`Did you mean '${s.id}.${e}'?`)}return n}function rt(t,e){for(const r in e)if(r in e){const n=e[r];o(n)&&o(t[r])?t[r]={...t[r],...e[r]}:t[r]=e[r]}}function nt(t,e){const r=$(),n=t||r;return"function"==typeof n.fetch?n.fetch:s(n.fetch)?t=>D(t,n.fetch):e?.fetch?e?.fetch:D}function st(t,e){return ot(t||{},e)}function ot(t,e,r=0){if(r>3)return e;const n={...t};for(const[t,s]of Object.entries(e))s&&"object"==typeof s&&!Array.isArray(s)?n[t]=ot(n[t]||{},e[t],r+1):n[t]=e[t];return n}var it=r(4971);class at{terminate(){}}var ct=r(3605);const ut=new Map;function At(t){const e=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(e)}function ft(t,e=!0,r){const n=r||new Set;if(t)if(Bt(t))n.add(t);else if(Bt(t.buffer))n.add(t.buffer);else if(ArrayBuffer.isView(t));else if(e&&"object"==typeof t)for(const r in t)ft(t[r],e,n);return void 0===r?Array.from(n):[]}function Bt(t){return!!t&&(t instanceof ArrayBuffer||"undefined"!=typeof MessagePort&&t instanceof MessagePort||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas)}const lt=()=>{};class ht{name;source;url;terminated=!1;worker;onMessage;onError;_loadableURL="";static isSupported(){return"undefined"!=typeof Worker&&it.Bd||void 0!==at&&!it.Bd}constructor(t){const{name:e,source:r,url:n}=t;(0,ct.v)(r||n),this.name=e,this.source=r,this.url=n,this.onMessage=lt,this.onError=t=>console.log(t),this.worker=it.Bd?this._createBrowserWorker():this._createNodeWorker()}destroy(){this.onMessage=lt,this.onError=lt,this.worker.terminate(),this.terminated=!0}get isRunning(){return Boolean(this.onMessage)}postMessage(t,e){e=e||ft(t),this.worker.postMessage(t,e)}_getErrorFromErrorEvent(t){let e="Failed to load ";return e+=`worker ${this.name} from ${this.url}. `,t.message&&(e+=`${t.message} in `),t.lineno&&(e+=`:${t.lineno}:${t.colno}`),new Error(e)}_createBrowserWorker(){this._loadableURL=function(t){(0,ct.v)(t.source&&!t.url||!t.source&&t.url);let e=ut.get(t.source||t.url);return e||(t.url&&(e=(r=t.url).startsWith("http")?At(`try {\n  importScripts('${r}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`):r,ut.set(t.url,e)),t.source&&(e=At(t.source),ut.set(t.source,e))),(0,ct.v)(e),e;var r}({source:this.source,url:this.url});const t=new Worker(this._loadableURL,{name:this.name});return t.onmessage=t=>{t.data?this.onMessage(t.data):this.onError(new Error("No data received"))},t.onerror=t=>{this.onError(this._getErrorFromErrorEvent(t)),this.terminated=!0},t.onmessageerror=t=>console.error(t),t}_createNodeWorker(){let t;if(this.url){const e=this.url.includes(":/")||this.url.startsWith("/")?this.url:`./${this.url}`;t=new at(e,{eval:!1})}else{if(!this.source)throw new Error("no worker");t=new at(this.source,{eval:!0})}return t.on("message",t=>{this.onMessage(t)}),t.on("error",t=>{this.onError(t)}),t.on("exit",t=>{}),t}}class dt{name;workerThread;isRunning=!0;result;_resolve=()=>{};_reject=()=>{};constructor(t,e){this.name=t,this.workerThread=e,this.result=new Promise((t,e)=>{this._resolve=t,this._reject=e})}postMessage(t,e){this.workerThread.postMessage({source:"loaders.gl",type:t,payload:e})}done(t){(0,ct.v)(this.isRunning),this.isRunning=!1,this._resolve(t)}error(t){(0,ct.v)(this.isRunning),this.isRunning=!1,this._reject(t)}}class Ct{name="unnamed";source;url;maxConcurrency=1;maxMobileConcurrency=1;onDebug=()=>{};reuseWorkers=!0;props={};jobQueue=[];idleQueue=[];count=0;isDestroyed=!1;static isSupported(){return ht.isSupported()}constructor(t){this.source=t.source,this.url=t.url,this.setProps(t)}destroy(){this.idleQueue.forEach(t=>t.destroy()),this.isDestroyed=!0}setProps(t){this.props={...this.props,...t},void 0!==t.name&&(this.name=t.name),void 0!==t.maxConcurrency&&(this.maxConcurrency=t.maxConcurrency),void 0!==t.maxMobileConcurrency&&(this.maxMobileConcurrency=t.maxMobileConcurrency),void 0!==t.reuseWorkers&&(this.reuseWorkers=t.reuseWorkers),void 0!==t.onDebug&&(this.onDebug=t.onDebug)}async startJob(t,e=(t,e,r)=>t.done(r),r=(t,e)=>t.error(e)){const n=new Promise(n=>(this.jobQueue.push({name:t,onMessage:e,onError:r,onStart:n}),this));return this._startQueuedJob(),await n}async _startQueuedJob(){if(!this.jobQueue.length)return;const t=this._getAvailableWorker();if(!t)return;const e=this.jobQueue.shift();if(e){this.onDebug({message:"Starting job",name:e.name,workerThread:t,backlog:this.jobQueue.length});const r=new dt(e.name,t);t.onMessage=t=>e.onMessage(r,t.type,t.payload),t.onError=t=>e.onError(r,t),e.onStart(r);try{await r.result}catch(t){console.error(`Worker exception: ${t}`)}finally{this.returnWorkerToQueue(t)}}}returnWorkerToQueue(t){!it.Bd||this.isDestroyed||!this.reuseWorkers||this.count>this._getMaxConcurrency()?(t.destroy(),this.count--):this.idleQueue.push(t),this.isDestroyed||this._startQueuedJob()}_getAvailableWorker(){if(this.idleQueue.length>0)return this.idleQueue.shift()||null;if(this.count<this._getMaxConcurrency()){this.count++;const t=`${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;return new ht({name:t,source:this.source,url:this.url})}return null}_getMaxConcurrency(){return it.Fr?this.maxMobileConcurrency:this.maxConcurrency}}const gt={maxConcurrency:3,maxMobileConcurrency:1,reuseWorkers:!0,onDebug:()=>{}};class mt{props;workerPools=new Map;static _workerFarm;static isSupported(){return ht.isSupported()}static getWorkerFarm(t={}){return mt._workerFarm=mt._workerFarm||new mt({}),mt._workerFarm.setProps(t),mt._workerFarm}constructor(t){this.props={...gt},this.setProps(t),this.workerPools=new Map}destroy(){for(const t of this.workerPools.values())t.destroy();this.workerPools=new Map}setProps(t){this.props={...this.props,...t};for(const t of this.workerPools.values())t.setProps(this._getWorkerPoolProps())}getWorkerPool(t){const{name:e,source:r,url:n}=t;let s=this.workerPools.get(e);return s||(s=new Ct({name:e,source:r,url:n}),s.setProps(this._getWorkerPoolProps()),this.workerPools.set(e,s)),s}_getWorkerPoolProps(){return{maxConcurrency:this.props.maxConcurrency,maxMobileConcurrency:this.props.maxMobileConcurrency,reuseWorkers:this.props.reuseWorkers,onDebug:this.props.onDebug}}}var bt=r(9099);async function yt(t,e,r,n,s){const o=t.id,i=function(t,e={}){const r=e[t.id]||{},n=it.Bd?`${t.id}-worker.js`:`${t.id}-worker-node.js`;let s=r.workerUrl;if(s||"compression"!==t.id||(s=e.workerUrl),"test"===e._workerType&&(s=it.Bd?`modules/${t.module}/dist/${n}`:`modules/${t.module}/src/workers/${t.id}-worker-node.ts`),!s){let e=t.version;"latest"===e&&(e=bt.x);const r=e?`@${e}`:"";s=`https://unpkg.com/@loaders.gl/${t.module}${r}/dist/${n}`}return(0,ct.v)(s),s}(t,r),a=mt.getWorkerFarm(r).getWorkerPool({name:o,url:i});r=JSON.parse(JSON.stringify(r)),n=JSON.parse(JSON.stringify(n||{}));const c=await a.startJob("process-on-worker",pt.bind(null,s));c.postMessage("process",{input:e,options:r,context:n});const u=await c.result;return await u.result}async function pt(t,e,r,n){switch(r){case"done":e.done(n);break;case"error":e.error(new Error(n.error));break;case"process":const{id:s,input:o,options:i}=n;try{const r=await t(o,i);e.postMessage("done",{id:s,result:r})}catch(t){const r=t instanceof Error?t.message:"unknown error";e.postMessage("error",{id:s,error:r})}break;default:console.warn(`parse-with-worker unknown message ${r}`)}}var Et=r(1556);const Ft=262144,Gt=262144,It=1048576;function Mt(t){if((e=t)&&"object"==typeof e&&e.isBuffer)return t;var e;if(t instanceof ArrayBuffer)return t;if(ArrayBuffer.isView(t))return 0===t.byteOffset&&t.byteLength===t.buffer.byteLength?t.buffer:t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength);if("string"==typeof t){const e=t;return(new TextEncoder).encode(e).buffer}if(t&&"object"==typeof t&&t._toArrayBuffer)return t._toArrayBuffer();throw new Error("toArrayBuffer")}function Dt(t,e){return W.Bd?async function*(t,e){const r=t.getReader();let n;try{for(;;){const t=n||r.read();e?._streamReadAhead&&(n=r.read());const{done:s,value:o}=await t;if(s)return;yield Mt(o)}}catch(t){r.releaseLock()}}(t,e):async function*(t){for await(const e of t)yield Mt(e)}(t)}const wt="Cannot convert supplied data type";async function Jt(t,e,r){const n=t instanceof ArrayBuffer||ArrayBuffer.isView(t);if("string"==typeof t||n)return function(t,e){if(e.text&&"string"==typeof t)return t;if(A(t)&&(t=t.buffer),t instanceof ArrayBuffer){const r=t;return e.text&&!e.binary?new TextDecoder("utf8").decode(r):r}if(ArrayBuffer.isView(t)){if(e.text&&!e.binary)return new TextDecoder("utf8").decode(t);let r=t.buffer;const n=t.byteLength||t.length;return 0===t.byteOffset&&n===r.byteLength||(r=r.slice(t.byteOffset,t.byteOffset+n)),r}throw new Error(wt)}(t,e);if(u(t)&&(t=await M(t)),c(t)){const r=t;return await async function(t){if(!t.ok){const e=await async function(t){const e=function(t){if(t.length<50)return t;const e=t.slice(t.length-15);return`${t.substr(0,32)}...${e}`}(t.url);let r=`Failed to fetch resource (${t.status}) ${t.statusText}: ${e}`;r=r.length>100?`${r.slice(0,100)}...`:r;const n={reason:t.statusText,url:t.url,response:t};try{const e=t.headers.get("Content-Type");n.reason=!t.bodyUsed&&e?.includes("application/json")?await t.json():await t.text()}catch(t){}return new g(r,n)}(t);throw e}}(r),e.binary?await r.arrayBuffer():await r.text()}if(f(t)&&(t=function(t,e){if("string"==typeof t)return function*(t,e){const r=e?.chunkSize||Ft;let n=0;const s=new TextEncoder;for(;n<t.length;){const e=Math.min(t.length-n,r),o=t.slice(n,n+e);n+=e,yield s.encode(o)}}(t,e);if(t instanceof ArrayBuffer)return function*(t,e={}){const{chunkSize:r=Gt}=e;let n=0;for(;n<t.byteLength;){const e=Math.min(t.byteLength-n,r),s=new ArrayBuffer(e),o=new Uint8Array(t,n,e);new Uint8Array(s).set(o),n+=e,yield s}}(t,e);if(u(t))return async function*(t,e){const r=e?.chunkSize||It;let n=0;for(;n<t.size;){const e=n+r,s=await t.slice(n,e).arrayBuffer();n=e,yield s}}(t,e);if(f(t))return Dt(t,e);if(c(t))return Dt(t.body,e);throw new Error("makeIterator")}(t,r)),i(t)||a(t))return async function(t){const e=[];for await(const r of t)e.push(r);return(0,Et.AQ)(...e)}(t);throw new Error(wt)}function Tt(t){const e=t?t.lastIndexOf("/"):-1;return e>=0?t.substr(e+1):""}const Ot="4.3.3",Rt=Ot[0]>="0"&&Ot[0]<="9"?`v${Ot}`:"",Ht=function(){const t=new _({id:"loaders.gl"});return globalThis.loaders=globalThis.loaders||{},globalThis.loaders.log=t,globalThis.loaders.version=Rt,globalThis.probe=globalThis.probe||{},globalThis.probe.loaders=t,t}(),Ut=()=>{const t=q();return t.loaderRegistry=t.loaderRegistry||[],t.loaderRegistry},Lt=/\.([^.]+)$/;function vt(t,e=[],r,n){if(!xt(t))return null;if(e&&!Array.isArray(e))return h(e);let s=[];e&&(s=s.concat(e)),r?.ignoreRegisteredLoaders||s.push(...Ut()),function(t){for(const e of t)h(e)}(s);const o=function(t,e,r,n){const s=G(t),o=I(t),i=F(s)||n?.url;let a=null,c="";return r?.mimeType&&(a=Kt(e,r?.mimeType),c=`match forced by supplied MIME type ${r?.mimeType}`),a=a||function(t,e){const r=e&&Lt.exec(e),n=r&&r[1];return n?function(t,e){e=e.toLowerCase();for(const r of t)for(const t of r.extensions)if(t.toLowerCase()===e)return r;return null}(t,n):null}(e,i),c=c||(a?`matched url ${i}`:""),a=a||Kt(e,o),c=c||(a?`matched MIME type ${o}`:""),a=a||function(t,e){if(!e)return null;for(const r of t)if("string"==typeof e){if(St(e,r))return r}else if(ArrayBuffer.isView(e)){if(Nt(e.buffer,e.byteOffset,r))return r}else if(e instanceof ArrayBuffer&&Nt(e,0,r))return r;return null}(e,t),c=c||(a?`matched initial data ${_t(t)}`:""),r?.fallbackMimeType&&(a=a||Kt(e,r?.fallbackMimeType),c=c||(a?`matched fallback MIME type ${o}`:"")),c&&Ht.log(1,`selectLoader selected ${a?.name}: ${c}.`),a}(t,s,r,n);if(!o&&!r?.nothrow)throw new Error(jt(t));return o}function xt(t){return!(t instanceof Response&&204===t.status)}function jt(t){const e=G(t),r=I(t);let n="No valid loader found (";n+=e?`${Tt(e)}, `:"no url provided, ",n+=`MIME type: ${r?`"${r}"`:"not provided"}, `;const s=t?_t(t):"";return n+=s?` first bytes: "${s}"`:"first bytes: not available",n+=")",n}function Kt(t,e){for(const r of t){if(r.mimeTypes?.some(t=>y(e,t)))return r;if(y(e,`application/x.${r.id}`))return r}return null}function St(t,e){return e.testText?e.testText(t):(Array.isArray(e.tests)?e.tests:[e.tests]).some(e=>t.startsWith(e))}function Nt(t,e,r){return(Array.isArray(r.tests)?r.tests:[r.tests]).some(r=>function(t,e,r,n){if(n instanceof ArrayBuffer)return(0,Et.YV)(n,t,n.byteLength);switch(typeof n){case"function":return n(t);case"string":return n===Qt(t,e,n.length);default:return!1}}(t,e,0,r))}function _t(t,e=5){return"string"==typeof t?t.slice(0,e):ArrayBuffer.isView(t)?Qt(t.buffer,t.byteOffset,e):t instanceof ArrayBuffer?Qt(t,0,e):""}function Qt(t,e,r){if(t.byteLength<e+r)return"";const n=new DataView(t);let s="";for(let t=0;t<r;t++)s+=String.fromCharCode(n.getUint8(e+t));return s}async function Pt(t,e,r,n){!e||Array.isArray(e)||l(e)||(n=void 0,r=e,e=void 0),r=r||{};const s=G(t=await t),o=function(t,e){if(t&&!Array.isArray(t))return t;let r;if(t&&(r=Array.isArray(t)?t:[t]),e&&e.loaders){const t=Array.isArray(e.loaders)?e.loaders:[e.loaders];r=r?[...r,...t]:t}return r&&r.length?r:void 0}(e,n),i=await async function(t,e=[],r,n){if(!xt(t))return null;let s=vt(t,e,{...r,nothrow:!0},n);if(s)return s;if(u(t)&&(s=vt(t=await t.slice(0,10).arrayBuffer(),e,r,n)),!s&&!r?.nothrow)throw new Error(jt(t));return s}(t,o,r);return i?(n=function(t,e,r){if(r)return r;const n={fetch:nt(e,t),...t};if(n.url){const t=F(n.url);n.baseUrl=t,n.queryString=function(t){const e=t.match(E);return e&&e[0]}(n.url),n.filename=Tt(t),n.baseUrl=function(t){const e=t?t.lastIndexOf("/"):-1;return e>=0?t.substr(0,e):""}(t)}return Array.isArray(n.loaders)||(n.loaders=null),n}({url:s,_parse:Pt,loaders:o},r=z(r,i,o,s),n||null),await async function(t,e,r,n){if(function(t){(0,ct.v)(t,"no worker provided");t.version}(t),r=st(t.options,r),c(e)){const t=e,{ok:r,redirected:s,status:o,statusText:i,type:a,url:c}=t,u=Object.fromEntries(t.headers.entries());n.response={headers:u,ok:r,redirected:s,status:o,statusText:i,type:a,url:c}}e=await Jt(e,t,r);const s=t;if(s.parseTextSync&&"string"==typeof e)return s.parseTextSync(e,r,n);if(function(t,e){return!!mt.isSupported()&&!(!it.Bd&&!e?._nodeWorkers)&&t.worker&&e?.worker}(t,r))return await yt(t,e,r,n,Pt);if(s.parseText&&"string"==typeof e)return await s.parseText(e,r,n);if(s.parse)return await s.parse(e,r,n);throw(0,ct.v)(!s.parseSync),new Error(`${t.id} loader - no parser found and worker is disabled`)}(i,t,r,n)):null}async function kt(t,e,r,n){let s,o;Array.isArray(e)||l(e)?(s=e,o=r):(s=[],o=e);const i=nt(o);let a=t;return"string"==typeof t&&(a=await i(t)),u(t)&&(a=await i(t)),Array.isArray(s),await Pt(a,s,o)}},5935:(t,e,r)=>{r.d(e,{$A:()=>c,Il:()=>A,Om:()=>a,S8:()=>i,fA:()=>o,gL:()=>u,vt:()=>s});var n=r(6561);function s(){var t=new n.tb(3);return n.tb!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function o(t,e,r){var s=new n.tb(3);return s[0]=t,s[1]=e,s[2]=r,s}function i(t,e){var r=e[0],n=e[1],s=e[2],o=r*r+n*n+s*s;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function a(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function c(t,e,r){var n=e[0],s=e[1],o=e[2],i=r[0],a=r[1],c=r[2];return t[0]=s*c-o*a,t[1]=o*i-n*c,t[2]=n*a-s*i,t}function u(t,e,r){var n=r[0],s=r[1],o=r[2],i=r[3],a=e[0],c=e[1],u=e[2],A=s*u-o*c,f=o*a-n*u,B=n*c-s*a,l=s*B-o*f,h=o*A-n*B,d=n*f-s*A,C=2*i;return A*=C,f*=C,B*=C,l*=2,h*=2,d*=2,t[0]=a+A+l,t[1]=c+f+h,t[2]=u+B+d,t}var A=function(t){var e=t[0],r=t[1],n=t[2];return Math.hypot(e,r,n)};s()},6561:(t,e,r)=>{r.d(e,{p8:()=>n,tb:()=>s});var n=1e-6,s="undefined"!=typeof Float32Array?Float32Array:Array;Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)})},7445:(t,e,r)=>{r.d(e,{A6:()=>f,Gn:()=>A,B8:()=>u,lw:()=>c,ml:()=>l});var n,s=r(6561),o=r(2391),i=r(5935);function a(){var t=new s.tb(4);return s.tb!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function c(t,e,r){var n=e[0],s=e[1],o=e[2],i=e[3],a=r[0],c=r[1],u=r[2],A=r[3];return t[0]=n*A+i*a+s*u-o*c,t[1]=s*A+i*c+o*a-n*u,t[2]=o*A+i*u+n*c-s*a,t[3]=i*A-n*a-s*c-o*u,t}function u(t,e){var r=e[0],n=e[1],s=e[2],o=e[3],i=r*r+n*n+s*s+o*o,a=i?1/i:0;return t[0]=-r*a,t[1]=-n*a,t[2]=-s*a,t[3]=o*a,t}function A(t,e){var r,n=e[0]+e[4]+e[8];if(n>0)r=Math.sqrt(n+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{var s=0;e[4]>e[0]&&(s=1),e[8]>e[3*s+s]&&(s=2);var o=(s+1)%3,i=(s+2)%3;r=Math.sqrt(e[3*s+s]-e[3*o+o]-e[3*i+i]+1),t[s]=.5*r,r=.5/r,t[3]=(e[3*o+i]-e[3*i+o])*r,t[o]=(e[3*o+s]+e[3*s+o])*r,t[i]=(e[3*i+s]+e[3*s+i])*r}return t}function f(t,e,r,n){var s=.5*Math.PI/180;e*=s,r*=s,n*=s;var o=Math.sin(e),i=Math.cos(e),a=Math.sin(r),c=Math.cos(r),u=Math.sin(n),A=Math.cos(n);return t[0]=o*c*A-i*a*u,t[1]=i*a*A+o*c*u,t[2]=i*c*u-o*a*A,t[3]=i*c*A+o*a*u,t}n=new s.tb(4),s.tb!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0,n[3]=0);var B,l=(i.vt(),i.fA(1,0,0),i.fA(0,1,0),a(),a(),B=o.vt(),function(t,e,r,n){return B[0]=r[0],B[3]=r[1],B[6]=r[2],B[1]=n[0],B[4]=n[1],B[7]=n[2],B[2]=-e[0],B[5]=-e[1],B[8]=-e[2],function(t,e){var r=e[0],n=e[1],s=e[2],o=e[3],i=r*r+n*n+s*s+o*o;return i>0&&(i=1/Math.sqrt(i)),t[0]=r*i,t[1]=n*i,t[2]=s*i,t[3]=o*i,t}(t,A(t,B))})},7976:(t,e,r)=>{r.d(e,{Bd:()=>n}),"undefined"!=typeof self&&self,"undefined"!=typeof window&&window,"undefined"!=typeof global&&global,"undefined"!=typeof document&&document;const n=Boolean("object"!=typeof process||"[object process]"!==String(process)||process.browser),s="undefined"!=typeof process&&process.version&&/v([0-9]*)/.exec(process.version);s&&parseFloat(s[1])},8016:(t,e,r)=>{r.d(e,{_:()=>a});var n=r(4971),s=r(3605),o=r(9099);const i={};async function a(t,e=null,r={},a=null){return e&&(t=function(t,e,r={},i=null){if(!r.useLocalLibraries&&t.startsWith("http"))return t;i=i||t;const a=r.modules||{};return a[i]?a[i]:n.Bd?r.CDN?((0,s.v)(r.CDN.startsWith("http")),`${r.CDN}/${e}@${o.Q}/dist/libs/${i}`):n.xD?`../src/libs/${i}`:`modules/${e}/src/libs/${i}`:`modules/${e}/dist/libs/${i}`}(t,e,r,a)),i[t]=i[t]||async function(t){if(t.endsWith("wasm"))return await async function(t){const{readFileAsArrayBuffer:e}=globalThis.loaders||{};if(n.Bd||!e||t.startsWith("http")){const e=await fetch(t);return await e.arrayBuffer()}return await e(t)}(t);if(!n.Bd)try{const{requireFromFile:e}=globalThis.loaders||{};return await(e?.(t))}catch(t){return console.error(t),null}if(n.xD)return importScripts(t);return function(t,e){if(!n.Bd){const{requireFromString:r}=globalThis.loaders||{};return r?.(t,e)}if(n.xD)return eval.call(globalThis,t),null;const r=document.createElement("script");r.id=e;try{r.appendChild(document.createTextNode(t))}catch(e){r.text=t}return document.body.appendChild(r),null}(await async function(t){const{readFileAsText:e}=globalThis.loaders||{};if(n.Bd||!e||t.startsWith("http")){const e=await fetch(t);return await e.text()}return await e(t)}(t),t)}(t),await i[t]}},8401:(t,e,r)=>{function n(t,e,r,n){return new(r||(r=Promise))(function(s,o){function i(t){try{c(n.next(t))}catch(t){o(t)}}function a(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof r?e:new r(function(t){t(e)})).then(i,a)}c((n=n.apply(t,e||[])).next())})}r.d(e,{sH:()=>n}),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError},9099:(t,e,r)=>{r.d(e,{Q:()=>s,x:()=>n});const n="latest",s=(globalThis._loadersgl_?.version||(globalThis._loadersgl_=globalThis._loadersgl_||{},globalThis._loadersgl_.version="4.3.3"),globalThis._loadersgl_.version)},9679:(t,e,r)=>{r.d(e,{Vl:()=>m});const n={dataType:null,batchType:null,name:"Draco",id:"draco",module:"draco",version:"4.3.3",worker:!0,extensions:["drc"],mimeTypes:["application/octet-stream"],binary:!0,tests:["DRACO"],options:{draco:{decoderType:"object"==typeof WebAssembly?"wasm":"js",libraryPath:"libs/",extraAttributes:{},attributeNameEntry:void 0}}};function s(t,e,r){const n=function(t){switch(t.constructor){case Int8Array:return"int8";case Uint8Array:case Uint8ClampedArray:return"uint8";case Int16Array:return"int16";case Uint16Array:return"uint16";case Int32Array:return"int32";case Uint32Array:return"uint32";case Float32Array:return"float32";case Float64Array:return"float64";default:return"null"}}(e.value),s=r||function(t){const e={};return"byteOffset"in t&&(e.byteOffset=t.byteOffset.toString(10)),"byteStride"in t&&(e.byteStride=t.byteStride.toString(10)),"normalized"in t&&(e.normalized=t.normalized.toString()),e}(e);return{name:t,type:{type:"fixed-size-list",listSize:e.size,children:[{name:"value",type:n}]},nullable:!1,metadata:s}}function o(t,e,r){return s(t,e,r?i(r.metadata):void 0)}function i(t){Object.entries(t);const e={};for(const r in t)e[`${r}.string`]=JSON.stringify(t[r]);return e}const a={POSITION:"POSITION",NORMAL:"NORMAL",COLOR:"COLOR_0",TEX_COORD:"TEXCOORD_0"},c={1:Int8Array,2:Uint8Array,3:Int16Array,4:Uint16Array,5:Int32Array,6:Uint32Array,9:Float32Array};class u{draco;decoder;metadataQuerier;constructor(t){this.draco=t,this.decoder=new this.draco.Decoder,this.metadataQuerier=new this.draco.MetadataQuerier}destroy(){this.draco.destroy(this.decoder),this.draco.destroy(this.metadataQuerier)}parseSync(t,e={}){const r=new this.draco.DecoderBuffer;r.Init(new Int8Array(t),t.byteLength),this._disableAttributeTransforms(e);const n=this.decoder.GetEncodedGeometryType(r),s=n===this.draco.TRIANGULAR_MESH?new this.draco.Mesh:new this.draco.PointCloud;try{let t;switch(n){case this.draco.TRIANGULAR_MESH:t=this.decoder.DecodeBufferToMesh(r,s);break;case this.draco.POINT_CLOUD:t=this.decoder.DecodeBufferToPointCloud(r,s);break;default:throw new Error("DRACO: Unknown geometry type.")}if(!t.ok()||!s.ptr){const e=`DRACO decompression failed: ${t.error_msg()}`;throw new Error(e)}const a=this._getDracoLoaderData(s,n,e),c=this._getMeshData(s,a,e),u=function(t){let e=1/0,r=1/0,n=1/0,s=-1/0,o=-1/0,i=-1/0;const a=t.POSITION?t.POSITION.value:[],c=a&&a.length;for(let t=0;t<c;t+=3){const c=a[t],u=a[t+1],A=a[t+2];e=c<e?c:e,r=u<r?u:r,n=A<n?A:n,s=c>s?c:s,o=u>o?u:o,i=A>i?A:i}return[[e,r,n],[s,o,i]]}(c.attributes),A=function(t,e,r){const n=i(e.metadata),s=[],a=function(t){const e={};for(const r in t){const n=t[r];e[n.name||"undefined"]=n}return e}(e.attributes);for(const e in t){const r=o(e,t[e],a[e]);s.push(r)}if(r){const t=o("indices",r);s.push(t)}return{fields:s,metadata:n}}(c.attributes,a,c.indices);return{loader:"draco",loaderData:a,header:{vertexCount:s.num_points(),boundingBox:u},...c,schema:A}}finally{this.draco.destroy(r),s&&this.draco.destroy(s)}}_getDracoLoaderData(t,e,r){const n=this._getTopLevelMetadata(t),s=this._getDracoAttributes(t,r);return{geometry_type:e,num_attributes:t.num_attributes(),num_points:t.num_points(),num_faces:t instanceof this.draco.Mesh?t.num_faces():0,metadata:n,attributes:s}}_getDracoAttributes(t,e){const r={};for(let n=0;n<t.num_attributes();n++){const s=this.decoder.GetAttribute(t,n),o=this._getAttributeMetadata(t,n);r[s.unique_id()]={unique_id:s.unique_id(),attribute_type:s.attribute_type(),data_type:s.data_type(),num_components:s.num_components(),byte_offset:s.byte_offset(),byte_stride:s.byte_stride(),normalized:s.normalized(),attribute_index:n,metadata:o};const i=this._getQuantizationTransform(s,e);i&&(r[s.unique_id()].quantization_transform=i);const a=this._getOctahedronTransform(s,e);a&&(r[s.unique_id()].octahedron_transform=a)}return r}_getMeshData(t,e,r){const n=this._getMeshAttributes(e,t,r);if(!n.POSITION)throw new Error("DRACO: No position attribute found.");return t instanceof this.draco.Mesh?"triangle-strip"===r.topology?{topology:"triangle-strip",mode:4,attributes:n,indices:{value:this._getTriangleStripIndices(t),size:1}}:{topology:"triangle-list",mode:5,attributes:n,indices:{value:this._getTriangleListIndices(t),size:1}}:{topology:"point-list",mode:0,attributes:n}}_getMeshAttributes(t,e,r){const n={};for(const s of Object.values(t.attributes)){const t=this._deduceAttributeName(s,r);s.name=t;const o=this._getAttributeValues(e,s);if(o){const{value:e,size:r}=o;n[t]={value:e,size:r,byteOffset:s.byte_offset,byteStride:s.byte_stride,normalized:s.normalized}}}return n}_getTriangleListIndices(t){const e=3*t.num_faces(),r=4*e,n=this.draco._malloc(r);try{return this.decoder.GetTrianglesUInt32Array(t,r,n),new Uint32Array(this.draco.HEAPF32.buffer,n,e).slice()}finally{this.draco._free(n)}}_getTriangleStripIndices(t){const e=new this.draco.DracoInt32Array;try{return this.decoder.GetTriangleStripsFromMesh(t,e),function(t){const e=t.size(),r=new Int32Array(e);for(let n=0;n<e;n++)r[n]=t.GetValue(n);return r}(e)}finally{this.draco.destroy(e)}}_getAttributeValues(t,e){const r=c[e.data_type];if(!r)return console.warn(`DRACO: Unsupported attribute type ${e.data_type}`),null;const n=e.num_components,s=t.num_points()*n,o=s*r.BYTES_PER_ELEMENT,i=function(t,e){switch(e){case Float32Array:return t.DT_FLOAT32;case Int8Array:return t.DT_INT8;case Int16Array:return t.DT_INT16;case Int32Array:return t.DT_INT32;case Uint8Array:return t.DT_UINT8;case Uint16Array:return t.DT_UINT16;case Uint32Array:return t.DT_UINT32;default:return t.DT_INVALID}}(this.draco,r);let a;const u=this.draco._malloc(o);try{const n=this.decoder.GetAttribute(t,e.attribute_index);this.decoder.GetAttributeDataArrayForAllPoints(t,n,i,o,u),a=new r(this.draco.HEAPF32.buffer,u,s).slice()}finally{this.draco._free(u)}return{value:a,size:n}}_deduceAttributeName(t,e){const r=t.unique_id;for(const[t,n]of Object.entries(e.extraAttributes||{}))if(n===r)return t;const n=t.attribute_type;for(const t in a)if(this.draco[t]===n)return a[t];const s=e.attributeNameEntry||"name";return t.metadata[s]?t.metadata[s].string:`CUSTOM_ATTRIBUTE_${r}`}_getTopLevelMetadata(t){const e=this.decoder.GetMetadata(t);return this._getDracoMetadata(e)}_getAttributeMetadata(t,e){const r=this.decoder.GetAttributeMetadata(t,e);return this._getDracoMetadata(r)}_getDracoMetadata(t){if(!t||!t.ptr)return{};const e={},r=this.metadataQuerier.NumEntries(t);for(let n=0;n<r;n++){const r=this.metadataQuerier.GetEntryName(t,n);e[r]=this._getDracoMetadataField(t,r)}return e}_getDracoMetadataField(t,e){const r=new this.draco.DracoInt32Array;try{this.metadataQuerier.GetIntEntryArray(t,e,r);const n=function(t){const e=t.size(),r=new Int32Array(e);for(let n=0;n<e;n++)r[n]=t.GetValue(n);return r}(r);return{int:this.metadataQuerier.GetIntEntry(t,e),string:this.metadataQuerier.GetStringEntry(t,e),double:this.metadataQuerier.GetDoubleEntry(t,e),intArray:n}}finally{this.draco.destroy(r)}}_disableAttributeTransforms(t){const{quantizedAttributes:e=[],octahedronAttributes:r=[]}=t,n=[...e,...r];for(const t of n)this.decoder.SkipAttributeTransform(this.draco[t])}_getQuantizationTransform(t,e){const{quantizedAttributes:r=[]}=e,n=t.attribute_type();if(r.map(t=>this.decoder[t]).includes(n)){const e=new this.draco.AttributeQuantizationTransform;try{if(e.InitFromAttribute(t))return{quantization_bits:e.quantization_bits(),range:e.range(),min_values:new Float32Array([1,2,3]).map(t=>e.min_value(t))}}finally{this.draco.destroy(e)}}return null}_getOctahedronTransform(t,e){const{octahedronAttributes:r=[]}=e,n=t.attribute_type();if(r.map(t=>this.decoder[t]).includes(n)){const e=new this.draco.AttributeQuantizationTransform;try{if(e.InitFromAttribute(t))return{quantization_bits:e.quantization_bits()}}finally{this.draco.destroy(e)}}return null}}var A=r(8016);const f="https://www.gstatic.com/draco/versioned/decoders/1.5.6",B="draco_wasm_wrapper.js",l="draco_decoder.wasm",h="draco_decoder.js",d="draco_encoder.js",C={[B]:`${f}/${B}`,[l]:`${f}/${l}`,[h]:`${f}/${h}`,[d]:`https://raw.githubusercontent.com/google/draco/1.4.1/javascript/${d}`};let g;const m={...n,parse:async function(t,e){const{draco:r}=await async function(t){const e=t.modules||{};return e.draco3d?g||=e.draco3d.createDecoderModule({}).then(t=>({draco:t})):g||=async function(t){let e,r;return"js"===(t.draco&&t.draco.decoderType)?e=await(0,A._)(C[h],"draco",t,h):[e,r]=await Promise.all([await(0,A._)(C[B],"draco",t,B),await(0,A._)(C[l],"draco",t,l)]),e=e||globalThis.DracoDecoderModule,await function(t,e){const r={};return e&&(r.wasmBinary=e),new Promise(e=>{t({...r,onModuleLoaded:t=>e({draco:t})})})}(e,r)}(t),await g}(e),n=new u(r);try{return n.parseSync(t,e?.draco)}finally{n.destroy()}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,